[{"filePath":"/builds/erp/finance-fe/setupProxy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/accountingModal/accountingModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/accountingModal/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/budgetLimitModal/budgetLimitModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/budgetLimitModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/depositConfiscationModal/depositConfiscationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4296,4299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4296,4299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport {CONFISCATED_PROPERTY_TYPES_SETTINGS} from '../../screens/deposit/fixedDeposit/constants';\nimport useInsertFixedDepositItem from '../../services/graphQL/fixedDeposits/useInsertDepositItem';\nimport useGetSettings from '../../services/graphQL/getSettings/useGetSettings';\nimport useGetJudges from '../../services/graphQL/judges/useGetJudges';\nimport {FormGroup} from '../../shared/form';\nimport {DropdownData} from '../../types/dropdownData';\nimport {DepositConfiscation} from '../../types/graphQL/fixedDeposits';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport {optionsNumberSchema, optionsStringSchema} from '../../utils/formSchemas';\nimport FileList from '../fileList/fileList';\n\ntype DepositConfiscationModalProps = {\n  open: boolean;\n  onClose: () => void;\n  data: DepositConfiscation | null;\n  refetch: () => void;\n};\n\nconst depositConfiscationSchema = yup.object({\n  type: yup.string(),\n  amount: yup.string().required(requiredError),\n  currency: optionsStringSchema.when('type', {\n    is: 'financial',\n    then: schema => schema.required(requiredError),\n  }),\n  unit: yup.string().when('type', {\n    is: 'material',\n    then: schema => schema.required(requiredError),\n  }),\n  category_id: optionsNumberSchema.when('type', {\n    is: 'material',\n    then: schema => schema.required(requiredError),\n  }),\n  type_id: optionsNumberSchema.when('type', {\n    is: 'material',\n    then: schema => schema.required(requiredError),\n  }),\n  serial_number: yup.string().when('type', {\n    is: 'material',\n    then: schema => schema.required(requiredError),\n  }),\n  date_of_confiscation: yup.date().required(requiredError).default(null),\n  judge_id: optionsNumberSchema.required(requiredError),\n  file_id: yup.number().nullable().default(null),\n  id: yup.number().nullable().default(null),\n});\n\ntype DepositConfiscationSchemaType = yup.InferType<typeof depositConfiscationSchema>;\n\nconst DepositConfiscationModal = ({open, onClose, data, refetch}: DepositConfiscationModalProps) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const isNew = !data;\n\n  const {\n    navigation: {\n      location: {pathname},\n    },\n    fileService: {uploadFile},\n    currencies,\n    alert,\n  } = useAppContext();\n\n  const type = useMemo(() => {\n    const pathnameSegments = pathname.split('/');\n    return pathnameSegments[pathnameSegments.length - 2];\n  }, [pathname]);\n\n  const deposit_id = pathname.split('/').pop();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    reset,\n    control,\n    watch,\n    setValue,\n  } = useForm<DepositConfiscationSchemaType>({resolver: yupResolver(depositConfiscationSchema)});\n\n  const category = watch('category_id');\n\n  const {insertFixedDepositItem} = useInsertFixedDepositItem();\n  const {judges} = useGetJudges({});\n  const {data: confiscationCategories} = useGetSettings({entity: CONFISCATED_PROPERTY_TYPES_SETTINGS});\n  const {data: confiscationTypes} = useGetSettings({\n    entity: CONFISCATED_PROPERTY_TYPES_SETTINGS,\n    parent_id: category?.id,\n  });\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: DepositConfiscationSchemaType) => {\n    const payload = {\n      unit: data.unit,\n      serial_number: data.serial_number,\n      amount: parseFloat(data.amount),\n      date_of_confiscation: parseDateForBackend(data.date_of_confiscation) as string,\n      file_id: data.file_id ? data.file_id : null,\n      currency: data.currency?.id,\n      deposit_id: parseInt(deposit_id as string),\n      judge_id: data.judge_id.id,\n      type_id: data.type_id?.id,\n      category_id: data.category_id?.id,\n      id: isNew ? null : data.id,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertFixedDepositItem(\n      payload,\n      () => {\n        alert.success(isNew ? 'Depozit uspješno kreiran!' : 'Depozit uspješno izmijenjen!');\n        refetch();\n        onClose();\n      },\n      () => {\n        alert.error(isNew ? 'Greška pri kreiranju depozita!' : 'Greška pri izmjeni depozita!');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data) {\n      reset({\n        type,\n        id: data.id,\n        file_id: data.file.id,\n        judge_id: data.judge,\n        unit: data.unit,\n        serial_number: data.serial_number,\n        category_id: data.category.id ? data.category : null,\n        type_id: data.type.id ? data.type : null,\n        date_of_confiscation: new Date(data.date_of_confiscation),\n        currency: currencies.find((currency: DropdownData<string>) => currency.id === data.currency),\n        amount: data.amount.toString(),\n      });\n    }\n  }, [data]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      title={isNew ? 'KREIRAJ DEPOZIT' : 'UREDI DEPOZIT'}\n      leftButtonOnClick={onClose}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      rightButtonText=\"Sačuvaj\"\n      leftButtonText=\"Otkaži\"\n      content={\n        <div>\n          {type === 'financial' ? (\n            <FormGroup style={{marginBottom: 15}}>\n              <Controller\n                control={control}\n                name=\"currency\"\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    label=\"VALUTA:\"\n                    options={currencies}\n                    error={errors.currency?.message}\n                  />\n                )}\n              />\n            </FormGroup>\n          ) : (\n            <>\n              <FormGroup style={{marginBottom: 15}}>\n                <Controller\n                  control={control}\n                  name=\"category_id\"\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value}\n                      onChange={value => {\n                        onChange(value);\n                        setValue('type_id', null);\n                      }}\n                      label=\"KATEGORIJA:\"\n                      options={confiscationCategories.items}\n                      error={errors.category_id?.message}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup style={{marginBottom: 15}}>\n                <Controller\n                  control={control}\n                  name=\"type_id\"\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value}\n                      onChange={onChange}\n                      label=\"VRSTA:\"\n                      options={confiscationTypes.items}\n                      error={errors.category_id?.message}\n                      isDisabled={!category}\n                    />\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n          <FormGroup style={{marginBottom: 15}}>\n            {type === 'material' && <Input {...register('unit')} label=\"JEDINICA:\" error={errors.amount?.message} />}\n          </FormGroup>\n          <FormGroup style={{marginBottom: 15}}>\n            <Input\n              {...register('amount')}\n              label={type === 'financial' ? 'IZNOS' : 'KOLIČINA'}\n              error={errors.amount?.message}\n            />\n          </FormGroup>\n          {type === 'material' && (\n            <FormGroup style={{marginBottom: 15}}>\n              <Input {...register('serial_number')} label=\"SERIJSKI BROJ:\" error={errors.serial_number?.message} />\n            </FormGroup>\n          )}\n          <Controller\n            name=\"date_of_confiscation\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                onChange={onChange}\n                label=\"DATUM ODUZIMANJA:\"\n                error={errors.date_of_confiscation?.message}\n                style={{marginBottom: 15}}\n              />\n            )}\n          />\n          <div style={{marginBottom: 25}}>\n            <Controller\n              name=\"judge_id\"\n              control={control}\n              render={({field: {name, value, onChange}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  label=\"SUDIJA:\"\n                  options={judges}\n                  error={errors.judge_id?.message}\n                />\n              )}\n            />\n          </div>\n\n          <div>\n            <FileUpload\n              icon={null}\n              files={uploadedFiles}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n              buttonText=\"Učitaj\"\n              style={{marginBottom: 10}}\n            />\n            <FileList files={data?.file.id ? [data.file] : null} isInModal />\n          </div>\n        </div>\n      }\n    />\n  );\n};\n\nexport default DepositConfiscationModal;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/depositDispatchModal/depositDispatchModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4533,4536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4533,4536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport {CONFISCATED_PROPERTY_TYPES_SETTINGS} from '../../screens/deposit/fixedDeposit/constants';\nimport useInsertDepositDispatch from '../../services/graphQL/fixedDeposits/useInsertDepositDispatch';\nimport useGetSettings from '../../services/graphQL/getSettings/useGetSettings';\nimport useGetJudges from '../../services/graphQL/judges/useGetJudges';\nimport {FormGroup} from '../../shared/form';\nimport {DropdownData} from '../../types/dropdownData';\nimport {DepositDispatch} from '../../types/graphQL/fixedDeposits';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport {optionsNumberSchema, optionsStringSchema} from '../../utils/formSchemas';\nimport FileList from '../fileList/fileList';\n\ntype DepositDispatchModalProps = {\n  open: boolean;\n  onClose: () => void;\n  data: DepositDispatch | null;\n  refetch: () => void;\n};\n\nconst depositDispatchSchema = yup.object({\n  type: yup.string(),\n  amount: yup.string().required(requiredError),\n  currency: optionsStringSchema.when('type', {\n    is: 'financial',\n    then: schema => schema.required(requiredError),\n  }),\n  unit: yup.string().when('type', {\n    is: 'material',\n    then: schema => schema.required(requiredError),\n  }),\n  type_id: optionsNumberSchema.when('type', {\n    is: 'material',\n    then: schema => schema.required(requiredError),\n  }),\n  category_id: optionsNumberSchema.when('type', {\n    is: 'material',\n    then: schema => schema.required(requiredError),\n  }),\n  serial_number: yup.string().when('type', {\n    is: 'material',\n    then: schema => schema.required(requiredError),\n  }),\n  date_of_action: yup.date().required(requiredError).default(null),\n  judge_id: optionsNumberSchema.required(requiredError),\n  file_id: yup.number().nullable().default(null),\n  id: yup.number().nullable().default(null),\n  action: yup.string().required(requiredError),\n  subject: yup.string().required(requiredError),\n  case_number: yup.string().required(requiredError),\n});\n\ntype DepositDispatchSchemaType = yup.InferType<typeof depositDispatchSchema>;\n\nconst DepositDispatchModal = ({open, onClose, data, refetch}: DepositDispatchModalProps) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const isNew = !data;\n\n  const {\n    navigation: {\n      location: {pathname},\n    },\n    fileService: {uploadFile},\n    currencies,\n    alert,\n  } = useAppContext();\n\n  const type = useMemo(() => {\n    const pathnameSegments = pathname.split('/');\n    return pathnameSegments[pathnameSegments.length - 2];\n  }, [pathname]);\n\n  const deposit_id = pathname.split('/').pop();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    reset,\n    control,\n    watch,\n    setValue,\n  } = useForm<DepositDispatchSchemaType>({resolver: yupResolver(depositDispatchSchema)});\n\n  const category = watch('category_id');\n\n  const {insertDepositDispatch} = useInsertDepositDispatch();\n  const {judges} = useGetJudges({});\n\n  const {data: confiscationCategories} = useGetSettings({entity: CONFISCATED_PROPERTY_TYPES_SETTINGS});\n  const {data: confiscationTypes} = useGetSettings({\n    entity: CONFISCATED_PROPERTY_TYPES_SETTINGS,\n    parent_id: category?.id,\n  });\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: DepositDispatchSchemaType) => {\n    const payload = {\n      unit: data.unit,\n      action: data.action,\n      serial_number: data.serial_number,\n      amount: parseFloat(data.amount),\n      date_of_action: parseDateForBackend(data.date_of_action) as string,\n      file_id: data.file_id ? data.file_id : null,\n      currency: data.currency?.id,\n      deposit_id: parseInt(deposit_id as string),\n      judge_id: data.judge_id.id,\n      id: isNew ? null : data.id,\n      case_number: data.case_number,\n      category_id: data.category_id?.id ? data.category_id.id : null,\n      type_id: data.type_id?.id ? data.type_id.id : null,\n      subject: data.subject,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertDepositDispatch(\n      payload,\n      () => {\n        alert.success(isNew ? 'Povrat uspješno kreiran!' : 'Povrat uspješno izmijenjena!');\n        refetch();\n        onClose();\n      },\n      () => {\n        alert.error(isNew ? 'Greška pri kreiranju povrata!' : 'Greška pri izmjeni povrata!');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data) {\n      reset({\n        type,\n        unit: data.unit,\n        serial_number: data.serial_number,\n        type_id: data.type.id ? data.type : null,\n        category_id: data.category.id ? data.category : null,\n        id: data.id,\n        file_id: data.file.id,\n        judge_id: data.judge,\n        date_of_action: new Date(data.date_of_action),\n        currency: currencies.find((currency: DropdownData<string>) => currency.id === data.currency),\n        amount: data.amount.toString(),\n        subject: data.subject,\n        case_number: data.case_number,\n        action: data.action,\n      });\n    }\n  }, [data]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      title={isNew ? 'KREIRAJ POVRAT DEPOZITA' : 'UREDI POVRAT DEPOZITA'}\n      leftButtonOnClick={onClose}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      rightButtonText=\"Sačuvaj\"\n      leftButtonText=\"Otkaži\"\n      content={\n        <div>\n          {type === 'financial' && (\n            <FormGroup style={{marginBottom: 15}}>\n              <Controller\n                control={control}\n                name=\"currency\"\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    label=\"VALUTA:\"\n                    options={currencies}\n                    error={errors.currency?.message}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n          {type === 'material' && (\n            <>\n              <FormGroup style={{marginBottom: 15}}>\n                <Controller\n                  control={control}\n                  name=\"category_id\"\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value}\n                      onChange={value => {\n                        onChange(value);\n                        setValue('type_id', null);\n                      }}\n                      label=\"KATEGORIJA:\"\n                      options={confiscationCategories.items}\n                      error={errors.category_id?.message}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup style={{marginBottom: 15}}>\n                <Controller\n                  control={control}\n                  name=\"type_id\"\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value}\n                      onChange={onChange}\n                      label=\"VRSTA:\"\n                      options={confiscationTypes.items}\n                      error={errors.type_id?.message}\n                      isDisabled={!category}\n                    />\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n          {type === 'material' && (\n            <FormGroup>\n              <Input {...register('unit')} label=\"JEDINICA:\" error={errors.amount?.message} />\n            </FormGroup>\n          )}\n          <FormGroup style={{marginBottom: 15}}>\n            <Input\n              {...register('amount')}\n              label={type === 'material' ? 'KOLIČINA' : 'IZNOS'}\n              error={errors.amount?.message}\n            />\n          </FormGroup>\n          {type === 'material' && (\n            <FormGroup style={{marginBottom: 15}}>\n              <Input {...register('serial_number')} label=\"SERIJSKI BROJ:\" error={errors.serial_number?.message} />\n            </FormGroup>\n          )}\n          <Controller\n            name=\"date_of_action\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                onChange={onChange}\n                label=\"DATUM AKTA:\"\n                error={errors.date_of_action?.message}\n                style={{marginBottom: 15}}\n              />\n            )}\n          />\n          <FormGroup style={{marginBottom: 15}}>\n            <Input {...register('case_number')} label=\"BROJ AKTA:\" error={errors.case_number?.message} />\n          </FormGroup>\n          <FormGroup>\n            <Controller\n              name=\"judge_id\"\n              control={control}\n              render={({field: {name, value, onChange}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  label=\"SUDIJA:\"\n                  options={judges}\n                  error={errors.judge_id?.message}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup style={{marginBottom: 15}}>\n            <Input {...register('action')} label=\"NAČIN VRAĆANJA:\" error={errors.action?.message} />\n          </FormGroup>\n          <FormGroup style={{marginBottom: 15}}>\n            <Input {...register('subject')} label=\"PRIMALAC:\" error={errors.subject?.message} />\n          </FormGroup>\n\n          <div style={{marginTop: 25}}>\n            <FileUpload\n              icon={null}\n              files={uploadedFiles}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n              buttonText=\"Učitaj\"\n            />\n            <FileList files={data?.file.id ? [data.file] : null} isInModal />\n          </div>\n        </div>\n      }\n    />\n  );\n};\n\nexport default DepositDispatchModal;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/externalReallocationModal/externalReallocationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/fileList/fileList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/fileList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/fileModalView/fileModalView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/fileModalView/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/financeDepositForm.tsx/financialDepositForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2888,2891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2888,2891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, Dropdown, FileUpload, Input, Typography} from 'client-library';\nimport {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport useGetCountOverview from '../../services/graphQL/counts/useGetCountOverview';\nimport useInsertFixedDeposit from '../../services/graphQL/fixedDeposits/useInsertFixedDeposit';\nimport {FlexColumn, FlexRow} from '../../shared/flex';\nimport Footer from '../../shared/footer';\nimport {FixedDeposit} from '../../types/graphQL/fixedDeposits';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport {optionsNumberSchema} from '../../utils/formSchemas';\nimport FileList from '../fileList/fileList';\n\nconst financialDepositSchema = yup.object({\n  case_number: yup.string().required(requiredError),\n  subject: yup.string().required(requiredError),\n  account_id: optionsNumberSchema,\n  date_of_recipiet: yup.date().required(requiredError).default(null),\n  date_of_case: yup.date().required(requiredError).default(null),\n  date_of_end: yup.date().nullable().default(null),\n  file_id: yup.number().nullable().default(null),\n});\n\ntype FinancialDepositForm = yup.InferType<typeof financialDepositSchema>;\n\nconst FinancialDepositForm = ({data}: {data?: FixedDeposit}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n    contextMain: {organization_unit_id},\n    fileService: {uploadFile},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n  const isNew = id === 'add-new';\n\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: {errors},\n    reset,\n  } = useForm<FinancialDepositForm>({\n    resolver: yupResolver(financialDepositSchema),\n  });\n\n  const {counts} = useGetCountOverview({});\n\n  const {insertFixedDeposit, loading: isSaving} = useInsertFixedDeposit();\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: FinancialDepositForm) => {\n    const payload = {\n      ...data,\n      account_id: data.account_id?.id,\n      date_of_recipiet: parseDateForBackend(data.date_of_recipiet) as string,\n      date_of_case: parseDateForBackend(data.date_of_case) as string,\n      date_of_end: parseDateForBackend(data.date_of_end) as string,\n      organization_unit_id,\n      type: 'financial',\n      id: id ? parseInt(id) : null,\n      file_id: data.file_id ? data.file_id : null,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertFixedDeposit(\n      payload,\n      (data: FixedDeposit) => {\n        alert.success(\n          isNew ? 'Uspešno ste dodali novi finansijski depozit' : 'Uspešno ste izmjenili finansijski depozit',\n        );\n        if (isNew) {\n          navigate(`/finance/deposit/fixed/financial/${data.id}`);\n        }\n      },\n      () => {\n        alert.error(\n          isNew\n            ? 'Greška prilikom dodavanja novog finansijskog depozita'\n            : 'Greška prilikom izmjene finansijskog depozita',\n        );\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data && !isNew) {\n      reset({\n        file_id: data?.file.id,\n        case_number: data?.case_number,\n        subject: data?.subject,\n        account_id: data?.account,\n        date_of_recipiet: new Date(data?.date_of_recipiet),\n        date_of_case: new Date(data?.date_of_case),\n        date_of_end: data?.date_of_end ? new Date(data?.date_of_end) : null,\n      });\n    }\n  }, [data]);\n\n  const disabled = data?.status === 'Zakljucen';\n\n  return (\n    <FlexColumn gap={20} style={{alignItems: 'stretch'}}>\n      <FlexRow gap={8}>\n        <Input\n          {...register('case_number')}\n          label=\"BROJ PREDMETA:\"\n          error={errors.case_number?.message}\n          disabled={disabled}\n        />\n        <Input\n          {...register('subject')}\n          label=\"IME I PREZIME STRANKE:\"\n          error={errors.subject?.message}\n          disabled={disabled}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"date_of_recipiet\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PRIJEMA AKTA:\"\n              onChange={onChange}\n              error={errors.date_of_recipiet?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n        <Controller\n          name=\"date_of_case\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PREDMETA:\"\n              onChange={onChange}\n              error={errors.date_of_case?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              value={value}\n              onChange={onChange}\n              name={name}\n              options={counts}\n              label=\"KONTO:\"\n              error={errors.account_id?.message}\n              isDisabled={disabled}\n            />\n          )}\n        />\n        <div style={{width: '100%'}}>\n          <Controller\n            name=\"date_of_end\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM ZAKLJUČENJA:\"\n                onChange={onChange}\n                error={errors.date_of_end?.message}\n                disabled={isNew || disabled}\n              />\n            )}\n          />\n        </div>\n      </FlexRow>\n      <div style={{marginBottom: 10}}>\n        <FileUpload\n          icon={null}\n          files={uploadedFiles}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n          disabled={disabled}\n        />\n        <FileList files={data?.file.id ? [data.file] : null} />\n      </div>\n\n      {!disabled && (\n        <Footer>\n          <Button\n            content=\"Odustani\"\n            variant=\"secondary\"\n            onClick={() => navigate('/finance/deposit/fixed/financial/overview')}\n          />\n          <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={isSaving} />\n        </Footer>\n      )}\n    </FlexColumn>\n  );\n};\n\nexport default FinancialDepositForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/fundReleaseModal/fundReleaseModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/goalsModal/goalsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/goalsModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/goalsModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74,77],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74,77],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[89,92],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[89,92],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface GoalsModalProps {\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n  budgetProgramId: number;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/indicatorModal/indicatorModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/indicatorModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/indicatorModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[78,81],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[78,81],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[93,96],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[93,96],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface IndicatorModalProps {\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/invoicesTabs/invoicesTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/landingPageContentBox/landingPageContentBox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/landingPageContentBox/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/landingPageContentBox/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/materialDepositForm/materialDepositForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2989,2992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2989,2992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, FileUpload, Input, Typography} from 'client-library';\nimport {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport useInsertFixedDeposit from '../../services/graphQL/fixedDeposits/useInsertFixedDeposit';\nimport {FlexColumn, FlexRow} from '../../shared/flex';\nimport Footer from '../../shared/footer';\nimport {FixedDeposit} from '../../types/graphQL/fixedDeposits';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport {optionsNumberSchema} from '../../utils/formSchemas';\nimport FileList from '../fileList/fileList';\n\nconst materialDepositSchema = yup.object({\n  case_number: yup.string().required(requiredError),\n  subject: yup.string().required(requiredError),\n  account_id: optionsNumberSchema,\n  date_of_recipiet: yup.date().required(requiredError).default(null),\n  date_of_case: yup.date().required(requiredError).default(null),\n  date_of_enforceability: yup.date().nullable().default(null),\n  date_of_finality: yup.date().nullable().default(null),\n  date_of_end: yup.date().nullable().default(null),\n  file_id: yup.number().nullable().default(null),\n});\n\ntype MaterialDepositForm = yup.InferType<typeof materialDepositSchema>;\n\nconst MaterialDepositForm = ({data}: {data?: FixedDeposit}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n    contextMain: {organization_unit_id},\n    fileService: {uploadFile},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n  const isNew = id === 'add-new';\n\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: {errors},\n    reset,\n  } = useForm<MaterialDepositForm>({\n    resolver: yupResolver(materialDepositSchema),\n  });\n\n  const {insertFixedDeposit, loading: isSaving} = useInsertFixedDeposit();\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: MaterialDepositForm) => {\n    const payload = {\n      ...data,\n      date_of_recipiet: parseDateForBackend(data.date_of_recipiet) as string,\n      date_of_case: parseDateForBackend(data.date_of_case) as string,\n      date_of_end: parseDateForBackend(data.date_of_end) as string,\n      date_of_finality: parseDateForBackend(data.date_of_finality) as string,\n      date_of_enforceability: parseDateForBackend(data.date_of_enforceability) as string,\n      organization_unit_id,\n      type: 'material',\n      id: id ? parseInt(id) : null,\n      file_id: data.file_id ? data.file_id : null,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertFixedDeposit(\n      payload,\n      (data: FixedDeposit) => {\n        alert.success(\n          isNew ? 'Uspješno ste dodali novi materijalni depozit' : 'Uspješno ste izmjenili materijalni depozit',\n        );\n        if (isNew) {\n          navigate(`/finance/deposit/fixed/material/${data.id}`);\n        }\n      },\n      () => {\n        alert.error(\n          isNew\n            ? 'Greška prilikom dodavanja novog materijalnog depozita'\n            : 'Greška prilikom izmjene materijalnog depozita',\n        );\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data && !isNew) {\n      reset({\n        file_id: data?.file.id,\n        case_number: data?.case_number,\n        subject: data?.subject,\n        date_of_recipiet: new Date(data?.date_of_recipiet),\n        date_of_case: new Date(data?.date_of_case),\n        date_of_enforceability: data?.date_of_enforceability ? new Date(data?.date_of_enforceability) : null,\n        date_of_finality: data?.date_of_finality ? new Date(data?.date_of_finality) : null,\n        date_of_end: data?.date_of_end ? new Date(data?.date_of_end) : null,\n      });\n    }\n  }, [data]);\n\n  const disabled = data?.status === 'Zakljucen';\n\n  return (\n    <FlexColumn gap={20} style={{alignItems: 'stretch'}}>\n      <FlexRow gap={8}>\n        <Input\n          {...register('case_number')}\n          label=\"BROJ PREDMETA:\"\n          error={errors.case_number?.message}\n          disabled={disabled}\n        />\n        <Input\n          {...register('subject')}\n          label=\"IME I PREZIME STRANKE:\"\n          error={errors.subject?.message}\n          disabled={disabled}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"date_of_recipiet\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PRIJEMA AKTA\"\n              onChange={onChange}\n              error={errors.date_of_recipiet?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n        <Controller\n          name=\"date_of_case\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PREDMETA\"\n              onChange={onChange}\n              error={errors.date_of_case?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n        <Controller\n          name=\"date_of_enforceability\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI\"\n              onChange={onChange}\n              error={errors.date_of_enforceability?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"date_of_finality\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PRAVOSNAŽNOSTI\"\n              onChange={onChange}\n              error={errors.date_of_finality?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n        <Controller\n          name=\"date_of_end\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM ZAKLJUČENJA\"\n              onChange={onChange}\n              error={errors.date_of_end?.message}\n              disabled={isNew || disabled}\n            />\n          )}\n        />\n      </FlexRow>\n      <div style={{marginBottom: 10}}>\n        <FileUpload\n          icon={null}\n          files={uploadedFiles}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n          disabled={disabled}\n        />\n        <FileList files={data?.file.id ? [data.file] : null} />\n      </div>\n\n      {!disabled && (\n        <Footer>\n          <Button\n            content=\"Odustani\"\n            variant=\"secondary\"\n            onClick={() => navigate('/finance/deposit/fixed/material/overview')}\n          />\n          <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={isSaving} />\n        </Footer>\n      )}\n    </FlexColumn>\n  );\n};\n\nexport default MaterialDepositForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/activitySection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/nonFinanceAccordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/programSection/programSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/programSection/programSectionPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/subprogramSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/payOrderModal/payOrderModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1007,1010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1007,1010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Input, Modal} from 'client-library';\nimport {Controller, useForm} from 'react-hook-form';\nimport useAppContext from '../../context/useAppContext.ts';\nimport usePayPaymentOrder from '../../services/graphQL/receivables/usePayPaymentOrder.ts';\nimport {parseDateForBackend} from '../../utils/dateUtils.ts';\n\ninterface FundReleaseModalProps {\n  onClose: () => void;\n  open: boolean;\n  id?: number;\n}\n\ninterface FundReleaseModalForm {\n  date_of_sap: string;\n  sap_id: string;\n}\n\nconst initialValues = {\n  date_of_sap: '',\n  sap_id: '',\n};\n\nconst PayOrderModal = ({onClose, open}: FundReleaseModalProps) => {\n  const {\n    formState: {errors},\n    control,\n    register,\n    handleSubmit,\n  } = useForm<FundReleaseModalForm>({defaultValues: initialValues});\n\n  const {\n    navigation: {navigate, location},\n    alert,\n  } = useAppContext();\n\n  const {loading, payPaymentOrder} = usePayPaymentOrder();\n  const receivableID = location.pathname.split('/').at(-1);\n\n  const onSubmit = async (data: any) => {\n    if (loading) return;\n\n    const payload = {\n      id: Number(receivableID),\n      date_of_sap: parseDateForBackend(data?.date_of_sap),\n      sap_id: data?.sap_id,\n    };\n\n    payPaymentOrder(\n      payload,\n      () => {\n        alert.success('Uspješno plaćanje naloga.');\n        navigate('/finance/liabilities-receivables/receivables');\n      },\n      () => alert.error('Neuspješno plaćanje naloga.'),\n    );\n\n    return;\n  };\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      title=\"PLAĆANJE NALOGA\"\n      leftButtonOnClick={onClose}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      rightButtonText=\"Platite nalog\"\n      leftButtonText=\"Otkaži\"\n      content={\n        <div>\n          <Input\n            {...register('sap_id', {required: 'Ovo polje je obavezno.'})}\n            label=\"SAP ID:\"\n            error={errors.sap_id?.message}\n            style={{marginBottom: 10}}\n            isRequired\n          />\n          <Controller\n            name=\"date_of_sap\"\n            rules={{required: 'Ovo polje je obavezno.'}}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM SAP:\"\n                onChange={onChange}\n                isRequired\n                error={errors.date_of_sap?.message}\n              />\n            )}\n          />\n        </div>\n      }\n    />\n  );\n};\n\nexport default PayOrderModal;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/willDipatchModal/willDispatchModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2905,2908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2905,2908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport {WillStatusType, willDispatchOptions} from '../../screens/deposit/fixedDeposit/wills/constants';\nimport useGetJudges from '../../services/graphQL/judges/useGetJudges';\nimport useInsertWillDispatch from '../../services/graphQL/wills/useInsertWillDispatch';\nimport {FormGroup} from '../../shared/form';\nimport {DropdownData} from '../../types/dropdownData';\nimport {WillDispatch} from '../../types/graphQL/wills';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport {optionsNumberSchema, optionsStringSchema} from '../../utils/formSchemas';\nimport FileList from '../fileList/fileList';\n\ntype WillDispatchModalProps = {\n  open: boolean;\n  onClose: () => void;\n  data: WillDispatch | null;\n  refetch: () => void;\n  willStatus: WillStatusType;\n};\n\nconst willDispatchSchema = yup.object({\n  judge_id: optionsNumberSchema.required(requiredError),\n  date_of_dispatch: yup.date().required(requiredError),\n  dispatch_type: optionsStringSchema,\n  case_number: yup.string().required(requiredError),\n  file_id: yup.number().nullable().default(null),\n  id: yup.number().nullable().default(null),\n});\n\ntype WillDispatchSchemaType = yup.InferType<typeof willDispatchSchema>;\n\nconst WillDispatchModal = ({open, onClose, data, refetch, willStatus}: WillDispatchModalProps) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const isNew = !data;\n\n  const {\n    navigation: {\n      location: {pathname},\n    },\n    fileService: {uploadFile},\n    alert,\n  } = useAppContext();\n\n  const will_id = pathname.split('/').pop();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    reset,\n    control,\n  } = useForm<WillDispatchSchemaType>({resolver: yupResolver(willDispatchSchema)});\n\n  const {insertWillDispatch} = useInsertWillDispatch();\n  const {judges} = useGetJudges({});\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: WillDispatchSchemaType) => {\n    const payload = {\n      ...data,\n      date_of_dispatch: parseDateForBackend(data.date_of_dispatch) as string,\n      dispatch_type: willStatus === 'Depozit' ? 'U radu' : 'Depozit',\n      will_id: parseInt(will_id),\n      judge_id: data.judge_id.id,\n      file_id: data.file_id ? data.file_id : null,\n      id: data.id ? data.id : null,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertWillDispatch(\n      payload,\n      () => {\n        alert.success(isNew ? 'Kretanje testamenta uspješno kreiran!' : 'Kretanje testamenta uspješno izmijenjen!');\n        refetch();\n        onClose();\n      },\n      () => {\n        alert.error(isNew ? 'Greška pri kreiranju kretanja testamenta!' : 'Greška pri izmjeni kretanja testamenta!');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data) {\n      reset({\n        id: data.id,\n        dispatch_type: willDispatchOptions.find((opt: DropdownData<string>) => opt.id === data.dispatch_type),\n        judge_id: data.judge,\n        date_of_dispatch: new Date(data.date_of_dispatch),\n        case_number: data.case_number,\n        file_id: data.file.id,\n      });\n    }\n  }, [data]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      title={isNew ? 'KREIRAJ KRETANJE TESTAMENTA' : 'UREDI KRETANJE TESTAMENTA'}\n      leftButtonOnClick={onClose}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      rightButtonText=\"Sačuvaj\"\n      leftButtonText=\"Otkaži\"\n      content={\n        <div>\n          {!isNew && (\n            <FormGroup style={{marginBottom: 15}}>\n              <Controller\n                control={control}\n                name=\"dispatch_type\"\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    label=\"TIP KRETANJA:\"\n                    options={willDispatchOptions}\n                    isDisabled={true}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n\n          <FormGroup>\n            <Controller\n              name=\"judge_id\"\n              control={control}\n              render={({field: {name, value, onChange}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  label=\"SUDIJA:\"\n                  options={judges}\n                  error={errors.judge_id?.message}\n                />\n              )}\n            />\n          </FormGroup>\n          <Controller\n            name=\"date_of_dispatch\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                onChange={onChange}\n                label=\"DATUM AKTA:\"\n                error={errors.date_of_dispatch?.message}\n                style={{marginBottom: 15}}\n              />\n            )}\n          />\n          <FormGroup style={{marginBottom: 15}}>\n            <Input {...register('case_number')} label=\"BROJ AKTA:\" error={errors.case_number?.message} />\n          </FormGroup>\n\n          <div style={{marginTop: 25}}>\n            <FileUpload\n              icon={null}\n              files={uploadedFiles}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n              buttonText=\"Učitaj\"\n            />\n            <FileList files={data?.file.id ? [data.file] : null} isInModal />\n          </div>\n        </div>\n      }\n    />\n  );\n};\n\nexport default WillDispatchModal;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/willForm/willForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2794,2797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2794,2797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, FileUpload, Input, Typography} from 'client-library';\nimport {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport useInsertWill from '../../services/graphQL/wills/useInsertWill';\nimport {FlexColumn, FlexRow} from '../../shared/flex';\nimport Footer from '../../shared/footer';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport FileList from '../fileList/fileList';\nimport {Will} from '../../types/graphQL/wills';\n\nconst willFormSchema = yup.object({\n  subject: yup.string().required(requiredError),\n  case_number_si: yup.string().required(requiredError),\n  case_number_rs: yup.string().required(requiredError),\n  date_of_receipt_si: yup.date().required(requiredError),\n  date_of_receipt_rs: yup.date().required(requiredError),\n  date_of_end: yup.date().nullable().default(null),\n  father_name: yup.string().required(requiredError),\n  date_of_birth: yup.date().required(requiredError),\n  jmbg: yup.string().required(requiredError),\n  description: yup.string().default(''),\n  file_id: yup.number().nullable().default(null),\n  id: yup.number().nullable().default(null),\n});\n\ntype WillFormSchemaType = yup.InferType<typeof willFormSchema>;\n\nconst WillForm = ({data}: {data?: Will}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n    fileService: {uploadFile},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n  const isNew = id === 'add-new';\n\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: {errors},\n    reset,\n  } = useForm<WillFormSchemaType>({\n    resolver: yupResolver(willFormSchema),\n  });\n\n  const {insertWill, loading: isSaving} = useInsertWill();\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: WillFormSchemaType) => {\n    const payload = {\n      ...data,\n      date_of_receipt_si: parseDateForBackend(data.date_of_receipt_si) as string,\n      date_of_receipt_rs: parseDateForBackend(data.date_of_receipt_rs) as string,\n      date_of_end: data.date_of_end ? parseDateForBackend(data.date_of_end) : null,\n      date_of_birth: parseDateForBackend(data.date_of_birth) as string,\n      file_id: data.file_id ? data.file_id : null,\n      id: data.id ? data.id : null,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertWill(\n      payload,\n      (id: number) => {\n        alert.success(isNew ? 'Uspešno ste dodali novi testament.' : 'Uspešno ste izmjenili testament.');\n        if (isNew) {\n          navigate(`/finance/deposit/fixed/wills/${id}`);\n        }\n      },\n      () => {\n        alert.error(isNew ? 'Greška prilikom dodavanja novog testamenta.' : 'Greška prilikom izmjene testamenta.');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data) {\n      reset({\n        file_id: data?.file.id,\n        subject: data?.subject,\n        date_of_birth: new Date(data?.date_of_birth),\n        date_of_receipt_si: new Date(data?.date_of_receipt_si),\n        date_of_receipt_rs: new Date(data?.date_of_receipt_rs),\n        date_of_end: data?.date_of_end ? new Date(data?.date_of_end) : null,\n        case_number_rs: data?.case_number_rs,\n        case_number_si: data?.case_number_si,\n        father_name: data?.father_name,\n        jmbg: data?.jmbg,\n        id: data?.id,\n      });\n    }\n  }, [data]);\n\n  console.log(errors);\n\n  const disabled = data?.status === 'Zakljucen';\n\n  return (\n    <FlexColumn gap={20} style={{alignItems: 'stretch'}}>\n      <FlexRow gap={8}>\n        <Input\n          {...register('case_number_si')}\n          label=\"BROJ PREDMETA (SI BROJ):\"\n          error={errors.case_number_si?.message}\n          disabled={disabled}\n        />\n        <Input\n          {...register('case_number_rs')}\n          label=\"BROJ PREDMETA (RS BROJ):\"\n          error={errors.case_number_rs?.message}\n          disabled={disabled}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"date_of_receipt_si\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PRIJEMA (SI BROJ):\"\n              onChange={onChange}\n              error={errors.date_of_receipt_si?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n        <Controller\n          name=\"date_of_receipt_rs\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PRIJEMA (SI BROJ):\"\n              onChange={onChange}\n              error={errors.date_of_receipt_rs?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Input\n          {...register('subject')}\n          label=\"IME I PREZIME TESTATORA:\"\n          error={errors.subject?.message}\n          disabled={disabled}\n        />\n        <Input {...register('father_name')} label=\"IME OCA:\" error={errors.father_name?.message} disabled={disabled} />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <div style={{width: '100%'}}>\n          <Controller\n            name=\"date_of_birth\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM ROĐENJA:\"\n                onChange={onChange}\n                error={errors.date_of_birth?.message}\n                disabled={disabled}\n              />\n            )}\n          />\n        </div>\n        <Input {...register('jmbg')} label=\"JMBG:\" error={errors.jmbg?.message} disabled={disabled} />\n      </FlexRow>\n      <div style={{width: '50%'}}>\n        <Controller\n          name=\"date_of_end\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM ZAKLJUČENJA:\"\n              onChange={onChange}\n              error={errors.date_of_end?.message}\n              disabled={isNew || disabled}\n            />\n          )}\n        />\n      </div>\n      <Input\n        {...register('description')}\n        textarea={true}\n        label=\"OPIS:\"\n        error={errors.description?.message}\n        disabled={disabled}\n      />\n\n      <div style={{marginBottom: 10}}>\n        <FileUpload\n          icon={null}\n          files={uploadedFiles}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n          disabled={disabled}\n        />\n        <FileList files={data?.file.id ? [data.file] : null} />\n      </div>\n\n      {!disabled && (\n        <Footer>\n          <Button\n            content=\"Odustani\"\n            variant=\"secondary\"\n            onClick={() => navigate('/finance/deposit/fixed/wills/overview')}\n          />\n          <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={isSaving} />\n        </Footer>\n      )}\n    </FlexColumn>\n  );\n};\n\nexport default WillForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/context/appContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/context/useAppContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/index.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":12,"column":3,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":12,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":18,"column":5,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":18,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":22,"column":3,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":22,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":25,"column":5,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":25,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/router.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/accounting/accounting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/accounting/accountingOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/accounting/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/accounting/currentAccountingTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/accounting/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetDetails/budgetDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetFO/budgetFO.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetFO/budgetOverviewFO/budgetOverviewFO.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetFO/budgetRequestsFO/budgetRequestsFO.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetFO/budgetRequestsFO/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetFO/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetNonFinancialOverview/budgetNonFinancialOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[441,444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[441,444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Input} from 'client-library';\nimport {Controller, useForm} from 'react-hook-form';\nimport {NonFinanceAccordion} from '../../../components/nonFinanceAccordion/nonFinanceAccordion.tsx';\nimport {budgetStatusModal} from '../planning/budgetList/constants.tsx';\nimport {ButtonsContainer, StatusUpdateContainer, StyledDropdown} from './styles.ts';\n\nconst initialValues = {\n  status: null,\n  comment: '',\n};\n\nconst onSubmit = (data: any) => {\n  // TODO add sumbit api call\n  console.log(data);\n};\n\nconst BudgetNonFinancialOverview = () => {\n  const {control, register, handleSubmit} = useForm({defaultValues: initialValues});\n  return (\n    <div>\n      <NonFinanceAccordion programNo={1} key={`acc-${1}`} isPreview />\n      <StatusUpdateContainer>\n        {/*TODO check if options should be budgetStatusModal or something else*/}\n        <Controller\n          name=\"status\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <StyledDropdown value={value} name={name} options={budgetStatusModal} onChange={onChange} />\n          )}\n        />\n        <Input {...register('comment')} textarea placeholder={'Dodaj komentar'} />\n      </StatusUpdateContainer>\n      <ButtonsContainer>\n        <Button content=\"Nazad\" variant=\"secondary\" />\n        <Button content=\"Izmijeni status\" variant=\"primary\" type={'submit'} onClick={handleSubmit(onSubmit)} />\n      </ButtonsContainer>\n    </div>\n  );\n};\n\nexport default BudgetNonFinancialOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetNonFinancialOverview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetSendDetails/budgetSendPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetSendDetails/budgetSendTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetSendDetails/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetSendDetails/requests.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[555,558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[555,558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, Table} from 'client-library';\nimport {useState} from 'react';\nimport useGetOrganizationUnits from '../../../services/graphQL/organizationUnits/useGetOrganizationUnits';\nimport {tableHeadsRequests} from './constants';\nimport {Column, DropdownWrapperRequests, Price, SubTitle, Totals} from './styles';\n\nexport const RequestsPage = () => {\n  const [organizationUnit, setOrganizationUnit] = useState({id: 0, title: 'Sve'});\n  const {organizationUnits} = useGetOrganizationUnits();\n\n  const handleOrganizationUnitChange = (value: any) => {\n    setOrganizationUnit(value);\n  };\n\n  return (\n    <div>\n      <DropdownWrapperRequests>\n        <Dropdown\n          name=\"organization_unit\"\n          options={organizationUnits}\n          value={organizationUnit}\n          onChange={handleOrganizationUnitChange}\n          label=\"ORGANIZACIONA JEDINICA:\"\n        />\n      </DropdownWrapperRequests>\n      <Table data={[]} tableHeads={tableHeadsRequests} />\n      <Totals>\n        <Column>\n          <SubTitle variant=\"bodySmall\" content=\"UKUPNA NETO VRIJEDNOST:\" />\n          <Price variant=\"bodySmall\" content={'€ '} />\n        </Column>\n        <Column>\n          <SubTitle variant=\"bodySmall\" content=\"UKUPNA BRUTO VRIJEDNOST:\" />\n          <Price variant=\"bodySmall\" content={'€ '} />\n        </Column>\n      </Totals>\n      <Column>\n        <Datepicker\n          name=\"date_of_closing\"\n          onChange={() => {\n            console.log('');\n          }}\n          disabled\n        />\n      </Column>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetSendDetails/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetTemplate/budgetTemplate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetTemplate/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/currentBudget/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/currentBudget/currentBudgetPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/currentBudget/currentBudgetTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/currentBudget/requests.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[555,558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[555,558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, Table} from 'client-library';\nimport {useState} from 'react';\nimport useGetOrganizationUnits from '../../../services/graphQL/organizationUnits/useGetOrganizationUnits';\nimport {tableHeadsRequests} from './constants';\nimport {Column, DropdownWrapperRequests, Price, SubTitle, Totals} from './styles';\n\nexport const RequestsPage = () => {\n  const [organizationUnit, setOrganizationUnit] = useState({id: 0, title: 'Sve'});\n  const {organizationUnits} = useGetOrganizationUnits();\n\n  const handleOrganizationUnitChange = (value: any) => {\n    setOrganizationUnit(value);\n  };\n\n  return (\n    <div>\n      <DropdownWrapperRequests>\n        <Dropdown\n          name=\"organization_unit\"\n          options={organizationUnits}\n          value={organizationUnit}\n          onChange={handleOrganizationUnitChange}\n          label=\"ORGANIZACIONA JEDINICA:\"\n        />\n      </DropdownWrapperRequests>\n      <Table data={[]} tableHeads={tableHeadsRequests} />\n      <Totals>\n        <Column>\n          <SubTitle variant=\"bodySmall\" content=\"UKUPNA NETO VRIJEDNOST:\" />\n          <Price variant=\"bodySmall\" content={'€ '} />\n        </Column>\n        <Column>\n          <SubTitle variant=\"bodySmall\" content=\"UKUPNA BRUTO VRIJEDNOST:\" />\n          <Price variant=\"bodySmall\" content={'€ '} />\n        </Column>\n      </Totals>\n      <Column>\n        <Datepicker\n          name=\"date_of_closing\"\n          onChange={() => {\n            console.log('');\n          }}\n          disabled\n        />\n      </Column>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/currentBudget/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/externalReallocation/externalReallocationOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/externalReallocation/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/fundRelease/fundReleaseOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/fundRelease/fundReleaseRequest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/fundRelease/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/internalReallocation/internalReallocationBudgetTemplate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/internalReallocation/internalReallocationOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/internalReallocation/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/landingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinance/nonFinance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinance/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinancePreview/nonFinancePreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinancePreview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinancialOverview/nonFinancialOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinancialOverview/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/OUBudgetSubmission.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/budgetFinancial/budgetFinancial.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/budgetNonFinancial/budgetNonFinancial.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/budgetSubmissionTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/budgetSummary.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[285,288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[285,288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":11,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Table} from 'client-library';\nimport useAppContext from '../../../../context/useAppContext';\nimport {FooterWrapper} from '../budgetList/styles';\nimport {budgetSummaryTableHeads} from './constants';\n\nexport interface BudgetSummaryProps {\n  id?: number;\n  budgetDetails: any;\n}\n\nconst BudgetSummary = (_: BudgetSummaryProps) => {\n  const {navigation, breadcrumbs} = useAppContext();\n\n  return (\n    <>\n      <Table tableHeads={budgetSummaryTableHeads} data={[]} style={{marginBottom: 22}} />\n      <FooterWrapper>\n        <Button\n          content=\"Nazad\"\n          variant=\"secondary\"\n          onClick={() => {\n            navigation.navigate('/finance/budget/planning');\n            breadcrumbs.remove();\n          }}\n        />\n        <Button content=\"Pošalji\" variant=\"primary\" disabled onClick={() => console.log('send')} />\n      </FooterWrapper>\n    </>\n  );\n};\n\nexport default BudgetSummary;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/SSSBudgetDetails/SSSBudgetDetails.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/SSSBudgetDetails/SSSBudgetDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":108,"column":31,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":108,"endColumn":118}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Dropdown, Typography} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport BudgetLimitModal from '../../../../components/budgetLimitModal/budgetLimitModal.tsx';\nimport {UserRole} from '../../../../constants.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useGetBudgets from '../../../../services/graphQL/getBudgets/useGetBudgets.ts';\nimport useInsertBudget from '../../../../services/graphQL/insertBudget/useInsertBudget.ts';\nimport BudgetTable from '../../../../shared/budgetTable/budgetTable.tsx';\nimport {BudgetTableStep} from '../../../../shared/budgetTable/types.ts';\nimport {FlexRow} from '../../../../shared/flex.ts';\nimport Footer from '../../../../shared/footer.ts';\nimport {optionsNumberSchema, optionsStringSchema} from '../../../../utils/formSchemas.ts';\nimport {getYearOptions} from '../../../../utils/getYearOptions.ts';\nimport {budgetTypeOptions} from '../budgetList/constants.tsx';\nimport {MainTitle, OverviewBox, ScreenWrapper} from '../budgetList/styles.ts';\nimport {BoldText, Box, Controls, TableGrid} from './SSSBudgetDetails.styles.ts';\n\nexport type LimitObject = {\n  organization_unit_id: number;\n  limit: number;\n};\n\nconst addBudgetSchema = yup.object().shape({\n  year: optionsStringSchema.required('Ovo polje je obavezno').default(null),\n  budget_type: optionsNumberSchema.required('Ovo polje je obavezno').default(null),\n  limits: yup\n    .array()\n    .of(\n      yup.object().shape({\n        limit: yup.number().required(),\n        organization_unit_id: yup.number().required(),\n      }),\n    )\n    .required()\n    .default(null),\n});\n\nexport type AddBudgetFormType = yup.InferType<typeof addBudgetSchema>;\n\nconst SSSBudgetDetails = () => {\n  const [limitModal, setLimitModal] = useState(false);\n\n  const {\n    navigation: {\n      location: {pathname},\n      navigate,\n    },\n    contextMain,\n    alert,\n  } = useAppContext();\n\n  const {\n    control,\n    formState: {errors},\n    handleSubmit,\n    watch,\n    setValue,\n  } = useForm<AddBudgetFormType>({resolver: yupResolver(addBudgetSchema), mode: 'onBlur'});\n\n  const budgetID = pathname.split('/').at(-1);\n  const isNew = budgetID === 'add-new';\n\n  const {insertBudget, loading: isSaving} = useInsertBudget();\n  const {budgets} = useGetBudgets({id: isNew ? null : parseInt(budgetID)});\n\n  //todo check if the same api endpoint is used when the OJ manager is filling the budget\n  const onSubmit = async (data: AddBudgetFormType) => {\n    if (isSaving) return;\n\n    const payload = {\n      id: isNew ? null : parseInt(budgetID),\n      year: data.year.id.toString(),\n      budget_type: data.budget_type.id,\n      limits: data.limits,\n    };\n\n    await insertBudget(\n      payload,\n      () => {\n        alert.success('Uspješno sačuvano.');\n        navigate('/finance/budget/planning');\n      },\n      () => alert?.error('Greška. Promjene nisu sačuvane.'),\n    );\n  };\n\n  const onLimitModalSubmit = (data: LimitObject[]) => {\n    setValue('limits', data, {shouldValidate: true});\n  };\n\n  const availableYearsForBudget = useMemo(() => {\n    if (!budgets) return [];\n\n    const years = getYearOptions(6, false, 5);\n\n    const existingBudgetYears = budgets.items?.map(budget => budget.year) || [];\n    const filteredYears = years.filter(year => !existingBudgetYears.includes(Number(year.id)));\n\n    return filteredYears;\n  }, [budgets]);\n\n  useEffect(() => {\n    if (budgets && budgets.items && budgets.items.length > 0 && !isNew) {\n      setValue('year', {id: budgets.items[0].year.toString(), title: budgets.items[0].year.toString()});\n      setValue('budget_type', budgetTypeOptions.find(option => option.id === parseInt(budgets.items[0].budget_type))!);\n      setValue('limits', budgets.items[0].limits);\n    }\n  }, [budgets, isNew]);\n\n  const year = watch('year')?.id;\n  console.log(errors);\n  return (\n    <ScreenWrapper>\n      <OverviewBox>\n        <MainTitle variant=\"bodyMedium\" content={isNew ? 'NOVI BUDŽET' : `BUDŽET ZA ${year} GODINU`} />\n        <hr />\n        <Box>\n          <Controls>\n            <TableGrid>\n              <BoldText variant=\"bodySmall\" content=\"NAZIV PREDLAGAČA:\" />\n              <Typography variant=\"bodySmall\" content={contextMain.organization_unit.title} />\n            </TableGrid>\n            <Button content=\"Limiti\" variant=\"secondary\" style={{width: 130}} onClick={() => setLimitModal(true)} />\n          </Controls>\n\n          <FlexRow gap=\"1rem\" style={{marginTop: '1rem'}}>\n            <Controller\n              control={control}\n              name=\"year\"\n              render={({field: {name, onChange, value}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  options={availableYearsForBudget}\n                  error={errors.year?.message}\n                  placeholder=\"Odaberite godinu\"\n                  isDisabled={!isNew}\n                />\n              )}\n            />\n            <Controller\n              control={control}\n              name=\"budget_type\"\n              render={({field: {name, onChange, value}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  options={budgetTypeOptions}\n                  error={errors.budget_type?.message}\n                  placeholder=\"Odaberite tip\"\n                  isDisabled={!isNew}\n                />\n              )}\n            />\n          </FlexRow>\n        </Box>\n\n        {contextMain.role_id === UserRole.MANAGER_OJ && (\n          <Box>\n            <TableGrid>\n              <BoldText variant=\"bodySmall\" content=\"PROGRAM:\" />\n              <Typography variant=\"bodySmall\" content=\"SUDSKI SAVJET\" />\n              <BoldText variant=\"bodySmall\" content=\"POTPROGRAM:\" />\n              <Typography variant=\"bodySmall\" content=\"SUDSKI SAVJET\" />\n              <BoldText variant=\"bodySmall\" content=\"AKTIVNOSTI:\" />\n              <Typography variant=\"bodySmall\" content=\"SUDSKI SAVJET\" />\n              <BoldText variant=\"bodySmall\" content=\"IZVOR:\" />\n              <Typography variant=\"bodySmall\" content=\"SUDSKI SAVJET\" />\n            </TableGrid>\n          </Box>\n        )}\n\n        {year && <BudgetTable step={BudgetTableStep.CREATING} year={parseInt(year)} organizationUnitId={1} />}\n\n        <Footer>\n          <Button\n            content=\"Otkaži\"\n            variant=\"secondary\"\n            style={{width: 130}}\n            onClick={() => navigate('/finance/budget/planning')}\n          />\n          <Button\n            content=\"Sačuvaj\"\n            variant=\"primary\"\n            style={{width: 130}}\n            onClick={handleSubmit(onSubmit)}\n            // disabled={!isValid && isNew}\n          />\n        </Footer>\n      </OverviewBox>\n\n      <BudgetLimitModal open={limitModal} onClose={() => setLimitModal(false)} onSubmit={onLimitModalSubmit} />\n    </ScreenWrapper>\n  );\n};\n\nexport default SSSBudgetDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/budgetList/budgetList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/budgetList/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/budgetList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/requestDynamics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/spendingDynamicsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/spendingDynamicsRequests.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/spendingDynamicsTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/financeDeposit/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/financeDeposit/financeDepositDetails.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":109,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":109,"endColumn":19,"fix":{"range":[4247,4265],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":110,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":110,"endColumn":21,"fix":{"range":[4267,4287],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":111,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":111,"endColumn":21,"fix":{"range":[4301,4321],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":112,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":112,"endColumn":23,"fix":{"range":[4339,4361],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":113,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":113,"endColumn":23,"fix":{"range":[4383,4405],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":114,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":114,"endColumn":21,"fix":{"range":[4433,4453],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":115,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":115,"endColumn":21,"fix":{"range":[4456,4476],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":116,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":116,"endColumn":19,"fix":{"range":[4529,4547],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":117,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":117,"endColumn":19,"fix":{"range":[4550,4568],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":118,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":118,"endColumn":21,"fix":{"range":[4570,4590],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":119,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":119,"endColumn":21,"fix":{"range":[4606,4626],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":120,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":120,"endColumn":21,"fix":{"range":[4667,4687],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":121,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":121,"endColumn":19,"fix":{"range":[4741,4759],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":122,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":122,"endColumn":17,"fix":{"range":[4762,4778],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":160,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":160,"endColumn":19,"fix":{"range":[6004,6022],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":161,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":161,"endColumn":21,"fix":{"range":[6024,6044],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":162,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":162,"endColumn":21,"fix":{"range":[6058,6078],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":163,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":163,"endColumn":23,"fix":{"range":[6096,6118],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":164,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":164,"endColumn":23,"fix":{"range":[6144,6166],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":165,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":165,"endColumn":21,"fix":{"range":[6190,6210],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":166,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":166,"endColumn":21,"fix":{"range":[6213,6233],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":167,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":167,"endColumn":19,"fix":{"range":[6286,6304],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":168,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":168,"endColumn":19,"fix":{"range":[6307,6325],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":169,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":169,"endColumn":21,"fix":{"range":[6327,6347],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":170,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":170,"endColumn":21,"fix":{"range":[6363,6383],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":171,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":171,"endColumn":21,"fix":{"range":[6428,6448],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":172,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":172,"endColumn":19,"fix":{"range":[6502,6520],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":173,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":173,"endColumn":17,"fix":{"range":[6523,6539],"text":"              "}}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":28,"fixableWarningCount":0,"source":"import {Divider} from '@oykos-development/devkit-react-ts-styled-components';\nimport {EditIcon, Table, Theme, TrashIcon, Typography} from 'client-library';\nimport {useState} from 'react';\nimport DepositConfiscationModal from '../../../../components/depositConfiscationModal/depositConfiscationModal.tsx';\nimport DepositDispatchModal from '../../../../components/depositDispatchModal/depositDispatchModal.tsx';\nimport FinancialDepositForm from '../../../../components/financeDepositForm.tsx/financialDepositForm.tsx';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useDeleteDepositDispatch from '../../../../services/graphQL/fixedDeposits/useDeleteDepositDispatch.ts';\nimport useDeleteFixedDepositItem from '../../../../services/graphQL/fixedDeposits/useDeleteFixedDepositItem.ts';\nimport useGetFixedDeposits from '../../../../services/graphQL/fixedDeposits/useGetFixedDeposits.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport PlusButton from '../../../../shared/plusButton.tsx';\nimport ScreenWrapper from '../../../../shared/screenWrapper/screenWrapper.tsx';\nimport {TableTitle} from '../../../../shared/tableTitle.tsx';\nimport {DepositConfiscation, DepositDispatch} from '../../../../types/graphQL/fixedDeposits.ts';\nimport {PlusButtonWrapper} from '../../styles.ts';\nimport {fixedDepositDispatchTableHeads, fixedFinancialDepositItemTableHeads} from './constants.tsx';\nimport SectionBox from '../../../../shared/sectionBox.ts';\nimport {MainTitle} from '../../../../shared/pageElements.ts';\n\nconst FinanceDepositDetails = () => {\n  const [confiscationModal, setConfiscationModal] = useState(false);\n  const [deleteItemId, setDeleteItemId] = useState<number | null>(null);\n  const [itemEditData, setItemEditData] = useState<DepositConfiscation | null>(null);\n\n  const [dispatchModal, setDispatchModal] = useState(false);\n  const [deleteDispatchId, setDeleteDispatchId] = useState<number | null>(null);\n  const [dispatchEditData, setDispatchEditData] = useState<DepositDispatch | null>(null);\n\n  const {\n    navigation: {\n      location: {pathname},\n    },\n    contextMain: {organization_unit_id},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n\n  const {\n    data: currentDeposit,\n    refetch,\n    loading,\n  } = useGetFixedDeposits({\n    id: id ? parseInt(id) : null,\n    organization_unit_id,\n    type: 'financial',\n  });\n\n  const {deleteFixedDepositItem} = useDeleteFixedDepositItem();\n  const {deleteDepositDispatch} = useDeleteDepositDispatch();\n\n  const handleDeleteItem = async () => {\n    if (!deleteItemId) return;\n\n    await deleteFixedDepositItem(\n      deleteItemId,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisan depozit.');\n      },\n      () => alert.error('Greška. Brisanje depozita nije uspjelo.'),\n    );\n\n    setDeleteItemId(null);\n  };\n\n  const handleDeleteDispatch = async () => {\n    if (!deleteDispatchId) return;\n\n    await deleteDepositDispatch(\n      deleteDispatchId,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisan povrat.');\n      },\n      () => alert.error('Greška. Brisanje povrata nije uspjelo.'),\n    );\n\n    setDeleteDispatchId(null);\n  };\n\n  const disabled = currentDeposit?.items[0]?.status === 'Zakljucen';\n\n  return (\n    <ScreenWrapper>\n      <SectionBox>\n        <MainTitle content={`STALNI FINANSKIJSKI DEPOZIT - ${currentDeposit?.items[0]?.case_number}`} />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" style={{marginBottom: 20}} />\n        <FinancialDepositForm data={currentDeposit?.items[0]} />\n      </SectionBox>\n\n      <SectionBox>\n        {/* FIRST TABLE - CONFISCATIONS */}\n        <TableTitle>\n          <Typography variant=\"bodyLarge\" content=\"Dodavanje depozita\" style={{fontWeight: 'bold'}} />\n          <PlusButtonWrapper>\n            <PlusButton onClick={() => setConfiscationModal(true)} disabled={disabled} />\n          </PlusButtonWrapper>\n        </TableTitle>\n        <Table\n          tableHeads={fixedFinancialDepositItemTableHeads}\n          data={currentDeposit?.items[0]?.items || []}\n          isLoading={loading}\n          tableActions={\n            disabled\n              ? undefined\n              : [\n                  {\n                    name: 'edit',\n                    onClick: row => {\n                      setItemEditData(row);\n                      setConfiscationModal(true);\n                    },\n                    icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                  {\n                    name: 'delete',\n                    onClick: row => setDeleteItemId(row.id),\n                    icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                ]\n          }\n          style={{marginBottom: 22}}\n        />\n        {confiscationModal && (\n          <DepositConfiscationModal\n            data={itemEditData}\n            open={confiscationModal}\n            onClose={() => setConfiscationModal(false)}\n            refetch={refetch}\n          />\n        )}\n        {deleteItemId && (\n          <ConfirmationModal\n            open={true}\n            onClose={() => setDeleteItemId(null)}\n            onConfirm={handleDeleteItem}\n            subTitle=\"Da li ste sigurni da želite da izbrišete ovaj depozit?\"\n          />\n        )}\n      </SectionBox>\n\n      <SectionBox>\n        {/* SECOND TABLE - RETURNS (DISPATCHES IN BACKEND) */}\n        <TableTitle>\n          <Typography variant=\"bodyLarge\" content=\"Vraćanje depozita\" style={{fontWeight: 'bold'}} />\n          <PlusButtonWrapper>\n            <PlusButton onClick={() => setDispatchModal(true)} disabled={disabled} />\n          </PlusButtonWrapper>\n        </TableTitle>\n        <Table\n          tableHeads={fixedDepositDispatchTableHeads}\n          data={currentDeposit?.items[0]?.dispatches || []}\n          isLoading={loading}\n          tableActions={\n            disabled\n              ? undefined\n              : [\n                  {\n                    name: 'edit',\n                    onClick: row => {\n                      setDispatchEditData(row);\n                      setDispatchModal(true);\n                    },\n                    icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                  {\n                    name: 'delete',\n                    onClick: row => setDeleteDispatchId(row.id),\n                    icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                ]\n          }\n          style={{marginBottom: 22}}\n        />\n        {dispatchModal && (\n          <DepositDispatchModal\n            data={dispatchEditData}\n            open={true}\n            onClose={() => setDispatchModal(false)}\n            refetch={refetch}\n          />\n        )}\n        {deleteDispatchId && (\n          <ConfirmationModal\n            open={true}\n            onClose={() => setDeleteDispatchId(null)}\n            onConfirm={handleDeleteDispatch}\n            subTitle=\"Da li ste sigurni da želite da izbrišete ovaj povrat?\"\n          />\n        )}\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default FinanceDepositDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/financeDeposit/financialDepositNewEntry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/fixedDepositOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/fixedDepositTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/materialDeposit/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/materialDeposit/materialDepositDetails.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":109,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":109,"endColumn":19,"fix":{"range":[4224,4242],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":110,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":110,"endColumn":21,"fix":{"range":[4244,4264],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":111,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":111,"endColumn":21,"fix":{"range":[4278,4298],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":112,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":112,"endColumn":23,"fix":{"range":[4316,4338],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":113,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":113,"endColumn":23,"fix":{"range":[4360,4382],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":114,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":114,"endColumn":21,"fix":{"range":[4410,4430],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":115,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":115,"endColumn":21,"fix":{"range":[4433,4453],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":116,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":116,"endColumn":19,"fix":{"range":[4506,4524],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":117,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":117,"endColumn":19,"fix":{"range":[4527,4545],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":118,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":118,"endColumn":21,"fix":{"range":[4547,4567],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":119,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":119,"endColumn":21,"fix":{"range":[4583,4603],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":120,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":120,"endColumn":21,"fix":{"range":[4644,4664],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":121,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":121,"endColumn":19,"fix":{"range":[4718,4736],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":122,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":122,"endColumn":17,"fix":{"range":[4739,4755],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":160,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":160,"endColumn":19,"fix":{"range":[5977,5995],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":161,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":161,"endColumn":21,"fix":{"range":[5997,6017],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":162,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":162,"endColumn":21,"fix":{"range":[6031,6051],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":163,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":163,"endColumn":23,"fix":{"range":[6069,6091],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":164,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":164,"endColumn":23,"fix":{"range":[6117,6139],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":165,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":165,"endColumn":21,"fix":{"range":[6163,6183],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":166,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":166,"endColumn":21,"fix":{"range":[6186,6206],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":167,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":167,"endColumn":19,"fix":{"range":[6259,6277],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":168,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":168,"endColumn":19,"fix":{"range":[6280,6298],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":169,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":169,"endColumn":21,"fix":{"range":[6300,6320],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":170,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":170,"endColumn":21,"fix":{"range":[6336,6356],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":171,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":171,"endColumn":21,"fix":{"range":[6401,6421],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":172,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":172,"endColumn":19,"fix":{"range":[6475,6493],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":173,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":173,"endColumn":17,"fix":{"range":[6496,6512],"text":"              "}}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":28,"fixableWarningCount":0,"source":"import {Divider} from '@oykos-development/devkit-react-ts-styled-components';\nimport {EditIcon, Table, Theme, TrashIcon, Typography} from 'client-library';\nimport {useState} from 'react';\nimport DepositConfiscationModal from '../../../../components/depositConfiscationModal/depositConfiscationModal.tsx';\nimport DepositDispatchModal from '../../../../components/depositDispatchModal/depositDispatchModal.tsx';\nimport MaterialDepositForm from '../../../../components/materialDepositForm/materialDepositForm.tsx';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useDeleteDepositDispatch from '../../../../services/graphQL/fixedDeposits/useDeleteDepositDispatch.ts';\nimport useDeleteFixedDepositItem from '../../../../services/graphQL/fixedDeposits/useDeleteFixedDepositItem.ts';\nimport useGetFixedDeposits from '../../../../services/graphQL/fixedDeposits/useGetFixedDeposits.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport PlusButton from '../../../../shared/plusButton.tsx';\nimport ScreenWrapper from '../../../../shared/screenWrapper/screenWrapper.tsx';\nimport {TableTitle} from '../../../../shared/tableTitle.tsx';\nimport {DepositConfiscation, DepositDispatch} from '../../../../types/graphQL/fixedDeposits.ts';\nimport {PlusButtonWrapper} from '../../styles.ts';\nimport {materialDepositItemTableHeads, materialDispatchTableHeads} from './constants.tsx';\nimport SectionBox from '../../../../shared/sectionBox.ts';\nimport {MainTitle} from '../../../../shared/pageElements.ts';\n\nconst MaterialDepositDetails = () => {\n  const [confiscationModal, setConfiscationModal] = useState(false);\n  const [deleteItemId, setDeleteItemId] = useState<number | null>(null);\n  const [itemEditData, setItemEditData] = useState<DepositConfiscation | null>(null);\n\n  const [dispatchModal, setDispatchModal] = useState(false);\n  const [deleteDispatchId, setDeleteDispatchId] = useState<number | null>(null);\n  const [dispatchEditData, setDispatchEditData] = useState<DepositDispatch | null>(null);\n\n  const {\n    navigation: {\n      location: {pathname},\n    },\n    contextMain: {organization_unit_id},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n\n  const {\n    data: currentDeposit,\n    refetch,\n    loading,\n  } = useGetFixedDeposits({\n    id: id ? parseInt(id) : null,\n    organization_unit_id,\n    type: 'material',\n  });\n\n  const {deleteFixedDepositItem} = useDeleteFixedDepositItem();\n  const {deleteDepositDispatch} = useDeleteDepositDispatch();\n\n  const handleDeleteItem = async () => {\n    if (!deleteItemId) return;\n\n    await deleteFixedDepositItem(\n      deleteItemId,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisan depozit.');\n      },\n      () => alert.error('Greška. Brisanje depozita nije uspjelo.'),\n    );\n\n    setDeleteItemId(null);\n  };\n\n  const handleDeleteDispatch = async () => {\n    if (!deleteDispatchId) return;\n\n    await deleteDepositDispatch(\n      deleteDispatchId,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisan povrat.');\n      },\n      () => alert.error('Greška. Brisanje povrata nije uspjelo.'),\n    );\n\n    setDeleteDispatchId(null);\n  };\n\n  const disabled = currentDeposit?.items[0]?.status === 'Zakljucen';\n\n  return (\n    <ScreenWrapper>\n      <SectionBox>\n        <MainTitle content={`STALNI MATERIJALNI DEPOZIT - ${currentDeposit?.items[0]?.case_number}`} />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" style={{marginBottom: 20}} />\n        <MaterialDepositForm data={currentDeposit?.items[0]} />\n      </SectionBox>\n\n      <SectionBox>\n        {/* FIRST TABLE - CONFISCATIONS */}\n        <TableTitle>\n          <Typography variant=\"bodyLarge\" content=\"Dodavanje depozita\" style={{fontWeight: 'bold'}} />\n          <PlusButtonWrapper>\n            <PlusButton onClick={() => setConfiscationModal(true)} disabled={disabled} />\n          </PlusButtonWrapper>\n        </TableTitle>\n        <Table\n          tableHeads={materialDepositItemTableHeads}\n          data={currentDeposit?.items[0]?.items || []}\n          isLoading={loading}\n          tableActions={\n            disabled\n              ? undefined\n              : [\n                  {\n                    name: 'edit',\n                    onClick: row => {\n                      setItemEditData(row);\n                      setConfiscationModal(true);\n                    },\n                    icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                  {\n                    name: 'delete',\n                    onClick: row => setDeleteItemId(row.id),\n                    icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                ]\n          }\n          style={{marginBottom: 22}}\n        />\n        {confiscationModal && (\n          <DepositConfiscationModal\n            data={itemEditData}\n            open={confiscationModal}\n            onClose={() => setConfiscationModal(false)}\n            refetch={refetch}\n          />\n        )}\n        {deleteItemId && (\n          <ConfirmationModal\n            open={true}\n            onClose={() => setDeleteItemId(null)}\n            onConfirm={handleDeleteItem}\n            subTitle=\"Da li ste sigurni da želite da izbrišete ovaj depozit?\"\n          />\n        )}\n      </SectionBox>\n\n      <SectionBox>\n        {/* SECOND TABLE - RETURNS (DISPATCHES IN BACKEND) */}\n        <TableTitle>\n          <Typography variant=\"bodyLarge\" content=\"Vraćanje depozita\" style={{fontWeight: 'bold'}} />\n          <PlusButtonWrapper>\n            <PlusButton onClick={() => setDispatchModal(true)} disabled={disabled} />\n          </PlusButtonWrapper>\n        </TableTitle>\n        <Table\n          tableHeads={materialDispatchTableHeads}\n          data={currentDeposit?.items[0]?.dispatches || []}\n          isLoading={loading}\n          tableActions={\n            disabled\n              ? undefined\n              : [\n                  {\n                    name: 'edit',\n                    onClick: row => {\n                      setDispatchEditData(row);\n                      setDispatchModal(true);\n                    },\n                    icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                  {\n                    name: 'delete',\n                    onClick: row => setDeleteDispatchId(row.id),\n                    icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                ]\n          }\n          style={{marginBottom: 22}}\n        />\n        {dispatchModal && (\n          <DepositDispatchModal\n            data={dispatchEditData}\n            open={true}\n            onClose={() => setDispatchModal(false)}\n            refetch={refetch}\n          />\n        )}\n        {deleteDispatchId && (\n          <ConfirmationModal\n            open={true}\n            onClose={() => setDeleteDispatchId(null)}\n            onConfirm={handleDeleteDispatch}\n            subTitle=\"Da li ste sigurni da želite da izbrišete ovaj povrat?\"\n          />\n        )}\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default MaterialDepositDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/materialDeposit/materialDepositNewEntry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/wills/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/wills/willDetails.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":85,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":85,"endColumn":19,"fix":{"range":[3105,3123],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":86,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":86,"endColumn":21,"fix":{"range":[3125,3145],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":87,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":87,"endColumn":21,"fix":{"range":[3159,3179],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":88,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":88,"endColumn":23,"fix":{"range":[3197,3219],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":89,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":89,"endColumn":23,"fix":{"range":[3245,3267],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":90,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":90,"endColumn":21,"fix":{"range":[3291,3311],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":91,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":91,"endColumn":21,"fix":{"range":[3314,3334],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":92,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":92,"endColumn":19,"fix":{"range":[3387,3405],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":93,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":93,"endColumn":19,"fix":{"range":[3408,3426],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":94,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":94,"endColumn":21,"fix":{"range":[3428,3448],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":95,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":95,"endColumn":21,"fix":{"range":[3464,3484],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":96,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":96,"endColumn":21,"fix":{"range":[3529,3549],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":97,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":97,"endColumn":19,"fix":{"range":[3603,3621],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":98,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":98,"endColumn":17,"fix":{"range":[3624,3640],"text":"              "}}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":14,"fixableWarningCount":0,"source":"import {Divider} from '@oykos-development/devkit-react-ts-styled-components';\nimport {EditIcon, Table, Theme, TrashIcon, Typography} from 'client-library';\nimport {useState} from 'react';\nimport WillDispatchModal from '../../../../components/willDipatchModal/willDispatchModal.tsx';\nimport WillForm from '../../../../components/willForm/willForm.tsx';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useDeleteWillDispatch from '../../../../services/graphQL/wills/useDeleteWillDispatch.ts';\nimport useGetWills from '../../../../services/graphQL/wills/useGetWills.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport {MainTitle} from '../../../../shared/pageElements.ts';\nimport PlusButton from '../../../../shared/plusButton.tsx';\nimport ScreenWrapper from '../../../../shared/screenWrapper/screenWrapper.tsx';\nimport SectionBox from '../../../../shared/sectionBox.ts';\nimport {TableTitle} from '../../../../shared/tableTitle.tsx';\nimport {WillDispatch} from '../../../../types/graphQL/wills.ts';\nimport {PlusButtonWrapper} from '../../styles.ts';\nimport {willDispatchTableHeads} from './constants.tsx';\n\nconst WillDetails = () => {\n  const [dispatchModal, setDispatchModal] = useState(false);\n  const [deleteDispatchId, setDeleteDispatchId] = useState<number | null>(null);\n  const [dispatchEditData, setDispatchEditData] = useState<WillDispatch | null>(null);\n\n  const {\n    navigation: {\n      location: {pathname},\n    },\n    contextMain: {organization_unit_id},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n\n  const {\n    data: currentWill,\n    refetch,\n    loading,\n  } = useGetWills({\n    id: id ? parseInt(id) : null,\n    organization_unit_id,\n  });\n\n  const {deleteWillDispatch} = useDeleteWillDispatch();\n\n  const handleDeleteDispatch = async () => {\n    if (!deleteDispatchId) return;\n\n    await deleteWillDispatch(\n      deleteDispatchId,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisan povrat testamenta.');\n      },\n      () => alert.error('Greška. Brisanje povrata nije uspjelo.'),\n    );\n\n    setDeleteDispatchId(null);\n  };\n\n  const disabled = currentWill[0]?.status === 'Zakljucen';\n\n  return (\n    <ScreenWrapper showBreadcrumbs={true}>\n      <SectionBox>\n        <MainTitle content={`STALNI FINANSKIJSKI DEPOZIT - ${currentWill[0]?.case_number_si}`} />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" style={{marginBottom: 20}} />\n        <WillForm data={currentWill[0]} />\n      </SectionBox>\n\n      <SectionBox>\n        <TableTitle>\n          <Typography variant=\"bodyLarge\" content=\"Kretanje testamenta\" style={{fontWeight: 'bold'}} />\n          <PlusButtonWrapper>\n            <PlusButton onClick={() => setDispatchModal(true)} disabled={disabled} />\n          </PlusButtonWrapper>\n        </TableTitle>\n        <Table\n          tableHeads={willDispatchTableHeads}\n          data={currentWill[0]?.dispatches || []}\n          isLoading={loading}\n          tableActions={\n            disabled\n              ? undefined\n              : [\n                  {\n                    name: 'edit',\n                    onClick: row => {\n                      setDispatchEditData(row);\n                      setDispatchModal(true);\n                    },\n                    icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                  {\n                    name: 'delete',\n                    onClick: row => setDeleteDispatchId(row.id),\n                    icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                ]\n          }\n          style={{marginBottom: 22}}\n        />\n        {dispatchModal && (\n          <WillDispatchModal\n            data={dispatchEditData}\n            open={true}\n            onClose={() => setDispatchModal(false)}\n            refetch={refetch}\n            willStatus={currentWill[0]?.status}\n          />\n        )}\n        {deleteDispatchId && (\n          <ConfirmationModal\n            open={true}\n            onClose={() => setDeleteDispatchId(null)}\n            onConfirm={handleDeleteDispatch}\n            subTitle=\"Da li ste sigurni da želite da izbrišete ovaj povrat testamenta?\"\n          />\n        )}\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default WillDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/wills/willNewEntry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/wills/willOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/landingPages/depositLandingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/landingPages/fixedDepositLanding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/landingPages/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/landingPages/transitDepositLanding.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1971,1974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1971,1974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, DepositIcon, Dropdown, Theme, Typography} from 'client-library';\nimport React, {useMemo, useState} from 'react';\nimport LandingPageContentBox from '../../../components/landingPageContentBox/landingPageContentBox.tsx';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport useGetInitialState from '../../../services/graphQL/transitDeposits/useGetInitialState.ts';\nimport {FlexColumn, FlexRow} from '../../../shared/flex.ts';\nimport ScreenWrapper from '../../../shared/screenWrapper/screenWrapper.tsx';\nimport {DropdownData} from '../../../types/dropdownData.ts';\nimport {InitialState} from '../../../types/graphQL/initialState.ts';\nimport {parseDateForBackend} from '../../../utils/dateUtils.ts';\nimport {SectionBox} from '../../accounting/styles.tsx';\nimport {Container, InitialStateItem, LandingPageTitle} from './styles.ts';\nimport {formatCurrency} from '../../../utils/roundCurrency.ts';\n\ntype InitialStateFilterType = {\n  date: Date | null;\n  bank_account: DropdownData<string> | null;\n};\n\nconst TransitDepositLandingPage: React.FC = () => {\n  const [mainFilters, setMainFilters] = useState<InitialStateFilterType>({\n    date: new Date(),\n    bank_account: null,\n  });\n\n  const [transitionalFilters, setTransitionalFilters] = useState<InitialStateFilterType>({\n    date: new Date(),\n    bank_account: null,\n  });\n\n  const {\n    contextMain: {\n      organization_unit: {id: organization_unit_id, bank_accounts},\n    },\n  } = useAppContext();\n\n  const {data: transitionalState} = useGetInitialState({\n    transitional_bank_account: true,\n    bank_account: transitionalFilters.bank_account?.id,\n    date: parseDateForBackend(transitionalFilters.date),\n    organization_unit_id,\n  });\n  const {data: mainState} = useGetInitialState({\n    transitional_bank_account: false,\n    bank_account: mainFilters.bank_account?.id,\n    date: parseDateForBackend(mainFilters.date),\n    organization_unit_id,\n  });\n\n  const onFilterChange = (value: any, name: string, type: 'transitional' | 'main') => {\n    if (type === 'transitional') {\n      setTransitionalFilters({...transitionalFilters, [name]: value});\n    } else {\n      setMainFilters({...mainFilters, [name]: value});\n    }\n  };\n\n  const orgUnitBankAccountOptions = useMemo(() => {\n    if (!bank_accounts) return [];\n    return bank_accounts.map((item: string) => ({id: item, title: item}));\n  }, [bank_accounts]);\n  return (\n    <ScreenWrapper showBreadcrumbs={false}>\n      <div>\n        <LandingPageTitle>\n          <Typography variant=\"bodyLarge\" style={{fontWeight: 600}} content=\"PROLAZNI DEPOZIT\" />\n        </LandingPageTitle>\n        <Container>\n          <LandingPageContentBox\n            title={'Uplata na račun'}\n            path={'/finance/deposit/transit/payments/overview'}\n            icon={<DepositIcon />}\n          />\n          <LandingPageContentBox\n            title={'Nalozi za plaćanje'}\n            path={'/finance/deposit/transit/payment-orders/overview'}\n            icon={<DepositIcon />}\n          />\n          <LandingPageContentBox\n            title={'Vezani troškovi'}\n            path={'/finance/deposit/transit/tax-contribution-calculation'}\n            icon={<DepositIcon />}\n          />\n        </Container>\n      </div>\n      <SectionBox style={{marginTop: 20}}>\n        <FlexRow gap={15}>\n          <div>\n            <Typography variant=\"bodyLarge\" style={{fontWeight: 600, marginBottom: 30}} content=\"Prolazni račun\" />\n            <FlexRow gap={8}>\n              <Dropdown\n                onChange={value => onFilterChange(value, 'bank_account', 'main')}\n                value={mainFilters.bank_account}\n                options={orgUnitBankAccountOptions}\n                label=\"ŽIRO RAČUN:\"\n              />\n              <Datepicker\n                onChange={value => onFilterChange(value, 'date', 'main')}\n                selected={mainFilters.date ? new Date(mainFilters.date) : null}\n                label=\"DATUM:\"\n              />\n            </FlexRow>\n            <FlexColumn gap={4} style={{marginTop: 15}} align=\"stretch\">\n              {mainState?.items.map((item: InitialState) => (\n                <InitialStateItem key={`${item.current_bank_account}- ${item.amount}`}>\n                  <Typography\n                    variant=\"bodySmall\"\n                    content={item.current_bank_account}\n                    style={{color: Theme.palette.gray300}}\n                  />\n                  <Typography\n                    variant=\"bodySmall\"\n                    content={formatCurrency(item.amount)}\n                    style={{color: Theme.palette.gray300}}\n                  />\n                </InitialStateItem>\n              ))}\n            </FlexColumn>\n          </div>\n          <div>\n            <Typography variant=\"bodyLarge\" style={{fontWeight: 600, marginBottom: 30}} content=\"Prelazni račun\" />\n            <FlexRow gap={8}>\n              <Datepicker\n                onChange={value => onFilterChange(value, 'date', 'transitional')}\n                selected={transitionalFilters.date ? new Date(transitionalFilters.date) : null}\n                label=\"DATUM:\"\n              />\n            </FlexRow>\n            <FlexColumn gap={4} style={{marginTop: 15}} align=\"stretch\">\n              {transitionalState?.items.map((item: InitialState) => (\n                <InitialStateItem key={`${item.current_bank_account}- ${item.amount}`}>\n                  <Typography\n                    variant=\"bodySmall\"\n                    content={item.current_bank_account}\n                    style={{color: Theme.palette.gray300}}\n                  />\n                  <Typography\n                    variant=\"bodySmall\"\n                    content={formatCurrency(item.amount)}\n                    style={{color: Theme.palette.gray300}}\n                  />\n                </InitialStateItem>\n              ))}\n            </FlexColumn>\n          </div>\n        </FlexRow>\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default TransitDepositLandingPage;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPaymentOrders/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPaymentOrders/depositPaymentOrderDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2269,2272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2269,2272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Divider, Dropdown, Theme} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport useAppContext from '../../../../context/useAppContext';\nimport useGetDepositPaymentOrders from '../../../../services/graphQL/transitDeposits/useGetDepositPaymentOrders';\nimport {MainTitle} from '../../../../shared/pageElements';\nimport ScreenWrapper from '../../../../shared/screenWrapper/screenWrapper';\nimport {DropdownData} from '../../../../types/dropdownData';\nimport {SectionBox} from '../../../accounting/styles';\nimport {DepositPaymentOrderType, DepositPaymentOrderTypeOptions} from './constants';\nimport OrderByCaseNumberForm from './orderByCaseNumberForm';\nimport TaxOrderForm from './taxOrderForm';\n\nconst DepositPaymentOrderDetails = () => {\n  const [type, setType] = useState<DropdownData<DepositPaymentOrderType> | null>(null);\n  const {\n    navigation: {\n      location: {pathname},\n    },\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n\n  const {data: currentPaymentOrder, refetch} = useGetDepositPaymentOrders({id: id ? parseInt(id) : null});\n\n  const onTypeChange = (value: DropdownData<DepositPaymentOrderType>) => {\n    setType(value as DropdownData<DepositPaymentOrderType>);\n  };\n\n  useEffect(() => {\n    if (currentPaymentOrder && currentPaymentOrder.items[0]) {\n      if (currentPaymentOrder.items[0].additional_expenses.length > 0) {\n        //* By case\n        setType(DepositPaymentOrderTypeOptions[0]);\n      } else {\n        //* Taxes\n        setType(DepositPaymentOrderTypeOptions[1]);\n      }\n    }\n  }, [currentPaymentOrder]);\n\n  const title = useMemo(() => {\n    if (!type || !currentPaymentOrder.items[0]) return '';\n\n    if (type.id === 'case') {\n      return `NALOG ZA PLAĆANJE PO PREDMETU - ${currentPaymentOrder.items[0].case_number}`;\n    } else {\n      return `NALOG ZA PLAĆANJE POREZA/PRIREZA - ${currentPaymentOrder.items[0].case_number}`;\n    }\n  }, [type, currentPaymentOrder]);\n\n  return (\n    <ScreenWrapper>\n      <SectionBox>\n        <MainTitle content={title} />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" style={{marginBottom: 20}} />\n\n        <div style={{marginBottom: 20}}>\n          <Dropdown\n            label=\"TIP NALOGA:\"\n            onChange={onTypeChange as any}\n            value={type}\n            options={DepositPaymentOrderTypeOptions}\n            isDisabled\n          />\n        </div>\n\n        {type && type.id === 'case' && (\n          <OrderByCaseNumberForm data={currentPaymentOrder?.items[0]} refetchPaymentOrder={refetch} />\n        )}\n        {type && type.id === 'tax' && (\n          <TaxOrderForm data={currentPaymentOrder?.items[0]} refetchPaymentOrder={refetch} />\n        )}\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default DepositPaymentOrderDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPaymentOrders/depositPaymentOrderNewEntry.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[743,746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[743,746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Dropdown} from 'client-library';\nimport {useState} from 'react';\nimport {DropdownData} from '../../../../types/dropdownData';\nimport {DepositPaymentOrderType, DepositPaymentOrderTypeOptions} from './constants';\nimport OrderByCaseNumberForm from './orderByCaseNumberForm';\nimport TaxOrderForm from './taxOrderForm';\n\nconst DepositPaymentOrderNewEntry = () => {\n  const [type, setType] = useState<DropdownData<DepositPaymentOrderType> | null>(null);\n\n  const onTypeChange = (value: DropdownData<DepositPaymentOrderType>) => {\n    setType(value as DropdownData<DepositPaymentOrderType>);\n  };\n\n  return (\n    <div>\n      <div style={{marginBottom: 20}}>\n        <Dropdown\n          label=\"TIP NALOGA:\"\n          onChange={onTypeChange as any}\n          value={type}\n          options={DepositPaymentOrderTypeOptions}\n        />\n      </div>\n\n      {type && type.id === 'case' && <OrderByCaseNumberForm />}\n      {type && type.id === 'tax' && <TaxOrderForm />}\n    </div>\n  );\n};\n\nexport default DepositPaymentOrderNewEntry;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPaymentOrders/depositPaymentOrderOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPaymentOrders/depositPaymentOrderTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPaymentOrders/orderByCaseNumberForm.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":170,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":170,"endColumn":15,"fix":{"range":[6625,6639],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":171,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":171,"endColumn":15,"fix":{"range":[6658,6672],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":172,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":172,"endColumn":15,"fix":{"range":[6691,6705],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":173,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":173,"endColumn":15,"fix":{"range":[6734,6748],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":174,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":174,"endColumn":15,"fix":{"range":[6770,6784],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":175,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":175,"endColumn":13,"fix":{"range":[6798,6810],"text":"          "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7569,7572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7569,7572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":200,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":200,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":222,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8334,8337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8334,8337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":303,"column":35,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":303,"endColumn":98},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":306,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":306,"endColumn":88},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":514,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":514,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18539,18542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18539,18542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, Dropdown, FileUpload, Input, Table, Typography} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport {v4 as uuidv4} from 'uuid';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList';\nimport {requiredError} from '../../../../constants';\nimport useAppContext from '../../../../context/useAppContext';\nimport useCalculateAdditionalExpenses from '../../../../services/graphQL/calculateAdditionalExpenses/useCalculateAdditionalExpenses';\nimport useGetSuppliers from '../../../../services/graphQL/suppliers/useGetSuppliers';\nimport useGetTaxAuthorityCodebook from '../../../../services/graphQL/taxAuthorityCodebook/useGetTaxAuthorityCodebookOverview';\nimport useGetCases from '../../../../services/graphQL/transitDeposits/useGetCases';\nimport useInsertDepositPaymentOrder from '../../../../services/graphQL/transitDeposits/useInsertDepositPaymentOrder';\nimport {FlexColumn, FlexRow} from '../../../../shared/flex';\nimport Footer from '../../../../shared/footer';\nimport {TableTitle} from '../../../../shared/tableTitle';\nimport {\n  DepositPaymentOrder,\n  DepositPaymentOrderCase,\n  PaymentOrderAdditionalExpense,\n} from '../../../../types/graphQL/depositPaymentOrders';\nimport {parseDateForBackend} from '../../../../utils/dateUtils';\nimport {optionsNumberSchema, optionsStringSchema} from '../../../../utils/formSchemas';\nimport {additionalExpensesTableHeads} from './constants';\nimport PayOrderModal from './payOrderModal';\n\nconst SUBJECT_ENTITY = 'subjects';\nconst MUNICIPALITY_ENTITY = 'municipalities';\n\ntype OrderByCaseNumberFormProps = {\n  data?: DepositPaymentOrder;\n  refetchPaymentOrder?: () => void;\n};\n\nconst orderByCaseNumberSchema = yup.object().shape(\n  {\n    source_bank_account: optionsStringSchema.required(requiredError),\n    case_number: optionsStringSchema.required(requiredError).nullable().default(null),\n    //* Just for show.\n    left_case_amount: yup.number().required(requiredError).nullable().default(null),\n    //* Choose either gross or net amount to pay. The other should be disabled and vice-versa.\n    net_amount_to_pay: yup.string().when('gross_amount_to_pay', {\n      is: '',\n      then: schema => schema.required(requiredError),\n    }),\n    gross_amount_to_pay: yup.string().when('net_amount_to_pay', {\n      is: '',\n      then: schema => schema.required(requiredError),\n    }),\n    //* Unfortunate naming. This is to be sent with the insertDepositPaymentOrder mutation.\n    net_amount: yup.number().required(requiredError),\n    id: yup.number().nullable().default(null),\n    subject_type: optionsNumberSchema.required(requiredError),\n    //* Unfortunate naming of the field. Should be subject_id.\n    supplier_id: optionsNumberSchema.required(requiredError),\n    bank_account: optionsStringSchema.required(requiredError),\n    date_of_payment: yup.date().required(requiredError),\n    date_of_statement: yup.date().nullable().default(null),\n    id_of_statement: yup.string().nullable().default(null),\n    municipality_id: optionsNumberSchema.required(requiredError),\n    tax_authority_codebook_id: optionsNumberSchema.required(requiredError),\n    file_id: yup.number().nullable().default(null),\n    additional_expenses: yup\n      .array()\n      .of(\n        yup.object().shape({\n          price: yup.number().required(requiredError),\n          title: yup.string().required(requiredError),\n          subject_id: yup.number().required(requiredError),\n          organization_unit_id: yup.number().required(requiredError),\n          id: yup.string().required(requiredError),\n        }),\n      )\n      .required(requiredError),\n  },\n  [['net_amount_to_pay', 'gross_amount_to_pay']],\n);\n\ntype OrderByCaseNumberFormType = yup.InferType<typeof orderByCaseNumberSchema>;\n\nconst OrderByCaseNumberForm = ({data, refetchPaymentOrder}: OrderByCaseNumberFormProps) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n  const [payModal, setPayModal] = useState(false);\n\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n    contextMain: {\n      organization_unit: {id: organization_unit_id, bank_accounts: org_unit_bank_accounts},\n    },\n    fileService: {uploadFile},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n  const isNew = id === 'add-new';\n\n  const {\n    handleSubmit,\n    register,\n    formState: {errors},\n    setValue,\n    control,\n    reset,\n    watch,\n    trigger,\n  } = useForm<OrderByCaseNumberFormType>({\n    resolver: yupResolver(orderByCaseNumberSchema),\n  });\n\n  const subjectType = watch('subject_type');\n  const subject = watch('supplier_id');\n\n  const {\n    tax_authority_codebook_id,\n    municipality_id,\n    source_bank_account,\n    net_amount_to_pay,\n    gross_amount_to_pay,\n    date_of_statement,\n    id_of_statement,\n    additional_expenses,\n    left_case_amount,\n  } = watch();\n\n  const {insertDepositPaymentOrder, loading: isSaving} = useInsertDepositPaymentOrder();\n\n  const {data: cases} = useGetCases(\n    {organization_unit_id, bank_account: source_bank_account?.id},\n    {\n      transform: data =>\n        data.map((item: DepositPaymentOrderCase) => ({\n          id: item.case_number,\n          title: item.case_number,\n          amount: item.amount,\n        })),\n    },\n  );\n\n  const {suppliers: subjectTypes} = useGetSuppliers({entity: SUBJECT_ENTITY, parent_id: null});\n\n  const {suppliers: subjects} = useGetSuppliers({\n    entity: SUBJECT_ENTITY,\n    parent_id: subjectType ? subjectType.id : null,\n  });\n\n  const {suppliers: municipalities} = useGetSuppliers({entity: MUNICIPALITY_ENTITY});\n  const {data: taxAuthorityCodebook} = useGetTaxAuthorityCodebook();\n\n  const {calculateAdditionalExpenses, loading: isLoadingExpenses} = useCalculateAdditionalExpenses(\n    {\n      municipality_id: municipality_id?.id,\n      tax_authority_codebook_id: tax_authority_codebook_id?.id,\n      gross_price: gross_amount_to_pay ? parseInt(gross_amount_to_pay) : null,\n      net_price: net_amount_to_pay ? parseInt(net_amount_to_pay) : null,\n    },\n    {\n      onSuccess: data => {\n        if (net_amount_to_pay) {\n          setValue('gross_amount_to_pay', data ? data.reduce((acc, item) => acc + item.price, 0).toString() : '');\n        } else {\n          setValue('net_amount_to_pay', data?.length ? data[data.length - 1].price.toString() : '');\n        }\n        //* We need to adapt the data to the form field format.\n        const additionalExpensesTransformed = data\n          ? data.map(item => ({\n              price: item.price,\n              title: item.title,\n              subject_id: item.subject.id,\n              organization_unit_id,\n              id: uuidv4(),\n            }))\n          : [];\n\n        setValue('additional_expenses', additionalExpensesTransformed);\n        setValue('net_amount', data?.length ? data[data.length - 1].price : 0);\n      },\n    },\n  );\n\n  const onSubmit = async (data: OrderByCaseNumberFormType) => {\n    if (\n      data.left_case_amount &&\n      data.gross_amount_to_pay &&\n      data.left_case_amount < parseInt(data.gross_amount_to_pay)\n    ) {\n      alert.error('Iznos za plaćanje ne može biti veći od preostalog iznosa za plaćanje');\n      return;\n    }\n\n    const payload = {\n      case_number: data.case_number?.id,\n      file_id: data.file_id ? data.file_id : null,\n      id: data.id ? data.id : null,\n      organization_unit_id,\n      additional_expenses: data.additional_expenses.map((item: any) => {\n        const {id, ...rest} = item;\n        return rest;\n      }),\n      additional_expenses_for_paying: null,\n      source_bank_account: source_bank_account?.id,\n      municipality_id: municipality_id?.id,\n      tax_authority_codebook_id: tax_authority_codebook_id?.id,\n      subject_type_id: subjectType.id,\n      //* This is actually the subject to whom we are paying.\n      supplier_id: subject.id,\n      bank_account: data.bank_account.id,\n      date_of_payment: parseDateForBackend(data.date_of_payment) as string,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertDepositPaymentOrder(\n      payload,\n      (data: DepositPaymentOrder) => {\n        alert.success(isNew ? 'Uspješno ste dodali novi nalog za plaćanje' : 'Uspešno ste izmjenili nalog za plaćanje');\n        if (isNew) {\n          navigate(`/finance/deposit/transit/payment-orders/${data.id}`);\n        } else {\n          refetchPaymentOrder && refetchPaymentOrder();\n        }\n      },\n      () => {\n        alert.error(\n          isNew ? 'Greška prilikom dodavanja novog naloga za plaćanje' : 'Greška prilikom izmjene naloga za plaćanje',\n        );\n      },\n    );\n  };\n\n  const calculateExpenses = () => {\n    //* Trigger validation for fields required for calculating additional expenses.\n    trigger(['tax_authority_codebook_id', 'municipality_id', 'net_amount_to_pay', 'gross_amount_to_pay']);\n    if (!tax_authority_codebook_id || !municipality_id || (!net_amount_to_pay && !gross_amount_to_pay)) return;\n\n    //* We cannot send both net and gross amount to pay to calculate the additional expenses.\n    if (net_amount_to_pay && gross_amount_to_pay) {\n      alert.error('Izaberite samo jedan iznos za plaćanje');\n      return;\n    }\n\n    calculateAdditionalExpenses();\n  };\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  useEffect(() => {\n    if (data) {\n      const netAmountToPay =\n        data.additional_expenses.find((item: PaymentOrderAdditionalExpense) => item.title === 'Neto')?.price || 0;\n\n      reset({\n        id: data.id,\n        file_id: data.file.id,\n        supplier_id: data.supplier,\n        //todo: change later\n        bank_account: {id: data.bank_account, title: data.bank_account},\n        id_of_statement: data.id_of_statement,\n        date_of_statement: data.date_of_payment ? new Date(data.date_of_payment) : null,\n        date_of_payment: new Date(data.date_of_payment),\n        case_number: {id: data.case_number, title: data.case_number},\n        //* Colleague David said that this should be the net amount. It's always the last item in the additional expenses array.\n        net_amount: netAmountToPay,\n        net_amount_to_pay: netAmountToPay.toString(),\n        gross_amount_to_pay: data.additional_expenses.reduce((acc, item) => acc + item.price, 0).toString(),\n        source_bank_account: {id: data.source_bank_account, title: data.source_bank_account},\n        subject_type: data.subject_type,\n        additional_expenses: data.additional_expenses.map((item: PaymentOrderAdditionalExpense) => ({\n          price: item.price,\n          title: item.title,\n          subject_id: item.subject.id,\n          organization_unit_id,\n          id: uuidv4(),\n        })),\n      });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (data && municipalities.length && taxAuthorityCodebook.length) {\n      setValue('municipality_id', municipalities.find(item => item.id === data.municipality?.id)!);\n      setValue(\n        'tax_authority_codebook_id',\n        taxAuthorityCodebook.find(item => item.id === data.tax_authority_codebook?.id)!,\n      );\n    }\n  }, [data, municipalities, taxAuthorityCodebook]);\n\n  useEffect(() => {\n    if (data && cases && !left_case_amount) {\n      const value = cases.find(item => item.id === data.case_number)?.amount || 0;\n      setValue('left_case_amount', value.toFixed(2));\n    }\n  }, [data, cases]);\n\n  const onSourceBankAccountChange = () => {\n    setValue('case_number', null);\n    setValue('left_case_amount', null);\n  };\n\n  const bankAccountOptions = useMemo(() => {\n    if (!subject) return [];\n\n    const options = subjects.find(item => item.id === subject.id)?.bank_accounts.map(item => ({id: item, title: item}));\n    return options ?? [];\n  }, [subject]);\n\n  const orgUnitBankAccountOptions = useMemo(() => {\n    if (!org_unit_bank_accounts) return [];\n    return org_unit_bank_accounts.map((item: string) => ({id: item, title: item}));\n  }, [org_unit_bank_accounts]);\n\n  //* If there is a date and id of statement, it means this has been payed, so everything should be disabled.\n  //* When editing, everything is to be disabled except the file upload and the date of payment.\n  const isDisabled = !!date_of_statement && !!id_of_statement;\n\n  return (\n    <FlexColumn gap={20} align=\"stretch\">\n      <FlexRow gap={8}>\n        <Controller\n          name=\"source_bank_account\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              label=\"ŽIRO RAČUN:\"\n              name={name}\n              value={value}\n              onChange={value => {\n                onSourceBankAccountChange();\n                onChange(value);\n              }}\n              options={orgUnitBankAccountOptions}\n              error={errors.source_bank_account?.message}\n              isDisabled={isDisabled || !isNew}\n            />\n          )}\n        />\n        <Controller\n          name=\"case_number\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              label=\"BROJ_PREDMETA:\"\n              name={name}\n              value={value}\n              onChange={value => {\n                onChange(value);\n                setValue('left_case_amount', cases.find(item => item.id === value.id)?.amount || 0);\n              }}\n              options={cases}\n              error={errors.case_number?.message}\n              isDisabled={isDisabled || !isNew}\n            />\n          )}\n        />\n        <Input label=\"IZNOS ZA PLAĆANJE:\" {...register('left_case_amount')} disabled={true} />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"subject_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              label=\"TIP SUBJEKTA:\"\n              name={name}\n              value={value}\n              onChange={onChange}\n              options={subjectTypes}\n              error={errors.subject_type?.message}\n              isDisabled={isDisabled || !isNew}\n            />\n          )}\n        />\n        <Controller\n          name=\"supplier_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              label=\"SUBJEKT:\"\n              name={name}\n              value={value}\n              onChange={onChange}\n              options={subjects}\n              error={errors.supplier_id?.message}\n              isDisabled={!subjectType || isDisabled || !isNew}\n            />\n          )}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"bank_account\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              label=\"ŽIRO RAČUN SUBJEKTA:\"\n              name={name}\n              value={value}\n              onChange={onChange}\n              options={bankAccountOptions}\n              error={errors.bank_account?.message}\n              isDisabled={!subject || isDisabled || !isNew}\n            />\n          )}\n        />\n        <div style={{width: '100%'}}>\n          <Controller\n            name=\"date_of_payment\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : null}\n                onChange={onChange}\n                label=\"DATUM NALOGA\"\n                error={errors.date_of_payment?.message}\n                disabled={isDisabled}\n              />\n            )}\n          />\n        </div>\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"municipality_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              label=\"OPŠTINA:\"\n              name={name}\n              value={value}\n              onChange={onChange}\n              options={municipalities}\n              error={errors.municipality_id?.message}\n              isDisabled={isDisabled || !isNew}\n            />\n          )}\n        />\n        <Controller\n          name=\"tax_authority_codebook_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              label=\"ŠIFARNIK PORESKE UPRAVE:\"\n              name={name}\n              value={value}\n              onChange={onChange}\n              options={taxAuthorityCodebook}\n              error={errors.tax_authority_codebook_id?.message}\n              isDisabled={isDisabled || !isNew}\n            />\n          )}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Input\n          label=\"NETO IZNOS:\"\n          {...register('net_amount_to_pay')}\n          error={errors.net_amount_to_pay?.message}\n          disabled={Boolean(gross_amount_to_pay && !net_amount_to_pay) || isDisabled || !isNew}\n        />\n        <Input\n          label=\"BRUTO IZNOS:\"\n          {...register('gross_amount_to_pay')}\n          error={errors.gross_amount_to_pay?.message}\n          disabled={Boolean(net_amount_to_pay && !gross_amount_to_pay) || isDisabled || !isNew}\n        />\n      </FlexRow>\n      <div style={{marginBottom: 10}}>\n        <FileUpload\n          icon={null}\n          files={uploadedFiles}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n          disabled={isDisabled}\n        />\n        <FileList files={data?.file?.id ? [data.file] : null} />\n      </div>\n      {isNew && (\n        <Button content=\"Obračunaj\" variant=\"primary\" onClick={calculateExpenses} style={{width: 'fit-content'}} />\n      )}\n\n      {additional_expenses?.length > 0 && (\n        <>\n          <TableTitle style={{marginTop: 30}}>\n            <Typography variant=\"bodyLarge\" content=\"Dodatni troškovi\" style={{fontWeight: 'bold'}} />\n          </TableTitle>\n          <Table\n            tableHeads={additionalExpensesTableHeads}\n            data={additional_expenses as any}\n            isLoading={isLoadingExpenses && isNew}\n          />\n        </>\n      )}\n\n      {!isDisabled && (\n        <Footer>\n          <Button\n            content=\"Odustani\"\n            variant=\"secondary\"\n            onClick={() => navigate('/finance/deposit/transit/payment-orders/overview')}\n          />\n          {!isNew && <Button content=\"Označi kao plaćeno\" variant=\"primary\" onClick={() => setPayModal(true)} />}\n          <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={isSaving} />\n        </Footer>\n      )}\n\n      {!isNew && data && payModal && (\n        <PayOrderModal onClose={() => setPayModal(false)} isOpen={payModal} id={data?.id} />\n      )}\n    </FlexColumn>\n  );\n};\n\nexport default OrderByCaseNumberForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPaymentOrders/payOrderModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPaymentOrders/taxOrderForm.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":103,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":103,"endColumn":15,"fix":{"range":[4027,4041],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":104,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":104,"endColumn":15,"fix":{"range":[4060,4074],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":105,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":105,"endColumn":15,"fix":{"range":[4093,4107],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":106,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":106,"endColumn":15,"fix":{"range":[4136,4150],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 14.","line":107,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":107,"endColumn":15,"fix":{"range":[4172,4186],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":108,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":108,"endColumn":13,"fix":{"range":[4199,4211],"text":"          "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5927,5930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5927,5930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, Dropdown, FileUpload, Table, Typography} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList';\nimport {requiredError} from '../../../../constants';\nimport useAppContext from '../../../../context/useAppContext';\nimport useGetSuppliers from '../../../../services/graphQL/suppliers/useGetSuppliers';\nimport useGetAdditionalExpenses from '../../../../services/graphQL/transitDeposits/useGetAdditionalExpenses';\nimport useInsertDepositPaymentOrder from '../../../../services/graphQL/transitDeposits/useInsertDepositPaymentOrder';\nimport {FlexColumn, FlexRow} from '../../../../shared/flex';\nimport Footer from '../../../../shared/footer';\nimport {TableTitle} from '../../../../shared/tableTitle';\nimport {DepositPaymentOrder, PaymentOrderAdditionalExpense} from '../../../../types/graphQL/depositPaymentOrders';\nimport {parseDateForBackend} from '../../../../utils/dateUtils';\nimport {optionsNumberSchema, optionsStringSchema} from '../../../../utils/formSchemas';\nimport {additionalExpensesTableHeads} from './constants';\nimport PayOrderModal from './payOrderModal';\n\nconst SUBJECT_ENTITY = 'other';\n\ntype TaxOrderFormProps = {\n  data?: DepositPaymentOrder;\n  refetchPaymentOrder?: () => void;\n};\n\nconst taxOrderSchema = yup.object().shape({\n  id: yup.number().nullable().default(null),\n  file_id: yup.number().nullable().default(null),\n  source_bank_account: optionsStringSchema.required(requiredError),\n  //* Unfortunate naming, should be subject_id - to whom we are paying the taxes.\n  supplier_id: optionsNumberSchema.required(requiredError),\n  bank_account: optionsStringSchema.required(requiredError),\n  date_of_payment: yup.date().required(requiredError),\n  id_of_statement: yup.string(),\n  date_of_statement: yup.date().nullable().default(null),\n  additional_expenses_for_paying: yup\n    .array()\n    .of(\n      yup.object().shape({\n        price: yup.number().required(requiredError),\n        title: yup.string().required(requiredError),\n        subject_id: yup.number().required(requiredError),\n        organization_unit_id: yup.number().required(requiredError),\n        id: yup.number().required(requiredError),\n      }),\n    )\n    .required(requiredError),\n});\n\ntype TaxOrderFormType = yup.InferType<typeof taxOrderSchema>;\n\nconst TaxOrderForm = ({data, refetchPaymentOrder}: TaxOrderFormProps) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n  const [checkedRows, setCheckedRows] = useState<number[]>([]);\n  const [payModal, setPayModal] = useState(false);\n\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n    contextMain: {\n      organization_unit: {id: organization_unit_id, bank_accounts: org_unit_bank_accounts},\n    },\n    fileService: {uploadFile},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n  const isNew = id === 'add-new';\n\n  const {\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    control,\n    reset,\n    watch,\n    trigger,\n  } = useForm<TaxOrderFormType>({\n    resolver: yupResolver(taxOrderSchema),\n  });\n\n  const subject = watch('supplier_id');\n\n  const {date_of_statement, id_of_statement, additional_expenses_for_paying, source_bank_account} = watch();\n\n  const {insertDepositPaymentOrder, loading: isSaving} = useInsertDepositPaymentOrder();\n\n  const {suppliers: subjects} = useGetSuppliers({\n    entity: SUBJECT_ENTITY,\n  });\n\n  const {fetchAdditionalExpenses, loading: isLoadingExpenses} = useGetAdditionalExpenses(\n    {organization_unit_id, subject_id: subject?.id, source_bank_account: source_bank_account?.id, status: 'Kreiran'},\n    {\n      onSuccess: data => {\n        //* We need to adapt the data to the form field format.\n        const additionalExpensesToPayTransformed = data\n          ? data.map((item: PaymentOrderAdditionalExpense) => ({\n              price: item.price,\n              title: item.title,\n              subject_id: item.subject.id,\n              organization_unit_id,\n              id: item.id,\n            }))\n          : [];\n        setValue('additional_expenses_for_paying', additionalExpensesToPayTransformed);\n      },\n    },\n  );\n\n  const onGetAdditionalExpenses = async () => {\n    trigger(['source_bank_account', 'supplier_id']);\n    if (!source_bank_account || !subject) return;\n\n    await fetchAdditionalExpenses();\n  };\n\n  const onCheckTableRow = (checked: boolean, id: number | null, all?: boolean) => {\n    if (all) {\n      setCheckedRows(checked ? additional_expenses_for_paying.map((_, index) => index) : []);\n    } else {\n      if (id) {\n        setCheckedRows(prev => (checked ? [...prev, id] : prev.filter(item => item !== id)));\n      }\n    }\n  };\n\n  const onSubmit = async (data: TaxOrderFormType) => {\n    if (!checkedRows.length) {\n      alert.error('Morate izabrati bar jedan dodatni trošak za plaćanje');\n      return;\n    }\n\n    const additionalExpensesForPaying = additional_expenses_for_paying.filter(item => checkedRows.includes(item.id));\n\n    const payload = {\n      id: data.id ? data.id : null,\n      date_of_payment: parseDateForBackend(data.date_of_payment) as string,\n      organization_unit_id,\n      bank_account: data.bank_account.id,\n      file_id: data.file_id ? data.file_id : null,\n      supplier_id: data.supplier_id.id,\n      additional_expenses_for_paying: additionalExpensesForPaying,\n      additional_expenses: null,\n      tax_authority_codebook_id: null,\n      municipality_id: null,\n      source_bank_account: data.source_bank_account?.id,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertDepositPaymentOrder(\n      payload,\n      (data: DepositPaymentOrder) => {\n        alert.success(isNew ? 'Uspješno ste dodali novi nalog za plaćanje' : 'Uspešno ste izmjenili nalog za plaćanje');\n        if (isNew) {\n          navigate(`/finance/deposit/transit/payment-orders/${data.id}`);\n        } else {\n          refetchPaymentOrder && refetchPaymentOrder();\n        }\n      },\n      () => {\n        alert.error(\n          isNew ? 'Greška prilikom dodavanja novog naloga za plaćanje' : 'Greška prilikom izmjene naloga za plaćanje',\n        );\n      },\n    );\n  };\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  useEffect(() => {\n    if (data) {\n      reset({\n        id: data.id,\n        file_id: data.file.id,\n        supplier_id: data.supplier,\n        bank_account: {id: data.bank_account, title: data.bank_account},\n        date_of_payment: new Date(data.date_of_payment),\n        id_of_statement: data.id_of_statement,\n        date_of_statement: data.date_of_statement ? new Date(data.date_of_statement) : null,\n        additional_expenses_for_paying: data.additional_expenses_for_paying,\n        source_bank_account: {id: data.source_bank_account, title: data.source_bank_account},\n      });\n    }\n  }, [data]);\n\n  const bankAccountOptions = useMemo(() => {\n    if (!subject) return [];\n\n    const options = subjects.find(item => item.id === subject.id)?.bank_accounts.map(item => ({id: item, title: item}));\n    return options ?? [];\n  }, [subject]);\n\n  const orgUnitBankAccountOptions = useMemo(() => {\n    if (!org_unit_bank_accounts) return [];\n    return org_unit_bank_accounts.map((item: string) => ({id: item, title: item}));\n  }, [org_unit_bank_accounts]);\n\n  //* If there is a date and id of statement, it means this has been payed, so everthing should be disabled.\n  const isDisabled = Boolean(date_of_statement && id_of_statement);\n\n  return (\n    <FlexColumn gap={20} align=\"stretch\">\n      <FlexRow gap={8}>\n        <Controller\n          name=\"source_bank_account\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              label=\"ŽIRO RAČUN:\"\n              name={name}\n              value={value}\n              onChange={onChange}\n              options={orgUnitBankAccountOptions}\n              error={errors.source_bank_account?.message}\n              isDisabled={isDisabled || !isNew}\n            />\n          )}\n        />\n        <Controller\n          name=\"supplier_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              label=\"SUBJEKT:\"\n              name={name}\n              value={value}\n              onChange={onChange}\n              options={subjects}\n              error={errors.supplier_id?.message}\n              isDisabled={isDisabled || !isNew}\n            />\n          )}\n        />\n      </FlexRow>\n\n      <FlexRow gap={8}>\n        <Controller\n          name=\"bank_account\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              label=\"ŽIRO RAČUN SUBJEKTA:\"\n              name={name}\n              value={value}\n              onChange={onChange}\n              options={bankAccountOptions}\n              error={errors.bank_account?.message}\n              isDisabled={!subject || isDisabled || !isNew}\n            />\n          )}\n        />\n        <div style={{width: '100%'}}>\n          <Controller\n            name=\"date_of_payment\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : null}\n                onChange={onChange}\n                label=\"DATUM NALOGA\"\n                error={errors.date_of_payment?.message}\n                disabled={isDisabled}\n              />\n            )}\n          />\n        </div>\n      </FlexRow>\n      <div style={{marginBottom: 10}}>\n        <FileUpload\n          icon={null}\n          files={uploadedFiles}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n          disabled={isDisabled}\n        />\n        <FileList files={data?.file.id ? [data.file] : null} />\n      </div>\n      {!isDisabled && isNew && (\n        <Button\n          content=\"Pretraži dodatne troškove\"\n          onClick={onGetAdditionalExpenses}\n          variant=\"primary\"\n          style={{width: 'fit-content'}}\n        />\n      )}\n\n      {Boolean(additional_expenses_for_paying?.length) && (\n        <>\n          <TableTitle style={{marginTop: 30}}>\n            <Typography variant=\"bodyLarge\" content=\"Porezi i prirezi\" style={{fontWeight: 'bold'}} />\n          </TableTitle>\n          <Table\n            tableHeads={additionalExpensesTableHeads}\n            data={additional_expenses_for_paying}\n            isLoading={isLoadingExpenses && isNew}\n            checkboxes={!isDisabled && isNew}\n            onCheck={onCheckTableRow}\n            checkedRows={checkedRows}\n          />\n        </>\n      )}\n\n      {!isDisabled && (\n        <Footer>\n          <Button\n            content=\"Odustani\"\n            variant=\"secondary\"\n            onClick={() => navigate('/finance/deposit/transit/payment-orders/overview')}\n          />\n          {!isNew && <Button content=\"Označi kao plaćeno\" variant=\"primary\" onClick={() => setPayModal(true)} />}\n          <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={isSaving} />\n        </Footer>\n      )}\n\n      {!isNew && data && payModal && (\n        <PayOrderModal onClose={() => setPayModal(false)} isOpen={payModal} id={data?.id} />\n      )}\n    </FlexColumn>\n  );\n};\n\nexport default TaxOrderForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPayments/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPayments/depositPaymentDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPayments/depositPaymentForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3996,3999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3996,3999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Checkbox, Datepicker, Dropdown, FileUpload, Input, Typography} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList';\nimport {requiredError} from '../../../../constants';\nimport useAppContext from '../../../../context/useAppContext';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview';\nimport useInsertDepositPayment from '../../../../services/graphQL/transitDeposits/useInsertDepositPayment';\nimport {FlexColumn, FlexRow} from '../../../../shared/flex';\nimport Footer from '../../../../shared/footer';\nimport {DepositPayment, DepositPaymentInsertData} from '../../../../types/graphQL/depositPayments';\nimport {parseDateForBackend} from '../../../../utils/dateUtils';\nimport {optionsNumberSchema, optionsStringSchema} from '../../../../utils/formSchemas';\n\nconst depositPaymentSchema = yup.object({\n  payer: yup.string().required(requiredError),\n  case_number: yup.string().required(requiredError),\n  party_name: yup.string().required(requiredError),\n  number_of_bank_statement: yup.string().required(requiredError),\n  date_of_bank_statement: yup.date().required(requiredError),\n  amount: yup.number().required(requiredError),\n  main_bank_account: yup.boolean().required(requiredError),\n  account_id: optionsNumberSchema.required(requiredError),\n  current_bank_account: optionsStringSchema.when('main_bank_account', {\n    is: false,\n    then: schema => schema.required(requiredError),\n  }),\n  date_of_transfer_main_account: yup.date().when('main_bank_account', {\n    is: false,\n    then: schema => schema.required(requiredError),\n  }),\n  file_id: yup.number().nullable().default(null),\n  id: yup.number().nullable().default(null),\n});\n\ntype DepositPaymentForm = yup.InferType<typeof depositPaymentSchema>;\n\ntype DepositPaymentFormProps = {\n  data?: DepositPayment;\n  isLoading?: boolean;\n};\n\nconst DepositPaymentForm = ({data, isLoading}: DepositPaymentFormProps) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n    alert,\n    fileService: {uploadFile},\n    contextMain: {\n      organization_unit: {bank_accounts: org_unit_bank_accounts},\n    },\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n  const isNew = id === 'add-new';\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    control,\n    watch,\n    reset,\n  } = useForm<DepositPaymentForm>({\n    resolver: yupResolver(depositPaymentSchema),\n    defaultValues: {main_bank_account: false},\n  });\n\n  const {insertDepositPayment, loading: isSaving} = useInsertDepositPayment();\n  const {counts} = useGetCountOverview({});\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: DepositPaymentForm) => {\n    const payload: DepositPaymentInsertData = {\n      ...data,\n      date_of_bank_statement: parseDateForBackend(data.date_of_bank_statement) as string,\n      date_of_transfer_main_account: data.date_of_transfer_main_account\n        ? parseDateForBackend(data.date_of_transfer_main_account)\n        : null,\n      current_bank_account: data.current_bank_account ? data.current_bank_account.id : null,\n      //* Unfortunate naming of this field requires us to send the opposite value.\n      //* Should have been named transit_bank_account or something similar.\n      main_bank_account: !data.main_bank_account,\n      account_id: data.account_id.id,\n      file_id: data.file_id ? data.file_id : null,\n      id: isNew ? null : parseInt(id),\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertDepositPayment(\n      payload,\n      () => {\n        alert.success('Uplata je uspješno sačuvana.');\n        navigate('/finance/deposit/transit/payments/overview');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom čuvanja uplate.');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data) {\n      reset({\n        payer: data.payer,\n        case_number: data.case_number,\n        party_name: data.party_name,\n        number_of_bank_statement: data.number_of_bank_statement,\n        date_of_bank_statement: new Date(data.date_of_bank_statement),\n        amount: data.amount,\n        main_bank_account: !data.main_bank_account,\n        date_of_transfer_main_account: data.date_of_transfer_main_account\n          ? new Date(data.date_of_transfer_main_account)\n          : undefined,\n        account_id: data.account,\n        current_bank_account: {id: data.current_bank_account, title: data.current_bank_account},\n      });\n    }\n  }, [data]);\n\n  const isMainBankAccount = watch('main_bank_account');\n  const mainAccountPayed = Boolean(data?.current_bank_account);\n\n  const orgUnitBankAccountOptions = useMemo(() => {\n    if (!org_unit_bank_accounts) return [];\n    return org_unit_bank_accounts.map((item: string) => ({id: item, title: item}));\n  }, [org_unit_bank_accounts]);\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <div>\n      <FlexColumn gap={20} align=\"stretch\">\n        <FlexRow gap={8}>\n          <Input label=\"UPLATILAC:\" {...register('payer')} error={errors.payer?.message} />\n          <Input label=\"BROJ PREDMETA:\" {...register('case_number')} error={errors.case_number?.message} />\n        </FlexRow>\n        <FlexRow gap={8}>\n          <Input label=\"STRANKA U POSTUPKU:\" {...register('party_name')} error={errors.party_name?.message} />\n          <Input\n            label=\"BROJ IZVODA:\"\n            {...register('number_of_bank_statement')}\n            error={errors.number_of_bank_statement?.message}\n          />\n        </FlexRow>\n        <FlexRow gap={8}>\n          <div style={{width: '100%'}}>\n            <Controller\n              control={control}\n              name=\"date_of_bank_statement\"\n              render={({field: {name, value, onChange}}) => (\n                <Datepicker\n                  label=\"DATUM IZVODA:\"\n                  onChange={onChange}\n                  selected={value ? new Date(value) : null}\n                  name={name}\n                  error={errors.date_of_bank_statement?.message}\n                />\n              )}\n            />\n          </div>\n\n          <Input label=\"IZNOS:\" {...register('amount')} error={errors.amount?.message} />\n        </FlexRow>\n        <FlexRow gap={8}>\n          <Controller\n            control={control}\n            name=\"account_id\"\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                options={counts}\n                value={value}\n                onChange={onChange}\n                label=\"KONTO:\"\n                error={errors.account_id?.message}\n              />\n            )}\n          />\n        </FlexRow>\n        {!mainAccountPayed && (\n          <div>\n            <Controller\n              name=\"main_bank_account\"\n              control={control}\n              render={({field: {name, value, onChange}}) => {\n                return (\n                  <FlexRow align=\"center\" gap={8} style={{width: 'fit-content'}}>\n                    <Checkbox onChange={onChange} name={name} checked={value} />\n                    <Typography content=\"Prelazni račun\" variant=\"bodySmall\" />\n                  </FlexRow>\n                );\n              }}\n            />\n          </div>\n        )}\n\n        <FlexRow gap={8}>\n          <Controller\n            control={control}\n            name=\"current_bank_account\"\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                label=\"GLAVNI RAČUN:\"\n                name={name}\n                value={value}\n                onChange={onChange}\n                options={orgUnitBankAccountOptions}\n                error={errors.current_bank_account?.message}\n                isDisabled={(isMainBankAccount && isNew) || mainAccountPayed}\n              />\n            )}\n          />\n\n          <div style={{width: '100%'}}>\n            <Controller\n              control={control}\n              name=\"date_of_transfer_main_account\"\n              render={({field: {name, value, onChange}}) => (\n                <Datepicker\n                  label=\"DATUM UPLATE NA GLAVNI RAČUN:\"\n                  onChange={onChange}\n                  selected={value ? new Date(value) : null}\n                  name={name}\n                  error={errors.date_of_transfer_main_account?.message}\n                  disabled={isMainBankAccount || mainAccountPayed}\n                />\n              )}\n            />\n          </div>\n        </FlexRow>\n        <div style={{marginBottom: 10}}>\n          <FileUpload\n            icon={null}\n            files={uploadedFiles}\n            variant=\"secondary\"\n            onUpload={handleUpload}\n            note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n            buttonText=\"Učitaj\"\n          />\n          <FileList files={data?.file.id ? [data.file] : null} />\n        </div>\n      </FlexColumn>\n\n      <Footer>\n        <Button\n          content=\"Odustani\"\n          variant=\"secondary\"\n          onClick={() => navigate('/finance/deposit/transit/payments/overview')}\n        />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={isSaving} />\n      </Footer>\n    </div>\n  );\n};\n\nexport default DepositPaymentForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPayments/depositPaymentNewEntry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPayments/depositPaymentsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositPayments/depositPaymentsTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositTaxes/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositTaxes/depositTaxesOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/depositTaxes/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/taxContributionCalculation/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/transitDeposit/taxContributionCalculation/taxContributionCalculationOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/addPropertyBenefitsConfiscation/addPropertyBenefitsConfiscation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/addPropertyBenefitsConfiscation/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/confiscation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/confiscationOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1993,1996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1993,1996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2894,2897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2894,2897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {PAGE_SIZE} from '../../../constants.ts';\nimport {tableHeadsConfiscationOverview} from './constants.tsx';\nimport {Header} from './styles.ts';\nimport {FilterInput} from '../../accounting/styles.tsx';\nimport {Filters, FilterDropdown} from '../../budget/planning/budgetList/styles.ts';\nimport {ConfirmationModal} from '../../../shared/confirmationModal/confirmationModal.tsx';\nimport {ProceduralCostOverviewItem} from '../../../types/graphQL/proceduralCosts.ts';\nimport {useState} from 'react';\nimport {defaultDropdownOption, TypeOfFines} from '../fines/constants.tsx';\nimport {useDebounce} from '../../../utils/useDebounce.ts';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport useGetPropertyBenefitsConfiscations from '../../../services/graphQL/propertyBenefitsConfiscation/useGetPropertyBenefitsConfiscation.ts';\nimport useDeletePropertyBenefitsConfiscation from '../../../services/graphQL/propertyBenefitsConfiscation/useDeletePropertyBenefitsConfiscation.ts';\n\nconst initialValues = {\n  property_benefits_confiscation_type_id: defaultDropdownOption.id,\n};\nconst ConfiscationOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [search, setSearch] = useState('');\n  const [showDeleteProceduralCostModal, setShowDeleteProceduralCostModal] = useState<number | null>(null);\n\n  const debouncedSearch = useDebounce(search, 500);\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n\n  const {propertyBenefitsConfiscations, total, refetch, loading} = useGetPropertyBenefitsConfiscations({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n    search: debouncedSearch,\n  });\n\n  const {deletePropertyBenefitsConfiscation} = useDeletePropertyBenefitsConfiscation();\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const filterDropdownOptions = [defaultDropdownOption, ...TypeOfFines] || [];\n\n  const handleDeleteProceduralCost = async () => {\n    if (!showDeleteProceduralCostModal) return;\n    await deletePropertyBenefitsConfiscation(\n      showDeleteProceduralCostModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeleteProceduralCostModal(null);\n  };\n\n  return (\n    <>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            name=\"property_benefits_confiscation_type_id\"\n            value={filterDropdownOptions.find(option => option.id === filters?.property_benefits_confiscation_type_id)}\n            onChange={(value: any) => onFilterChange(value, 'property_benefits_confiscation_type_id')}\n            label=\"VRSTA TROŠKOVA POSTUPKA:\"\n            options={filterDropdownOptions}\n          />\n\n          <FilterInput\n            label=\"PRETRAGA:\"\n            rightContent={<SearchIcon />}\n            name=\"search\"\n            onChange={onSearch}\n            value={search}\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={tableHeadsConfiscationOverview}\n        data={propertyBenefitsConfiscations}\n        isLoading={loading}\n        style={{marginBottom: 22}}\n        emptyMessage={'Još uvjek nema podataka o oduzimanju imovine'}\n        onRowClick={(row: ProceduralCostOverviewItem) => navigate(`/finance/fines-taxes/confiscation/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteProceduralCostModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteProceduralCostModal}\n        subTitle={'Ovo oduzimanje imovinske koristi će biti trajno izbrisano iz sistema.'}\n        onClose={() => setShowDeleteProceduralCostModal(null)}\n        onConfirm={() => handleDeleteProceduralCost()}\n      />\n    </>\n  );\n};\n\nexport default ConfiscationOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/form/propertyBenefitsConfiscationForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3763,3766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3763,3766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is assigned a value but never used.","line":89,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'court_account' is assigned a value but never used.","line":90,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":91,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":92,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":93,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":94,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'property_benefits_confiscation_details' is assigned a value but never used.","line":95,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4711,4714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4711,4714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Datepicker, Input, Typography, FileUpload, Button, Theme} from 'client-library';\nimport {Container, Row} from '../../taxes/addFee/styles.ts';\nimport {actTypeOptions, generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport Footer from '../../../../shared/footer.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList.tsx';\nimport {optionsNumberSchema} from '../../../../utils/formSchemas.ts';\nimport {\n  PropertyBenefitsConfiscationOverviewItem,\n  PropertyBenefitsConfiscationForm,\n} from '../../../../types/graphQL/propertyBenefitsConfiscation.ts';\nimport useInsertPropertyBenefitsConfiscation from '../../../../services/graphQL/propertyBenefitsConfiscation/useInsertPropertyBenefitsConfiscation.ts';\n\nconst propertyBenefitsConfiscationSchema = yup.object().shape({\n  property_benefits_confiscation_type: optionsNumberSchema.required(requiredError).default(null),\n  decision_number: yup.string().required(requiredError),\n  decision_date: yup.date().required(requiredError),\n  subject: yup.string().required(requiredError),\n  jmbg: yup\n    .string()\n    .matches(/^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])(\\d{3})(2[1-9]|29)\\d{3}\\d{1}$/, 'Neispravan JMBG format')\n    .length(13, 'JMBG mora da ima 13 cifara')\n    .required(requiredError),\n  account_id: optionsNumberSchema.required(requiredError).default(null),\n  residence: yup.string().required(requiredError),\n  amount: yup.number().typeError('Morate unijeti broj').required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  execution_date: yup.date().required(requiredError),\n  payment_deadline_date: yup.date().required(requiredError),\n  court_costs: yup.number().optional(),\n  description: yup.string(),\n  court_account_id: optionsNumberSchema.nullable().default(null),\n});\n\nconst defaultValues = {\n  property_benefits_confiscation_type: undefined,\n  decision_number: '',\n  decision_date: undefined,\n  subject: '',\n  jmbg: '',\n  account_id: undefined,\n  residence: '',\n  amount: 0,\n  payment_reference_number: '',\n  debit_reference_number: '',\n  execution_date: undefined,\n  payment_deadline_date: undefined,\n  court_costs: 0,\n  description: '',\n  court_account_id: undefined,\n};\n\ntype PropertyBenefitsConfiscationEntryForm = yup.InferType<typeof propertyBenefitsConfiscationSchema>;\ninterface PropertyBenefitsConfiscationFormProps {\n  property_benefits_confiscation?: PropertyBenefitsConfiscationOverviewItem;\n}\nconst PropertyBenefitsConfiscationForm = ({property_benefits_confiscation}: PropertyBenefitsConfiscationFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n  } = useForm<PropertyBenefitsConfiscationEntryForm>({\n    resolver: yupResolver(propertyBenefitsConfiscationSchema),\n    defaultValues: defaultValues,\n  });\n  const [uploadedFile, setUploadedFile] = useState<FileList>();\n  const {counts} = useGetCountOverview({});\n  const {insertPropertyBenefitsConfiscation, loading} = useInsertPropertyBenefitsConfiscation();\n  const {\n    alert,\n    fileService: {uploadFile},\n    navigation: {navigate},\n  } = useAppContext();\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n  const onSubmit = async (data: any) => {\n    const {\n      account,\n      court_account,\n      created_at,\n      updated_at,\n      file,\n      status,\n      property_benefits_confiscation_details,\n      ...rest\n    } = data;\n    let payload: PropertyBenefitsConfiscationForm = {\n      ...rest,\n      amount: Number(data.amount),\n      court_costs: Number(data.court_costs),\n      property_benefits_confiscation_type: data.property_benefits_confiscation_type.id,\n      account_id: data.account_id.id,\n      court_account_id: data.court_account_id?.id,\n      decision_date: parseDateForBackend(data.decision_date),\n      execution_date: parseDateForBackend(data.execution_date),\n      payment_deadline_date: parseDateForBackend(data.payment_deadline_date),\n    };\n\n    if (uploadedFile) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFile);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFile(undefined);\n          payload = {...payload, file: [res[0]?.id]};\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n\n      insertOrUpdatePropertyBenefitsConfiscation(payload);\n    } else {\n      insertOrUpdatePropertyBenefitsConfiscation(payload);\n    }\n  };\n\n  useEffect(() => {\n    if (property_benefits_confiscation) {\n      reset({\n        ...property_benefits_confiscation,\n        property_benefits_confiscation_type: actTypeOptions.find(\n          option => option?.id === property_benefits_confiscation.property_benefits_confiscation_type?.id,\n        ),\n        account_id: countsDropdownOptions?.find(count => count?.id === property_benefits_confiscation.account?.id),\n        court_account_id: countsDropdownOptions?.find(\n          count => count?.id === property_benefits_confiscation.court_account?.id,\n        ),\n        decision_date: new Date(property_benefits_confiscation.decision_date),\n        payment_deadline_date: new Date(property_benefits_confiscation.payment_deadline_date),\n        execution_date: new Date(property_benefits_confiscation.execution_date),\n      });\n    }\n  }, [property_benefits_confiscation]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n  };\n\n  const insertOrUpdatePropertyBenefitsConfiscation = async (payload: PropertyBenefitsConfiscationForm) => {\n    // update property benefits confiscation\n    if (property_benefits_confiscation && property_benefits_confiscation.id) {\n      const updatedPayload = {...payload, id: property_benefits_confiscation.id};\n\n      await insertPropertyBenefitsConfiscation(\n        updatedPayload,\n        () => {\n          alert.success('Oduzimanje imovinske koristi uspješno izmijenjeno');\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom izmjene oduzimanja imovinske koristi');\n        },\n      );\n      return;\n    }\n\n    // create procedural cost\n    await insertPropertyBenefitsConfiscation(\n      payload,\n      id => {\n        navigate(`/finance/fines-taxes/confiscation/${id}`);\n        alert.success('Oduzimanje imovinske koristi uspješno kreirano');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom kreiranja oduzimanja imovinske koristi');\n      },\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Controller\n          name=\"property_benefits_confiscation_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"VRSTA AKTA:\"\n              placeholder={'Odaberite vrstu oduzimanja imovinske koristi'}\n              options={actTypeOptions}\n              isRequired\n              error={errors.property_benefits_confiscation_type?.message}\n            />\n          )}\n        />\n        <Input {...register('subject')} label=\"SUBJEKAT:\" isRequired error={errors.subject?.message} />\n      </Row>\n      <Row>\n        <Input {...register('jmbg')} label=\"JMBG:\" isRequired error={errors.jmbg?.message} />\n        <Input {...register('residence')} label=\"PREBIVALIŠTE:\" isRequired error={errors.residence?.message} />\n      </Row>\n      <Row>\n        <Input\n          {...register('decision_number')}\n          label=\"BROJ RJEŠENJA / PRESUDE:\"\n          isRequired\n          error={errors.decision_number?.message}\n        />\n        <Controller\n          name={'decision_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM RJEŠENJA / PRESUDE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.decision_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('debit_reference_number')}\n          label=\"POZIV NA BROJ ZADUŽENJA:\"\n          isRequired\n          error={errors.debit_reference_number?.message}\n        />\n        <Input\n          {...register('payment_reference_number')}\n          label=\"POZIV NA BROJ ODOBRENJA:\"\n          isRequired\n          error={errors.payment_reference_number?.message}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('amount')}\n          label=\"VISINA KAZNE:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          isRequired\n          error={errors.amount?.message}\n        />\n        <Input\n          value={property_benefits_confiscation?.property_benefits_confiscation_details.amount_grace_period.toFixed(2)}\n          label={`2/3 KAZNE - UKOLIKO UPLATITE DO ${parseDate(\n            property_benefits_confiscation?.property_benefits_confiscation_details.amount_grace_period_due_date ?? null,\n          )}`}\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div style={{color: Theme.palette.gray300}}>€</div>}\n          disabled\n        />\n      </Row>\n      <Row>\n        <Controller\n          name=\"account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO:\"\n              placeholder={'Odaberite konto'}\n              options={countsDropdownOptions}\n              isRequired\n              error={errors.account_id?.message}\n            />\n          )}\n        />\n        <Input\n          {...register('court_costs')}\n          label=\"SUDSKI TROŠKOVI:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          style={{flexGrow: 1 / 2}}\n        />\n        <Controller\n          name=\"court_account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO ZA SUDSKE TROŠKOVE:\"\n              placeholder={'Odaberite konto za sudske troškove'}\n              options={countsDropdownOptions}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Controller\n          name={'payment_deadline_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"ROK ZA PLAĆANJE UKUPNOG TROŠKA POSTUPKA:\"\n              onChange={onChange}\n              isRequired\n              error={errors.payment_deadline_date?.message}\n            />\n          )}\n        />\n        <Controller\n          name={'execution_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI:\"\n              onChange={onChange}\n              isRequired\n              error={errors.execution_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input {...register('description')} label=\"OPIS:\" textarea />\n      </Row>\n\n      <Row>\n        <FileUpload\n          icon={null}\n          files={uploadedFile}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n        />\n        <FileList files={(property_benefits_confiscation?.file && property_benefits_confiscation?.file) ?? []} />\n      </Row>\n      <Footer>\n        <Button content=\"Odustani\" variant=\"secondary\" style={{width: 130}} onClick={() => reset()} />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={loading} />\n      </Footer>\n    </Container>\n  );\n};\n\nexport default PropertyBenefitsConfiscationForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/paymentDetails/paymentDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4867,4870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4867,4870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":153,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":153,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5830,5831],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalID' is assigned a value but never used.","line":154,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":154,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":154,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":154,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Typography,\n  Table,\n  TableHead,\n  Dropdown,\n  Input,\n  Datepicker,\n  EditIconTwo,\n  Theme,\n  TrashIcon,\n  CheckIcon,\n  CloseIcon,\n} from 'client-library';\nimport {Amount, FinePaymentDetailsWrapper, LabeledDivider} from './styles.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {useEffect, useState} from 'react';\nimport {requiredError} from '../../../../constants.ts';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport useInsertPropertyBenefitsConfiscationPayment from '../../../../services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useInsertPropertyBenefitsConfiscationPayment.ts';\nimport useDeletePropertyBenefitsConfiscationPayment from '../../../../services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useDeletePropertyBenefitsConfiscationPayment.ts';\nimport {\n  PropertyBenefitsConfiscationDetails,\n  PropertyBenefitsConfiscationOverviewItem,\n} from '../../../../types/graphQL/propertyBenefitsConfiscation.ts';\nimport {FinePaymentMethods} from '../../fines/constants.tsx';\nimport useGetPropertyBenefitsConfiscationPayments from '../../../../services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useGetPropertyBenefitsConfiscationPayments.ts';\n\nconst singlePaymentSchema = yup.object().shape({\n  id: yup.number().required(requiredError),\n  payment_method: yup.object().shape({\n    id: yup.number().required(),\n    title: yup.string().required(requiredError),\n  }),\n  amount: yup.number().required(requiredError).min(1, 'Iznos mora biti veći od 0'),\n  payment_date: yup.date().required(requiredError),\n  receipt_number: yup.string().required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  originalID: yup.number().required(requiredError),\n  property_benefits_confiscation_id: yup.number().required(),\n  created_at: yup.string().optional(),\n  updated_at: yup.string().optional(),\n  status: yup.object().shape({\n    id: yup.number().optional(),\n    title: yup.string().optional(),\n  }),\n});\n\nconst paymentsSchema = yup.object().shape({\n  payments: yup.array().of(singlePaymentSchema),\n});\n\ntype PaymentEntryForm = yup.InferType<typeof paymentsSchema>;\ntype PaymentRow = yup.InferType<typeof singlePaymentSchema>;\n\ninterface PaymentFormProps {\n  property_benefits_confiscation: PropertyBenefitsConfiscationOverviewItem;\n  refetchPropertyBenefitsConfiscation: () => Promise<void>;\n}\nconst PaymentDetails = ({property_benefits_confiscation, refetchPropertyBenefitsConfiscation}: PaymentFormProps) => {\n  const propBenConfDetails: PropertyBenefitsConfiscationDetails =\n    property_benefits_confiscation?.property_benefits_confiscation_details;\n  const {payments, refetch} = useGetPropertyBenefitsConfiscationPayments(property_benefits_confiscation?.id);\n  const {insertPropertyBenefitsConfiscationPayment} = useInsertPropertyBenefitsConfiscationPayment();\n  const {deletePropertyBenefitsConfiscationPayment} = useDeletePropertyBenefitsConfiscationPayment();\n  const {alert} = useAppContext();\n\n  const [editRowId, setEditRowId] = useState<number | null>(null);\n  const [showDeletePaymentModal, setShowDeletePaymentModal] = useState<number | null>(null);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    formState: {errors},\n    setError,\n  } = useForm<PaymentEntryForm>({});\n\n  const {fields, append, remove} = useFieldArray({name: 'payments', control});\n  const appendLastRow = () =>\n    append({\n      id: 0,\n      payment_method: {\n        id: 0,\n        title: '',\n      },\n      amount: 0,\n      payment_date: new Date(),\n      receipt_number: '',\n      payment_reference_number: '',\n      debit_reference_number: '',\n      originalID: 0,\n      property_benefits_confiscation_id: property_benefits_confiscation.id,\n      status: {\n        id: 0,\n        title: '',\n      },\n    });\n\n  useEffect(() => {\n    remove();\n    if (payments.length) {\n      payments.forEach(payment => {\n        append({\n          ...payment,\n          // need to save original id to be able to edit/delete the payment because useFieldArray will change it\n          originalID: payment.id,\n          payment_method: FinePaymentMethods.find(method => method.title === payment.payment_method.title) ?? {\n            id: 0,\n            title: '',\n          },\n          payment_date: new Date(payment?.payment_date),\n        });\n      });\n      appendLastRow();\n      return;\n    }\n\n    appendLastRow();\n  }, [payments]);\n\n  const isRowDisabled = (row: any) => {\n    return editRowId ? editRowId !== row.originalID : !!row.originalID;\n  };\n\n  const validateSingleRow = async (rowData: PaymentRow, id: number) => {\n    try {\n      // Validate using Yup directly\n      await singlePaymentSchema.validate(rowData, {abortEarly: false});\n      return true; // Validation passed\n    } catch (err) {\n      if (err instanceof yup.ValidationError) {\n        err.inner.forEach(error => {\n          setError(`payments.${id}.${error.path}` as never, {type: 'manual', message: error.message});\n        });\n      }\n    }\n  };\n\n  const handleSubmitPayment = async (data: PaymentEntryForm) => {\n    if (data.payments?.length) {\n      const test = data.payments?.findIndex(item => item.originalID === editRowId);\n      const selectedRow = test != -1 ? test : fields.length - 1;\n\n      const isValid = await validateSingleRow(data?.payments[selectedRow], selectedRow);\n\n      if (!isValid) return;\n\n      const payment = data.payments![selectedRow];\n      const {originalID, created_at, updated_at, status, ...updatedPayment} = payment;\n      const parsedPaymentDate = parseDateForBackend(payment.payment_date);\n      if (!parsedPaymentDate) return;\n\n      const payload = {\n        ...updatedPayment,\n        payment_method: payment.payment_method.id,\n        payment_date: parsedPaymentDate,\n      };\n      await insertPropertyBenefitsConfiscationPayment(\n        payload,\n        () => {\n          refetch();\n          refetchPropertyBenefitsConfiscation();\n          alert.success('Uspješno sačuvano.');\n          setEditRowId(null);\n        },\n        () => alert?.error('Greška. Promjene nisu sačuvane.'),\n      );\n    }\n  };\n\n  const handleDeletePayment = async () => {\n    const paymentIndex = payments.findIndex(payment => payment.id === showDeletePaymentModal);\n    if (!showDeletePaymentModal || paymentIndex === -1) return;\n    await deletePropertyBenefitsConfiscationPayment(\n      showDeletePaymentModal,\n      () => {\n        remove(paymentIndex);\n        refetchPropertyBenefitsConfiscation();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeletePaymentModal(null);\n  };\n\n  const tableHeadsPayments: TableHead[] = [\n    {\n      title: 'Način plaćanja',\n      accessor: 'payment_method',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_method`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Dropdown\n                style={{width: '180px'}}\n                name={name}\n                onChange={onChange}\n                value={value ?? FinePaymentMethods.find(method => method.title === value)}\n                options={FinePaymentMethods}\n                isDisabled={isRowDisabled(row)}\n                error={isRowDisabled(row) ? '' : errors?.payments?.[index]?.payment_method?.title?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.amount`)}\n            type=\"number\"\n            leftContent={\n              <div style={{color: isRowDisabled(row) ? Theme.palette.gray300 : Theme.palette.gray800}}>€</div>\n            }\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Datum uplate',\n      accessor: 'payment_date',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_date`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Datepicker\n                name={name}\n                onChange={onChange}\n                selected={value ? new Date(value) : ''}\n                disabled={isRowDisabled(row)}\n                error={errors?.payments?.[index]?.payment_date?.message}\n                popperProps={{\n                  strategy: 'fixed', // fixes datepicker going behind other elements\n                  placement: 'top',\n                }}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Broj izvoda',\n      accessor: 'receipt_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.receipt_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.receipt_number?.message}\n            key={`payments.${index}.receipt_number`}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj odobrenja',\n      accessor: 'payment_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.payment_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.payment_reference_number?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj zaduženja',\n      accessor: 'debit_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.debit_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.debit_reference_number?.message}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  return (\n    <>\n      <Amount style={{marginTop: 10}}>\n        <Typography style={{fontWeight: 600, marginBottom: 10}} variant={'bodySmall'} content={'Platiti do:'} />\n        <Typography variant=\"bodySmall\" content={parseDate(property_benefits_confiscation?.payment_deadline_date)} />\n      </Amount>\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"DETALJI PLAĆANJA:\" />\n      </LabeledDivider>\n      <Table\n        tableHeads={tableHeadsPayments}\n        data={fields}\n        tableActions={[\n          {\n            name: 'Otkaži',\n            onClick: () => setEditRowId(null),\n            icon: <CloseIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Plati',\n\n            onClick: handleSubmit(handleSubmitPayment),\n            icon: <CheckIcon stroke={Theme?.palette?.gray800} width={'20px'} height={'20px'} />,\n            shouldRender: row => !isRowDisabled(row) || !row.originalID,\n          },\n          {\n            name: 'Izmijeni',\n            onClick: row => setEditRowId(row.originalID),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Izbriši',\n            onClick: row => setShowDeletePaymentModal(row.originalID),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !!row.originalID && (!editRowId || editRowId !== row.originalID),\n          },\n        ]}\n      />\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPNO:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={`${propBenConfDetails?.all_payments_amount + propBenConfDetails?.court_costs_paid} €`}\n          />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      {/*<Amount>*/}\n      {/*  <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREMAŠEN IZNOS:\" />*/}\n      {/*  <Typography variant=\"bodySmall\" content={`${fine?.amount} €`} />*/}\n      {/*</Amount>*/}\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREGLED PLAĆANJA:\" />\n      </LabeledDivider>\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${property_benefits_confiscation?.amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${propBenConfDetails?.all_payments_amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UMANJENJE KAZNE:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={\n              propBenConfDetails?.amount_grace_period_available\n                ? roundCurrency(property_benefits_confiscation?.amount - propBenConfDetails?.amount_grace_period)\n                : '0.00 €'\n            }\n          />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(propBenConfDetails?.left_to_pay_amount)} />\n        </Amount>\n        <Amount style={{marginTop: 20}}>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${property_benefits_confiscation?.court_costs} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${propBenConfDetails?.court_costs_paid} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(propBenConfDetails?.court_costs_left_to_pay_amount)} />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      <ConfirmationModal\n        open={!!showDeletePaymentModal}\n        subTitle={'Ova uplata će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeletePaymentModal(null)}\n        onConfirm={() => handleDeletePayment()}\n      />\n    </>\n  );\n};\n\nexport default PaymentDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/paymentDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/paymentDetails/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/propertyBenefitsConfiscationDetails/propertyBenefitsConfiscationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/addFine/addFine.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/addFine/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/fineDetails/fineDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/fines.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/finesOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1946,1949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1946,1949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2408,2411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2408,2411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {useState} from 'react';\nimport {FilterDropdown, FilterInput, Filters} from '../../../screens/budget/planning/budgetList/styles.ts';\nimport {PAGE_SIZE} from '../../../constants.ts';\nimport useGetFines from '../../../services/graphQL/fines/useGetFines.ts';\nimport {useDebounce} from '../../../utils/useDebounce.ts';\nimport {Header} from './styles.ts';\nimport {TypeOfFines, tableHeadsFinesOverview, defaultDropdownOption} from './constants.tsx';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport {FinesOverviewItem} from '../../../types/graphQL/finesOverview.ts';\nimport useDeleteFine from '../../../services/graphQL/fines/useDeleteFine.ts';\nimport {ConfirmationModal} from '../../../shared/confirmationModal/confirmationModal.tsx';\n\nconst initialValues = {\n  act_type_id: defaultDropdownOption.id,\n};\n\nconst FinesOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [search, setSearch] = useState('');\n  const [showDeleteFineModal, setShowDeleteFineModal] = useState<number | null>(null);\n\n  const debouncedSearch = useDebounce(search, 500);\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n\n  const {fines, total, refetch, loading} = useGetFines({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n    search: debouncedSearch || undefined,\n  });\n  const {deleteFine} = useDeleteFine();\n\n  const handleDeleteFine = async () => {\n    if (!showDeleteFineModal) return;\n    await deleteFine(\n      showDeleteFineModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeleteFineModal(null);\n  };\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const filterDropdownOptions = [defaultDropdownOption, ...TypeOfFines] || [];\n\n  return (\n    <>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            name=\"act_type_id\"\n            value={filterDropdownOptions.find(option => option.id === filters?.act_type_id)}\n            onChange={(value: any) => onFilterChange(value, 'act_type_id')}\n            label=\"VRSTA KAZNE:\"\n            options={filterDropdownOptions}\n          />\n\n          <FilterInput\n            label=\"PRETRAGA:\"\n            rightContent={<SearchIcon />}\n            name=\"search\"\n            onChange={onSearch}\n            value={search}\n          />\n        </Filters>\n      </Header>\n      <Table\n        isLoading={loading}\n        tableHeads={tableHeadsFinesOverview}\n        data={fines}\n        style={{marginBottom: 22}}\n        emptyMessage={'Još uvjek nema kazni'}\n        onRowClick={(row: FinesOverviewItem) => navigate(`/finance/fines-taxes/fines/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteFineModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteFineModal}\n        subTitle={'Ova kazna će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeleteFineModal(null)}\n        onConfirm={() => handleDeleteFine()}\n      />\n    </>\n  );\n};\n\nexport default FinesOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/form/fineForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3295,3298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3295,3298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is assigned a value but never used.","line":83,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'court_account' is assigned a value but never used.","line":83,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":83,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":83,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":83,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":83,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fine_fee_details' is assigned a value but never used.","line":83,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":90},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4089,4092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4089,4092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Datepicker, Input, Typography, FileUpload, Button, Theme} from 'client-library';\nimport {Container, Row} from '../../taxes/addFee/styles.ts';\nimport {actTypeOptions, generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport Footer from '../../../../shared/footer.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useInsertFine from '../../../../services/graphQL/fines/useInsertFine.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {FineForm} from '../../../../types/graphQL/fineForm.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList.tsx';\nimport {FinesOverviewItem} from '../../../../types/graphQL/finesOverview.ts';\nimport {optionsNumberSchema} from '../../../../utils/formSchemas.ts';\n\nconst fineSchema = yup.object().shape({\n  act_type: optionsNumberSchema.required(requiredError).default(null),\n  decision_number: yup.string().required(requiredError),\n  decision_date: yup.date().required(requiredError),\n  subject: yup.string().required(requiredError),\n  jmbg: yup\n    .string()\n    .matches(/^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])(\\d{3})(2[1-9]|29)\\d{3}\\d{1}$/, 'Neispravan JMBG format')\n    .length(13, 'JMBG mora da ima 13 cifara')\n    .required(requiredError),\n  account_id: optionsNumberSchema.required(requiredError).default(null),\n  residence: yup.string().required(requiredError),\n  amount: yup.number().typeError('Morate unijeti broj').required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  execution_date: yup.date().required(requiredError),\n  payment_deadline_date: yup.date().required(requiredError),\n  court_costs: yup.number().optional(),\n  description: yup.string(),\n  court_account_id: optionsNumberSchema.nullable().default(null),\n});\n\nconst defaultValues = {\n  act_type: undefined,\n  decision_number: '',\n  decision_date: undefined,\n  subject: '',\n  jmbg: '',\n  account_id: undefined,\n  residence: '',\n  amount: 0,\n  payment_reference_number: '',\n  debit_reference_number: '',\n  execution_date: undefined,\n  payment_deadline_date: undefined,\n  court_costs: 0,\n  description: '',\n  court_account_id: undefined,\n};\n\ntype FineEntryForm = yup.InferType<typeof fineSchema>;\ninterface FineFormProps {\n  fine?: FinesOverviewItem;\n}\nconst FineForm = ({fine}: FineFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n  } = useForm<FineEntryForm>({resolver: yupResolver(fineSchema), defaultValues: defaultValues});\n  const [uploadedFile, setUploadedFile] = useState<FileList>();\n  const {counts} = useGetCountOverview({});\n  const {insertFine, loading} = useInsertFine();\n  const {\n    alert,\n    fileService: {uploadFile},\n    navigation: {navigate},\n  } = useAppContext();\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n  const onSubmit = async (data: any) => {\n    const {account, court_account, created_at, updated_at, file, status, fine_fee_details, ...rest} = data;\n    let payload: FineForm = {\n      ...rest,\n      amount: Number(data.amount),\n      court_costs: Number(data.court_costs),\n      act_type: data.act_type.id,\n      account_id: data.account_id.id,\n      court_account_id: data.court_account_id?.id,\n      decision_date: parseDateForBackend(data.decision_date),\n      execution_date: parseDateForBackend(data.execution_date),\n      payment_deadline_date: parseDateForBackend(data.payment_deadline_date),\n    };\n\n    if (uploadedFile) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFile);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFile(undefined);\n          payload = {...payload, file: [res[0]?.id]};\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n\n      insertOrUpdateFine(payload);\n    } else {\n      insertOrUpdateFine(payload);\n    }\n  };\n\n  useEffect(() => {\n    if (fine) {\n      reset({\n        ...fine,\n        act_type: actTypeOptions.find(option => option?.id === fine.act_type?.id),\n        account_id: countsDropdownOptions?.find(count => count?.id === fine.account?.id),\n        court_account_id: countsDropdownOptions?.find(count => count?.id === fine.court_account?.id),\n        decision_date: new Date(fine.decision_date),\n        payment_deadline_date: new Date(fine.payment_deadline_date),\n        execution_date: new Date(fine.execution_date),\n      });\n    }\n  }, [fine]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n  };\n\n  const insertOrUpdateFine = async (payload: FineForm) => {\n    // update fine\n    if (fine && fine.id) {\n      const updatedPayload = {...payload, id: fine.id};\n\n      await insertFine(\n        updatedPayload,\n        () => {\n          alert.success('Kazna uspješno izmijenjena');\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom izmjene kazne');\n        },\n      );\n      return;\n    }\n\n    // create fine\n    await insertFine(\n      payload,\n      id => {\n        navigate(`/finance/fines-taxes/fines/${id}`);\n        alert.success('Kazna uspješno kreirana');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom kreiranja kazne');\n      },\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Controller\n          name=\"act_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"VRSTA AKTA:\"\n              placeholder={'Odaberite vrstu akta'}\n              options={actTypeOptions}\n              isRequired\n              error={errors.act_type?.message}\n            />\n          )}\n        />\n        <Input {...register('subject')} label=\"SUBJEKAT:\" isRequired error={errors.subject?.message} />\n      </Row>\n      <Row>\n        <Input {...register('jmbg')} label=\"JMBG:\" isRequired error={errors.jmbg?.message} />\n        <Input {...register('residence')} label=\"PREBIVALIŠTE:\" isRequired error={errors.residence?.message} />\n      </Row>\n      <Row>\n        <Input\n          {...register('decision_number')}\n          label=\"BROJ RJEŠENJA / PRESUDE:\"\n          isRequired\n          error={errors.decision_number?.message}\n        />\n        <Controller\n          name={'decision_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM RJEŠENJA / PRESUDE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.decision_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('debit_reference_number')}\n          label=\"POZIV NA BROJ ZADUŽENJA:\"\n          isRequired\n          error={errors.debit_reference_number?.message}\n        />\n        <Input\n          {...register('payment_reference_number')}\n          label=\"POZIV NA BROJ ODOBRENJA:\"\n          isRequired\n          error={errors.payment_reference_number?.message}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('amount')}\n          label=\"VISINA KAZNE:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          isRequired\n          error={errors.amount?.message}\n        />\n        <Input\n          value={fine?.fine_fee_details.fee_amount_grace_period.toFixed(2)}\n          label={`2/3 KAZNE - UKOLIKO UPLATITE DO ${parseDate(\n            fine?.fine_fee_details.fee_amount_grace_period_due_date ?? null,\n          )}`}\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div style={{color: Theme.palette.gray300}}>€</div>}\n          disabled\n        />\n      </Row>\n      <Row>\n        <Controller\n          name=\"account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO:\"\n              placeholder={'Odaberite konto'}\n              options={countsDropdownOptions}\n              isRequired\n              error={errors.account_id?.message}\n            />\n          )}\n        />\n        <Input\n          {...register('court_costs')}\n          label=\"SUDSKI TROŠKOVI:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          style={{flexGrow: 1 / 2}}\n        />\n        <Controller\n          name=\"court_account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO ZA SUDSKE TROŠKOVE:\"\n              placeholder={'Odaberite konto za sudske troškove'}\n              options={countsDropdownOptions}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Controller\n          name={'payment_deadline_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"ROK ZA PLAĆANJE UKUPNE KAZNE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.payment_deadline_date?.message}\n            />\n          )}\n        />\n        <Controller\n          name={'execution_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI:\"\n              onChange={onChange}\n              isRequired\n              error={errors.execution_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input {...register('description')} label=\"OPIS:\" textarea />\n      </Row>\n\n      <Row>\n        <FileUpload\n          icon={null}\n          files={uploadedFile}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n        />\n        <FileList files={(fine?.file && fine?.file) ?? []} />\n      </Row>\n      <Footer>\n        <Button content=\"Odustani\" variant=\"secondary\" style={{width: 130}} onClick={() => reset()} />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={loading} />\n      </Footer>\n    </Container>\n  );\n};\n\nexport default FineForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/paymentDetails/paymentDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4083,4086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4083,4086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5046,5047],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalID' is assigned a value but never used.","line":150,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":150,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":150,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":150,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Typography,\n  Table,\n  TableHead,\n  Dropdown,\n  Input,\n  Datepicker,\n  EditIconTwo,\n  Theme,\n  TrashIcon,\n  CheckIcon,\n  CloseIcon,\n} from 'client-library';\nimport {Amount, FinePaymentDetailsWrapper, LabeledDivider} from './styles.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {FineFeeDetails, FinesOverviewItem} from '../../../../types/graphQL/finesOverview.ts';\nimport useGetFinePayments from '../../../../services/graphQL/fines/finePayments/useGetFinePayments.ts';\nimport {useEffect, useState} from 'react';\nimport {requiredError} from '../../../../constants.ts';\nimport {FinePaymentMethods} from '../constants.tsx';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport useInsertFinePayment from '../../../../services/graphQL/fines/finePayments/useInsertFinePayment.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport useDeleteFinePayment from '../../../../services/graphQL/fines/finePayments/useDeleteFinePayment.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\n\nconst singlePaymentSchema = yup.object().shape({\n  id: yup.number().required(requiredError),\n  payment_method: yup.object().shape({\n    id: yup.number().required(),\n    title: yup.string().required(requiredError),\n  }),\n  amount: yup.number().required(requiredError).min(1, 'Iznos mora biti veći od 0'),\n  payment_date: yup.date().required(requiredError),\n  receipt_number: yup.string().required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  originalID: yup.number().required(requiredError),\n  fine_id: yup.number().required(),\n  created_at: yup.string().optional(),\n  updated_at: yup.string().optional(),\n  status: yup.object().shape({\n    id: yup.number().optional(),\n    title: yup.string().optional(),\n  }),\n});\n\nconst paymentsSchema = yup.object().shape({\n  payments: yup.array().of(singlePaymentSchema),\n});\n\ntype PaymentEntryForm = yup.InferType<typeof paymentsSchema>;\ntype PaymentRow = yup.InferType<typeof singlePaymentSchema>;\n\ninterface PaymentFormProps {\n  fine: FinesOverviewItem;\n  refetchFine: () => Promise<void>;\n}\nconst PaymentDetails = ({fine, refetchFine}: PaymentFormProps) => {\n  const fineFeeDetails: FineFeeDetails = fine?.fine_fee_details;\n  const {payments, refetch} = useGetFinePayments(fine?.id);\n  const {insertFinePayment} = useInsertFinePayment();\n  const {deleteFinePayment} = useDeleteFinePayment();\n  const {alert} = useAppContext();\n\n  const [editRowId, setEditRowId] = useState<number | null>(null);\n  const [showDeletePaymentModal, setShowDeletePaymentModal] = useState<number | null>(null);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    formState: {errors},\n    setError,\n  } = useForm<PaymentEntryForm>({});\n\n  const {fields, append, remove} = useFieldArray({name: 'payments', control});\n  const appendLastRow = () =>\n    append({\n      id: 0,\n      payment_method: {\n        id: 0,\n        title: '',\n      },\n      amount: 0,\n      payment_date: new Date(),\n      receipt_number: '',\n      payment_reference_number: '',\n      debit_reference_number: '',\n      originalID: 0,\n      fine_id: fine.id,\n      status: {\n        id: 0,\n        title: '',\n      },\n    });\n\n  useEffect(() => {\n    remove();\n    if (payments.length) {\n      payments.forEach(payment => {\n        append({\n          ...payment,\n          // need to save original id to be able to edit/delete the payment because useFieldArray will change it\n          originalID: payment.id,\n          payment_method: FinePaymentMethods.find(method => method.title === payment.payment_method.title) ?? {\n            id: 0,\n            title: '',\n          },\n          payment_date: new Date(payment?.payment_date),\n        });\n      });\n      appendLastRow();\n      return;\n    }\n\n    appendLastRow();\n  }, [payments]);\n\n  const isRowDisabled = (row: any) => {\n    return editRowId ? editRowId !== row.originalID : !!row.originalID;\n  };\n\n  const validateSingleRow = async (rowData: PaymentRow, id: number) => {\n    try {\n      // Validate using Yup directly\n      await singlePaymentSchema.validate(rowData, {abortEarly: false});\n      return true; // Validation passed\n    } catch (err) {\n      if (err instanceof yup.ValidationError) {\n        err.inner.forEach(error => {\n          setError(`payments.${id}.${error.path}` as never, {type: 'manual', message: error.message});\n        });\n      }\n    }\n  };\n\n  const handleSubmitPayment = async (data: PaymentEntryForm) => {\n    if (data.payments?.length) {\n      const test = data.payments?.findIndex(item => item.originalID === editRowId);\n      const selectedRow = test != -1 ? test : fields.length - 1;\n\n      const isValid = await validateSingleRow(data?.payments[selectedRow], selectedRow);\n\n      if (!isValid) return;\n\n      const payment = data.payments![selectedRow];\n      const {originalID, created_at, updated_at, status, ...updatedPayment} = payment;\n      const parsedPaymentDate = parseDateForBackend(payment.payment_date);\n      if (!parsedPaymentDate) return;\n\n      const payload = {\n        ...updatedPayment,\n        payment_method: payment.payment_method.id,\n        payment_date: parsedPaymentDate,\n      };\n      await insertFinePayment(\n        payload,\n        () => {\n          refetch();\n          refetchFine();\n          alert.success('Uspješno sačuvano.');\n          setEditRowId(null);\n        },\n        () => alert?.error('Greška. Promjene nisu sačuvane.'),\n      );\n    }\n  };\n\n  const handleDeletePayment = async () => {\n    const paymentIndex = payments.findIndex(payment => payment.id === showDeletePaymentModal);\n    if (!showDeletePaymentModal || paymentIndex === -1) return;\n    await deleteFinePayment(\n      showDeletePaymentModal,\n      () => {\n        remove(paymentIndex);\n        refetchFine();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeletePaymentModal(null);\n  };\n\n  const tableHeadsPayments: TableHead[] = [\n    {\n      title: 'Način plaćanja',\n      accessor: 'payment_method',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_method`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Dropdown\n                style={{width: '180px'}}\n                name={name}\n                onChange={onChange}\n                value={value ?? FinePaymentMethods.find(method => method.title === value)}\n                options={FinePaymentMethods}\n                isDisabled={isRowDisabled(row)}\n                error={isRowDisabled(row) ? '' : errors?.payments?.[index]?.payment_method?.title?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.amount`)}\n            type=\"number\"\n            leftContent={\n              <div style={{color: isRowDisabled(row) ? Theme.palette.gray300 : Theme.palette.gray800}}>€</div>\n            }\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Datum uplate',\n      accessor: 'payment_date',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_date`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Datepicker\n                name={name}\n                onChange={onChange}\n                selected={value ? new Date(value) : ''}\n                disabled={isRowDisabled(row)}\n                error={errors?.payments?.[index]?.payment_date?.message}\n                popperProps={{\n                  strategy: 'fixed', // fixes datepicker going behind other elements\n                  placement: 'top',\n                }}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Broj izvoda',\n      accessor: 'receipt_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.receipt_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.receipt_number?.message}\n            key={`payments.${index}.receipt_number`}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj odobrenja',\n      accessor: 'payment_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.payment_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.payment_reference_number?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj zaduženja',\n      accessor: 'debit_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.debit_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.debit_reference_number?.message}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  return (\n    <>\n      <Amount style={{marginTop: 10}}>\n        <Typography style={{fontWeight: 600, marginBottom: 10}} variant={'bodySmall'} content={'Platiti do:'} />\n        <Typography variant=\"bodySmall\" content={parseDate(fine?.payment_deadline_date)} />\n      </Amount>\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"DETALJI PLAĆANJA:\" />\n      </LabeledDivider>\n      <Table\n        tableHeads={tableHeadsPayments}\n        data={fields}\n        tableActions={[\n          {\n            name: 'Otkaži',\n            onClick: () => setEditRowId(null),\n            icon: <CloseIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Plati',\n\n            onClick: handleSubmit(handleSubmitPayment),\n            icon: <CheckIcon stroke={Theme?.palette?.gray800} width={'20px'} height={'20px'} />,\n            shouldRender: row => !isRowDisabled(row) || !row.originalID,\n          },\n          {\n            name: 'Izmijeni',\n            onClick: row => setEditRowId(row.originalID),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Izbriši',\n            onClick: row => setShowDeletePaymentModal(row.originalID),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !!row.originalID && (!editRowId || editRowId !== row.originalID),\n          },\n        ]}\n      />\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPNO:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={`${fineFeeDetails?.fee_all_payments_amount + fineFeeDetails?.fee_court_costs_paid} €`}\n          />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      {/*<Amount>*/}\n      {/*  <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREMAŠEN IZNOS:\" />*/}\n      {/*  <Typography variant=\"bodySmall\" content={`${fine?.amount} €`} />*/}\n      {/*</Amount>*/}\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREGLED PLAĆANJA:\" />\n      </LabeledDivider>\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${fine?.amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${fineFeeDetails?.fee_all_payments_amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UMANJENJE KAZNE:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={\n              fineFeeDetails?.fee_amount_grace_period_available\n                ? roundCurrency(fine?.amount - fineFeeDetails?.fee_amount_grace_period)\n                : '0.00 €'\n            }\n          />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(fineFeeDetails?.fee_left_to_pay_amount)} />\n        </Amount>\n        <Amount style={{marginTop: 20}}>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${fine?.court_costs} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${fineFeeDetails?.fee_court_costs_paid} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(fineFeeDetails?.fee_court_costs_left_to_pay_amount)} />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      <ConfirmationModal\n        open={!!showDeletePaymentModal}\n        subTitle={'Ova uplata će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeletePaymentModal(null)}\n        onConfirm={() => handleDeletePayment()}\n      />\n    </>\n  );\n};\n\nexport default PaymentDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/paymentDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/paymentDetails/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/addFlatRate/addFlatRate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/addFlatRate/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/flatRate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/flatRateDetails/flatRateDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/flatRateOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2091,2094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2091,2094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2565,2568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2565,2568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {PAGE_SIZE} from '../../../constants.ts';\nimport {FilterInput} from '../../accounting/styles.tsx';\nimport {FilterDropdown, Filters} from '../../budget/planning/budgetList/styles.ts';\nimport {tableHeadsFlatRateOverview} from './constants.tsx';\nimport {Header} from './styles.ts';\nimport {defaultDropdownOption, TypeOfFines} from '../fines/constants.tsx';\nimport {useState} from 'react';\nimport {useDebounce} from '../../../utils/useDebounce.ts';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport useGetFlatRate from '../../../services/graphQL/flatRate/useGetFlatRate.ts';\nimport useDeleteFlatRate from '../../../services/graphQL/flatRate/useDeleteFlatRate.ts';\nimport {FlatRateOverviewItem} from '../../../types/graphQL/flatRate.ts';\nimport {ConfirmationModal} from '../../../shared/confirmationModal/confirmationModal.tsx';\n\nconst initialValues = {\n  flat_rate_type_id: defaultDropdownOption.id,\n};\n\nconst FlatRateOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [search, setSearch] = useState('');\n  const [showDeleteFlatRateModal, setShowDeleteFlatRateModal] = useState<number | null>(null);\n\n  const debouncedSearch = useDebounce(search, 500);\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n\n  const {flatRates, total, refetch, loading} = useGetFlatRate({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n    search: debouncedSearch || undefined,\n  });\n  const {deleteFlatRate} = useDeleteFlatRate();\n\n  const handleDeleteFlatRate = async () => {\n    if (!showDeleteFlatRateModal) return;\n    await deleteFlatRate(\n      showDeleteFlatRateModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeleteFlatRateModal(null);\n  };\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const filterDropdownOptions = [defaultDropdownOption, ...TypeOfFines] || [];\n\n  return (\n    <>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            name=\"flat_rate_type_id\"\n            value={filterDropdownOptions.find(option => option.id === filters?.flat_rate_type_id)}\n            onChange={(value: any) => onFilterChange(value, 'flat_rate_type_id')}\n            label=\"VRSTA PAUŠALA:\"\n            options={filterDropdownOptions}\n          />\n\n          <FilterInput\n            label=\"PRETRAGA:\"\n            rightContent={<SearchIcon />}\n            name=\"search\"\n            onChange={onSearch}\n            value={search}\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={tableHeadsFlatRateOverview}\n        data={flatRates}\n        isLoading={loading}\n        style={{marginBottom: 22}}\n        emptyMessage={'Još uvjek nema paušala'}\n        onRowClick={(row: FlatRateOverviewItem) => navigate(`/finance/fines-taxes/flat-rate/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteFlatRateModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteFlatRateModal}\n        subTitle={'Ovaj trošak postupka će biti trajno izbrisan iz sistema.'}\n        onClose={() => setShowDeleteFlatRateModal(null)}\n        onConfirm={() => handleDeleteFlatRate()}\n      />\n    </>\n  );\n};\n\nexport default FlatRateOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/form/flatRateForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3319,3322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3319,3322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is assigned a value but never used.","line":82,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'court_account' is assigned a value but never used.","line":82,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":82,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":82,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":82,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":82,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'flat_rate_details' is assigned a value but never used.","line":82,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":91},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4130,4133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4130,4133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Datepicker, Input, Typography, FileUpload, Button, Theme} from 'client-library';\nimport {Container, Row} from '../../taxes/addFee/styles.ts';\nimport {actTypeOptions, generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport Footer from '../../../../shared/footer.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList.tsx';\nimport {optionsNumberSchema} from '../../../../utils/formSchemas.ts';\nimport {FlatRateOverviewItem, FlatRateForm} from '../../../../types/graphQL/flatRate.ts';\nimport useInsertFlatRate from '../../../../services/graphQL/flatRate/useInsertFlatRate.ts';\n\nconst flatRateSchema = yup.object().shape({\n  flat_rate_type: optionsNumberSchema.required(requiredError).default(null),\n  decision_number: yup.string().required(requiredError),\n  decision_date: yup.date().required(requiredError),\n  subject: yup.string().required(requiredError),\n  jmbg: yup\n    .string()\n    .matches(/^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])(\\d{3})(2[1-9]|29)\\d{3}\\d{1}$/, 'Neispravan JMBG format')\n    .length(13, 'JMBG mora da ima 13 cifara')\n    .required(requiredError),\n  account_id: optionsNumberSchema.required(requiredError).default(null),\n  residence: yup.string().required(requiredError),\n  amount: yup.number().typeError('Morate unijeti broj').required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  execution_date: yup.date().required(requiredError),\n  payment_deadline_date: yup.date().required(requiredError),\n  court_costs: yup.number().optional(),\n  description: yup.string(),\n  court_account_id: optionsNumberSchema.nullable().default(null),\n});\n\nconst defaultValues = {\n  flat_rate_type: undefined,\n  decision_number: '',\n  decision_date: undefined,\n  subject: '',\n  jmbg: '',\n  account_id: undefined,\n  residence: '',\n  amount: 0,\n  payment_reference_number: '',\n  debit_reference_number: '',\n  execution_date: undefined,\n  payment_deadline_date: undefined,\n  court_costs: 0,\n  description: '',\n  court_account_id: undefined,\n};\n\ntype FlatRateEntryForm = yup.InferType<typeof flatRateSchema>;\ninterface FlatRateFormProps {\n  flat_rate?: FlatRateOverviewItem;\n}\nconst FlatRateForm = ({flat_rate}: FlatRateFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n  } = useForm<FlatRateEntryForm>({resolver: yupResolver(flatRateSchema), defaultValues: defaultValues});\n  const [uploadedFile, setUploadedFile] = useState<FileList>();\n  const {counts} = useGetCountOverview({});\n  const {insertFlatRate, loading} = useInsertFlatRate();\n  const {\n    alert,\n    fileService: {uploadFile},\n    navigation: {navigate},\n  } = useAppContext();\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n  const onSubmit = async (data: any) => {\n    const {account, court_account, created_at, updated_at, file, status, flat_rate_details, ...rest} = data;\n    let payload: FlatRateForm = {\n      ...rest,\n      amount: Number(data.amount),\n      court_costs: Number(data.court_costs),\n      flat_rate_type: data.flat_rate_type.id,\n      account_id: data.account_id.id,\n      court_account_id: data.court_account_id?.id,\n      decision_date: parseDateForBackend(data.decision_date),\n      execution_date: parseDateForBackend(data.execution_date),\n      payment_deadline_date: parseDateForBackend(data.payment_deadline_date),\n    };\n\n    if (uploadedFile) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFile);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFile(undefined);\n          payload = {...payload, file: [res[0]?.id]};\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n\n      insertOrUpdateFlatRate(payload);\n    } else {\n      insertOrUpdateFlatRate(payload);\n    }\n  };\n\n  useEffect(() => {\n    if (flat_rate) {\n      reset({\n        ...flat_rate,\n        flat_rate_type: actTypeOptions.find(option => option?.id === flat_rate.flat_rate_type?.id),\n        account_id: countsDropdownOptions?.find(count => count?.id === flat_rate.account?.id),\n        court_account_id: countsDropdownOptions?.find(count => count?.id === flat_rate.court_account?.id),\n        decision_date: new Date(flat_rate.decision_date),\n        payment_deadline_date: new Date(flat_rate.payment_deadline_date),\n        execution_date: new Date(flat_rate.execution_date),\n      });\n    }\n  }, [flat_rate]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n  };\n\n  const insertOrUpdateFlatRate = async (payload: FlatRateForm) => {\n    // update flat rate\n    if (flat_rate && flat_rate.id) {\n      const updatedPayload = {...payload, id: flat_rate.id};\n\n      await insertFlatRate(\n        updatedPayload,\n        () => {\n          alert.success('Paušal uspješno izmijenjen');\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom izmjene paušala');\n        },\n      );\n      return;\n    }\n\n    // create flat rate\n    await insertFlatRate(\n      payload,\n      id => {\n        navigate(`/finance/fines-taxes/flat-rate/${id}`);\n        alert.success('Paušal uspješno kreiran');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom kreiranja paušala');\n      },\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Controller\n          name=\"flat_rate_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"VRSTA AKTA:\"\n              placeholder={'Odaberite vrstu akta'}\n              options={actTypeOptions}\n              isRequired\n              error={errors.flat_rate_type?.message}\n            />\n          )}\n        />\n        <Input {...register('subject')} label=\"SUBJEKAT:\" isRequired error={errors.subject?.message} />\n      </Row>\n      <Row>\n        <Input {...register('jmbg')} label=\"JMBG:\" isRequired error={errors.jmbg?.message} />\n        <Input {...register('residence')} label=\"PREBIVALIŠTE:\" isRequired error={errors.residence?.message} />\n      </Row>\n      <Row>\n        <Input\n          {...register('decision_number')}\n          label=\"BROJ RJEŠENJA / PRESUDE:\"\n          isRequired\n          error={errors.decision_number?.message}\n        />\n        <Controller\n          name={'decision_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM RJEŠENJA / PRESUDE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.decision_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('debit_reference_number')}\n          label=\"POZIV NA BROJ ZADUŽENJA:\"\n          isRequired\n          error={errors.debit_reference_number?.message}\n        />\n        <Input\n          {...register('payment_reference_number')}\n          label=\"POZIV NA BROJ ODOBRENJA:\"\n          isRequired\n          error={errors.payment_reference_number?.message}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('amount')}\n          label=\"VISINA PAUŠALA:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          isRequired\n          error={errors.amount?.message}\n        />\n        <Input\n          value={flat_rate?.flat_rate_details.amount_grace_period.toFixed(2)}\n          label={`2/3 PAUŠALA - UKOLIKO UPLATITE DO ${parseDate(\n            flat_rate?.flat_rate_details.amount_grace_period_due_date ?? null,\n          )}`}\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div style={{color: Theme.palette.gray300}}>€</div>}\n          disabled\n        />\n      </Row>\n      <Row>\n        <Controller\n          name=\"account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO:\"\n              placeholder={'Odaberite konto'}\n              options={countsDropdownOptions}\n              isRequired\n              error={errors.account_id?.message}\n            />\n          )}\n        />\n        <Input\n          {...register('court_costs')}\n          label=\"SUDSKI TROŠKOVI:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          style={{flexGrow: 1 / 2}}\n        />\n        <Controller\n          name=\"court_account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO ZA SUDSKE TROŠKOVE:\"\n              placeholder={'Odaberite konto za sudske troškove'}\n              options={countsDropdownOptions}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Controller\n          name={'payment_deadline_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"ROK ZA PLAĆANJE UKUPNOG TROŠKA POSTUPKA:\"\n              onChange={onChange}\n              isRequired\n              error={errors.payment_deadline_date?.message}\n            />\n          )}\n        />\n        <Controller\n          name={'execution_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI:\"\n              onChange={onChange}\n              isRequired\n              error={errors.execution_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input {...register('description')} label=\"OPIS:\" textarea />\n      </Row>\n\n      <Row>\n        <FileUpload\n          icon={null}\n          files={uploadedFile}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n        />\n        <FileList files={(flat_rate?.file && flat_rate?.file) ?? []} />\n      </Row>\n      <Footer>\n        <Button content=\"Odustani\" variant=\"secondary\" style={{width: 130}} onClick={() => reset()} />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={loading} />\n      </Footer>\n    </Container>\n  );\n};\n\nexport default FlatRateForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/paymentDetails/paymentDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4205,4208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4205,4208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5168,5169],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalID' is assigned a value but never used.","line":150,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":150,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":150,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":150,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Typography,\n  Table,\n  TableHead,\n  Dropdown,\n  Input,\n  Datepicker,\n  EditIconTwo,\n  Theme,\n  TrashIcon,\n  CheckIcon,\n  CloseIcon,\n} from 'client-library';\nimport {Amount, FinePaymentDetailsWrapper, LabeledDivider} from './styles.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {useEffect, useState} from 'react';\nimport {requiredError} from '../../../../constants.ts';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport useInsertFlatRatePayment from '../../../../services/graphQL/flatRate/flatRatePayments/useInsertFlatRatePayment.ts';\nimport useDeleteFlatRatePayment from '../../../../services/graphQL/flatRate/flatRatePayments/useDeleteFlatRatePayment.ts';\nimport {FlatRateDetails, FlatRateOverviewItem} from '../../../../types/graphQL/flatRate.ts';\nimport {FinePaymentMethods} from '../../fines/constants.tsx';\nimport useGetFlatRatePayments from '../../../../services/graphQL/flatRate/flatRatePayments/useGetFlatRatePayments.ts';\n\nconst singlePaymentSchema = yup.object().shape({\n  id: yup.number().required(requiredError),\n  payment_method: yup.object().shape({\n    id: yup.number().required(),\n    title: yup.string().required(requiredError),\n  }),\n  amount: yup.number().required(requiredError).min(1, 'Iznos mora biti veći od 0'),\n  payment_date: yup.date().required(requiredError),\n  receipt_number: yup.string().required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  originalID: yup.number().required(requiredError),\n  flat_rate_id: yup.number().required(),\n  created_at: yup.string().optional(),\n  updated_at: yup.string().optional(),\n  status: yup.object().shape({\n    id: yup.number().optional(),\n    title: yup.string().optional(),\n  }),\n});\n\nconst paymentsSchema = yup.object().shape({\n  payments: yup.array().of(singlePaymentSchema),\n});\n\ntype PaymentEntryForm = yup.InferType<typeof paymentsSchema>;\ntype PaymentRow = yup.InferType<typeof singlePaymentSchema>;\n\ninterface PaymentFormProps {\n  flat_rate: FlatRateOverviewItem;\n  refetchFlatRate: () => Promise<void>;\n}\nconst PaymentDetails = ({flat_rate, refetchFlatRate}: PaymentFormProps) => {\n  const flatRateDetails: FlatRateDetails = flat_rate?.flat_rate_details;\n  const {payments, refetch} = useGetFlatRatePayments(flat_rate?.id);\n  const {insertFlatRatePayment} = useInsertFlatRatePayment();\n  const {deleteFlatRatePayment} = useDeleteFlatRatePayment();\n  const {alert} = useAppContext();\n\n  const [editRowId, setEditRowId] = useState<number | null>(null);\n  const [showDeletePaymentModal, setShowDeletePaymentModal] = useState<number | null>(null);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    formState: {errors},\n    setError,\n  } = useForm<PaymentEntryForm>({});\n\n  const {fields, append, remove} = useFieldArray({name: 'payments', control});\n  const appendLastRow = () =>\n    append({\n      id: 0,\n      payment_method: {\n        id: 0,\n        title: '',\n      },\n      amount: 0,\n      payment_date: new Date(),\n      receipt_number: '',\n      payment_reference_number: '',\n      debit_reference_number: '',\n      originalID: 0,\n      flat_rate_id: flat_rate.id,\n      status: {\n        id: 0,\n        title: '',\n      },\n    });\n\n  useEffect(() => {\n    remove();\n    if (payments.length) {\n      payments.forEach(payment => {\n        append({\n          ...payment,\n          // need to save original id to be able to edit/delete the payment because useFieldArray will change it\n          originalID: payment.id,\n          payment_method: FinePaymentMethods.find(method => method.title === payment.payment_method.title) ?? {\n            id: 0,\n            title: '',\n          },\n          payment_date: new Date(payment?.payment_date),\n        });\n      });\n      appendLastRow();\n      return;\n    }\n\n    appendLastRow();\n  }, [payments]);\n\n  const isRowDisabled = (row: any) => {\n    return editRowId ? editRowId !== row.originalID : !!row.originalID;\n  };\n\n  const validateSingleRow = async (rowData: PaymentRow, id: number) => {\n    try {\n      // Validate using Yup directly\n      await singlePaymentSchema.validate(rowData, {abortEarly: false});\n      return true; // Validation passed\n    } catch (err) {\n      if (err instanceof yup.ValidationError) {\n        err.inner.forEach(error => {\n          setError(`payments.${id}.${error.path}` as never, {type: 'manual', message: error.message});\n        });\n      }\n    }\n  };\n\n  const handleSubmitPayment = async (data: PaymentEntryForm) => {\n    if (data.payments?.length) {\n      const test = data.payments?.findIndex(item => item.originalID === editRowId);\n      const selectedRow = test != -1 ? test : fields.length - 1;\n\n      const isValid = await validateSingleRow(data?.payments[selectedRow], selectedRow);\n\n      if (!isValid) return;\n\n      const payment = data.payments![selectedRow];\n      const {originalID, created_at, updated_at, status, ...updatedPayment} = payment;\n      const parsedPaymentDate = parseDateForBackend(payment.payment_date);\n      if (!parsedPaymentDate) return;\n\n      const payload = {\n        ...updatedPayment,\n        payment_method: payment.payment_method.id,\n        payment_date: parsedPaymentDate,\n      };\n      await insertFlatRatePayment(\n        payload,\n        () => {\n          refetch();\n          refetchFlatRate();\n          alert.success('Uspješno sačuvano.');\n          setEditRowId(null);\n        },\n        () => alert?.error('Greška. Promjene nisu sačuvane.'),\n      );\n    }\n  };\n\n  const handleDeletePayment = async () => {\n    const paymentIndex = payments.findIndex(payment => payment.id === showDeletePaymentModal);\n    if (!showDeletePaymentModal || paymentIndex === -1) return;\n    await deleteFlatRatePayment(\n      showDeletePaymentModal,\n      () => {\n        remove(paymentIndex);\n        refetchFlatRate();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeletePaymentModal(null);\n  };\n\n  const tableHeadsPayments: TableHead[] = [\n    {\n      title: 'Način plaćanja',\n      accessor: 'payment_method',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_method`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Dropdown\n                style={{width: '180px'}}\n                name={name}\n                onChange={onChange}\n                value={value ?? FinePaymentMethods.find(method => method.title === value)}\n                options={FinePaymentMethods}\n                isDisabled={isRowDisabled(row)}\n                error={isRowDisabled(row) ? '' : errors?.payments?.[index]?.payment_method?.title?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.amount`)}\n            type=\"number\"\n            leftContent={\n              <div style={{color: isRowDisabled(row) ? Theme.palette.gray300 : Theme.palette.gray800}}>€</div>\n            }\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Datum uplate',\n      accessor: 'payment_date',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_date`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Datepicker\n                name={name}\n                onChange={onChange}\n                selected={value ? new Date(value) : ''}\n                disabled={isRowDisabled(row)}\n                error={errors?.payments?.[index]?.payment_date?.message}\n                popperProps={{\n                  strategy: 'fixed', // fixes datepicker going behind other elements\n                  placement: 'top',\n                }}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Broj izvoda',\n      accessor: 'receipt_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.receipt_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.receipt_number?.message}\n            key={`payments.${index}.receipt_number`}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj odobrenja',\n      accessor: 'payment_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.payment_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.payment_reference_number?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj zaduženja',\n      accessor: 'debit_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.debit_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.debit_reference_number?.message}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  return (\n    <>\n      <Amount style={{marginTop: 10}}>\n        <Typography style={{fontWeight: 600, marginBottom: 10}} variant={'bodySmall'} content={'Platiti do:'} />\n        <Typography variant=\"bodySmall\" content={parseDate(flat_rate?.payment_deadline_date)} />\n      </Amount>\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"DETALJI PLAĆANJA:\" />\n      </LabeledDivider>\n      <Table\n        tableHeads={tableHeadsPayments}\n        data={fields}\n        tableActions={[\n          {\n            name: 'Otkaži',\n            onClick: () => setEditRowId(null),\n            icon: <CloseIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Plati',\n\n            onClick: handleSubmit(handleSubmitPayment),\n            icon: <CheckIcon stroke={Theme?.palette?.gray800} width={'20px'} height={'20px'} />,\n            shouldRender: row => !isRowDisabled(row) || !row.originalID,\n          },\n          {\n            name: 'Izmijeni',\n            onClick: row => setEditRowId(row.originalID),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Izbriši',\n            onClick: row => setShowDeletePaymentModal(row.originalID),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !!row.originalID && (!editRowId || editRowId !== row.originalID),\n          },\n        ]}\n      />\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPNO:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={`${flatRateDetails?.all_payments_amount + flatRateDetails?.court_costs_paid} €`}\n          />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      {/*<Amount>*/}\n      {/*  <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREMAŠEN IZNOS:\" />*/}\n      {/*  <Typography variant=\"bodySmall\" content={`${fine?.amount} €`} />*/}\n      {/*</Amount>*/}\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREGLED PLAĆANJA:\" />\n      </LabeledDivider>\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${flat_rate?.amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${flatRateDetails?.all_payments_amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UMANJENJE KAZNE:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={\n              flatRateDetails?.amount_grace_period_available\n                ? roundCurrency(flat_rate?.amount - flatRateDetails?.amount_grace_period)\n                : '0.00 €'\n            }\n          />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(flatRateDetails?.left_to_pay_amount)} />\n        </Amount>\n        <Amount style={{marginTop: 20}}>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${flat_rate?.court_costs} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${flatRateDetails?.court_costs_paid} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(flatRateDetails?.court_costs_left_to_pay_amount)} />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      <ConfirmationModal\n        open={!!showDeletePaymentModal}\n        subTitle={'Ova uplata će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeletePaymentModal(null)}\n        onConfirm={() => handleDeletePayment()}\n      />\n    </>\n  );\n};\n\nexport default PaymentDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/paymentDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/paymentDetails/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/landingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/addProceduralCosts/addProceduralCosts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/addProceduralCosts/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/form/proceduralCostForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3446,3449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3446,3449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is assigned a value but never used.","line":82,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'court_account' is assigned a value but never used.","line":82,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":82,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":82,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":82,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":82,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'procedure_cost_details' is assigned a value but never used.","line":82,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":96},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4279,4282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4279,4282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Datepicker, Input, Typography, FileUpload, Button, Theme} from 'client-library';\nimport {Container, Row} from '../../taxes/addFee/styles.ts';\nimport {actTypeOptions, generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport Footer from '../../../../shared/footer.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList.tsx';\nimport {optionsNumberSchema} from '../../../../utils/formSchemas.ts';\nimport {ProceduralCostOverviewItem, ProceduralCostsForm} from '../../../../types/graphQL/proceduralCosts.ts';\nimport useInsertProceduralCost from '../../../../services/graphQL/proceduralCosts/useInsertProceduralCost.ts';\n\nconst proceduralCostSchema = yup.object().shape({\n  procedure_cost_type: optionsNumberSchema.required(requiredError).default(null),\n  decision_number: yup.string().required(requiredError),\n  decision_date: yup.date().required(requiredError),\n  subject: yup.string().required(requiredError),\n  jmbg: yup\n    .string()\n    .matches(/^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])(\\d{3})(2[1-9]|29)\\d{3}\\d{1}$/, 'Neispravan JMBG format')\n    .length(13, 'JMBG mora da ima 13 cifara')\n    .required(requiredError),\n  account_id: optionsNumberSchema.required(requiredError).default(null),\n  residence: yup.string().required(requiredError),\n  amount: yup.number().typeError('Morate unijeti broj').required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  execution_date: yup.date().required(requiredError),\n  payment_deadline_date: yup.date().required(requiredError),\n  court_costs: yup.number().optional(),\n  description: yup.string(),\n  court_account_id: optionsNumberSchema.nullable().default(null),\n});\n\nconst defaultValues = {\n  procedure_cost_type: undefined,\n  decision_number: '',\n  decision_date: undefined,\n  subject: '',\n  jmbg: '',\n  account_id: undefined,\n  residence: '',\n  amount: 0,\n  payment_reference_number: '',\n  debit_reference_number: '',\n  execution_date: undefined,\n  payment_deadline_date: undefined,\n  court_costs: 0,\n  description: '',\n  court_account_id: undefined,\n};\n\ntype ProceduralCostEntryForm = yup.InferType<typeof proceduralCostSchema>;\ninterface ProceduralCostFormProps {\n  procedural_cost?: ProceduralCostOverviewItem;\n}\nconst ProceduralCostForm = ({procedural_cost}: ProceduralCostFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n  } = useForm<ProceduralCostEntryForm>({resolver: yupResolver(proceduralCostSchema), defaultValues: defaultValues});\n  const [uploadedFile, setUploadedFile] = useState<FileList>();\n  const {counts} = useGetCountOverview({});\n  const {insertProceduralCost, loading} = useInsertProceduralCost();\n  const {\n    alert,\n    fileService: {uploadFile},\n    navigation: {navigate},\n  } = useAppContext();\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n  const onSubmit = async (data: any) => {\n    const {account, court_account, created_at, updated_at, file, status, procedure_cost_details, ...rest} = data;\n    let payload: ProceduralCostsForm = {\n      ...rest,\n      amount: Number(data.amount),\n      court_costs: Number(data.court_costs),\n      procedure_cost_type: data.procedure_cost_type.id,\n      account_id: data.account_id.id,\n      court_account_id: data.court_account_id?.id,\n      decision_date: parseDateForBackend(data.decision_date),\n      execution_date: parseDateForBackend(data.execution_date),\n      payment_deadline_date: parseDateForBackend(data.payment_deadline_date),\n    };\n\n    if (uploadedFile) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFile);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFile(undefined);\n          payload = {...payload, file: [res[0]?.id]};\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n\n      insertOrUpdateProceduralCost(payload);\n    } else {\n      insertOrUpdateProceduralCost(payload);\n    }\n  };\n\n  useEffect(() => {\n    if (procedural_cost) {\n      reset({\n        ...procedural_cost,\n        procedure_cost_type: actTypeOptions.find(option => option?.id === procedural_cost.procedure_cost_type?.id),\n        account_id: countsDropdownOptions?.find(count => count?.id === procedural_cost.account?.id),\n        court_account_id: countsDropdownOptions?.find(count => count?.id === procedural_cost.court_account?.id),\n        decision_date: new Date(procedural_cost.decision_date),\n        payment_deadline_date: new Date(procedural_cost.payment_deadline_date),\n        execution_date: new Date(procedural_cost.execution_date),\n      });\n    }\n  }, [procedural_cost]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n  };\n\n  const insertOrUpdateProceduralCost = async (payload: ProceduralCostsForm) => {\n    // update procedural cost\n    if (procedural_cost && procedural_cost.id) {\n      const updatedPayload = {...payload, id: procedural_cost.id};\n\n      await insertProceduralCost(\n        updatedPayload,\n        () => {\n          alert.success('Trošak postupka uspješno izmijenjen');\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom izmjene troška postupka');\n        },\n      );\n      return;\n    }\n\n    // create procedural cost\n    await insertProceduralCost(\n      payload,\n      id => {\n        navigate(`/finance/fines-taxes/procedural-costs/${id}`);\n        alert.success('Trošak postupka uspješno kreiran');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom kreiranja troška postupka');\n      },\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Controller\n          name=\"procedure_cost_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"VRSTA AKTA:\"\n              placeholder={'Odaberite vrstu akta'}\n              options={actTypeOptions}\n              isRequired\n              error={errors.procedure_cost_type?.message}\n            />\n          )}\n        />\n        <Input {...register('subject')} label=\"SUBJEKAT:\" isRequired error={errors.subject?.message} />\n      </Row>\n      <Row>\n        <Input {...register('jmbg')} label=\"JMBG:\" isRequired error={errors.jmbg?.message} />\n        <Input {...register('residence')} label=\"PREBIVALIŠTE:\" isRequired error={errors.residence?.message} />\n      </Row>\n      <Row>\n        <Input\n          {...register('decision_number')}\n          label=\"BROJ RJEŠENJA / PRESUDE:\"\n          isRequired\n          error={errors.decision_number?.message}\n        />\n        <Controller\n          name={'decision_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM RJEŠENJA / PRESUDE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.decision_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('debit_reference_number')}\n          label=\"POZIV NA BROJ ZADUŽENJA:\"\n          isRequired\n          error={errors.debit_reference_number?.message}\n        />\n        <Input\n          {...register('payment_reference_number')}\n          label=\"POZIV NA BROJ ODOBRENJA:\"\n          isRequired\n          error={errors.payment_reference_number?.message}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('amount')}\n          label=\"VISINA TROŠKA POSTUPKA:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          isRequired\n          error={errors.amount?.message}\n        />\n        <Input\n          value={procedural_cost?.procedure_cost_details.amount_grace_period.toFixed(2)}\n          label={`2/3 TROŠKA POSTUPKA - UKOLIKO UPLATITE DO ${parseDate(\n            procedural_cost?.procedure_cost_details.amount_grace_period_due_date ?? null,\n          )}`}\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div style={{color: Theme.palette.gray300}}>€</div>}\n          disabled\n        />\n      </Row>\n      <Row>\n        <Controller\n          name=\"account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO:\"\n              placeholder={'Odaberite konto'}\n              options={countsDropdownOptions}\n              isRequired\n              error={errors.account_id?.message}\n            />\n          )}\n        />\n        <Input\n          {...register('court_costs')}\n          label=\"SUDSKI TROŠKOVI:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          style={{flexGrow: 1 / 2}}\n        />\n        <Controller\n          name=\"court_account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO ZA SUDSKE TROŠKOVE:\"\n              placeholder={'Odaberite konto za sudske troškove'}\n              options={countsDropdownOptions}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Controller\n          name={'payment_deadline_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"ROK ZA PLAĆANJE UKUPNOG TROŠKA POSTUPKA:\"\n              onChange={onChange}\n              isRequired\n              error={errors.payment_deadline_date?.message}\n            />\n          )}\n        />\n        <Controller\n          name={'execution_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI:\"\n              onChange={onChange}\n              isRequired\n              error={errors.execution_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input {...register('description')} label=\"OPIS:\" textarea />\n      </Row>\n\n      <Row>\n        <FileUpload\n          icon={null}\n          files={uploadedFile}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n        />\n        <FileList files={(procedural_cost?.file && procedural_cost?.file) ?? []} />\n      </Row>\n      <Footer>\n        <Button content=\"Odustani\" variant=\"secondary\" style={{width: 130}} onClick={() => reset()} />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={loading} />\n      </Footer>\n    </Container>\n  );\n};\n\nexport default ProceduralCostForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/paymentDetails/paymentDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4407,4410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4407,4410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5370,5371],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalID' is assigned a value but never used.","line":150,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":150,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":150,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":150,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Typography,\n  Table,\n  TableHead,\n  Dropdown,\n  Input,\n  Datepicker,\n  EditIconTwo,\n  Theme,\n  TrashIcon,\n  CheckIcon,\n  CloseIcon,\n} from 'client-library';\nimport {Amount, FinePaymentDetailsWrapper, LabeledDivider} from './styles.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {useEffect, useState} from 'react';\nimport {requiredError} from '../../../../constants.ts';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport useInsertProceduralCostPayment from '../../../../services/graphQL/proceduralCosts/proceduralCostsPayments/useInsertProceduralCostPayment.ts';\nimport useDeleteProceduralCostPayment from '../../../../services/graphQL/proceduralCosts/proceduralCostsPayments/useDeleteProceduralCostPayment.ts';\nimport {ProceduralCostDetails, ProceduralCostOverviewItem} from '../../../../types/graphQL/proceduralCosts.ts';\nimport {FinePaymentMethods} from '../../fines/constants.tsx';\nimport useGetProceduralCostPayments from '../../../../services/graphQL/proceduralCosts/proceduralCostsPayments/useGetProceduralCostPayments.ts';\n\nconst singlePaymentSchema = yup.object().shape({\n  id: yup.number().required(requiredError),\n  payment_method: yup.object().shape({\n    id: yup.number().required(),\n    title: yup.string().required(requiredError),\n  }),\n  amount: yup.number().required(requiredError).min(1, 'Iznos mora biti veći od 0'),\n  payment_date: yup.date().required(requiredError),\n  receipt_number: yup.string().required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  originalID: yup.number().required(requiredError),\n  procedure_cost_id: yup.number().required(),\n  created_at: yup.string().optional(),\n  updated_at: yup.string().optional(),\n  status: yup.object().shape({\n    id: yup.number().optional(),\n    title: yup.string().optional(),\n  }),\n});\n\nconst paymentsSchema = yup.object().shape({\n  payments: yup.array().of(singlePaymentSchema),\n});\n\ntype PaymentEntryForm = yup.InferType<typeof paymentsSchema>;\ntype PaymentRow = yup.InferType<typeof singlePaymentSchema>;\n\ninterface PaymentFormProps {\n  procedural_cost: ProceduralCostOverviewItem;\n  refetchProceduralCost: () => Promise<void>;\n}\nconst PaymentDetails = ({procedural_cost, refetchProceduralCost}: PaymentFormProps) => {\n  const proceduralCostDetails: ProceduralCostDetails = procedural_cost?.procedure_cost_details;\n  const {payments, refetch} = useGetProceduralCostPayments(procedural_cost?.id);\n  const {insertProceduralCostPayment} = useInsertProceduralCostPayment();\n  const {deleteProceduralCostPayment} = useDeleteProceduralCostPayment();\n  const {alert} = useAppContext();\n\n  const [editRowId, setEditRowId] = useState<number | null>(null);\n  const [showDeletePaymentModal, setShowDeletePaymentModal] = useState<number | null>(null);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    formState: {errors},\n    setError,\n  } = useForm<PaymentEntryForm>({});\n\n  const {fields, append, remove} = useFieldArray({name: 'payments', control});\n  const appendLastRow = () =>\n    append({\n      id: 0,\n      payment_method: {\n        id: 0,\n        title: '',\n      },\n      amount: 0,\n      payment_date: new Date(),\n      receipt_number: '',\n      payment_reference_number: '',\n      debit_reference_number: '',\n      originalID: 0,\n      procedure_cost_id: procedural_cost.id,\n      status: {\n        id: 0,\n        title: '',\n      },\n    });\n\n  useEffect(() => {\n    remove();\n    if (payments.length) {\n      payments.forEach(payment => {\n        append({\n          ...payment,\n          // need to save original id to be able to edit/delete the payment because useFieldArray will change it\n          originalID: payment.id,\n          payment_method: FinePaymentMethods.find(method => method.title === payment.payment_method.title) ?? {\n            id: 0,\n            title: '',\n          },\n          payment_date: new Date(payment?.payment_date),\n        });\n      });\n      appendLastRow();\n      return;\n    }\n\n    appendLastRow();\n  }, [payments]);\n\n  const isRowDisabled = (row: any) => {\n    return editRowId ? editRowId !== row.originalID : !!row.originalID;\n  };\n\n  const validateSingleRow = async (rowData: PaymentRow, id: number) => {\n    try {\n      // Validate using Yup directly\n      await singlePaymentSchema.validate(rowData, {abortEarly: false});\n      return true; // Validation passed\n    } catch (err) {\n      if (err instanceof yup.ValidationError) {\n        err.inner.forEach(error => {\n          setError(`payments.${id}.${error.path}` as never, {type: 'manual', message: error.message});\n        });\n      }\n    }\n  };\n\n  const handleSubmitPayment = async (data: PaymentEntryForm) => {\n    if (data.payments?.length) {\n      const test = data.payments?.findIndex(item => item.originalID === editRowId);\n      const selectedRow = test != -1 ? test : fields.length - 1;\n\n      const isValid = await validateSingleRow(data?.payments[selectedRow], selectedRow);\n\n      if (!isValid) return;\n\n      const payment = data.payments![selectedRow];\n      const {originalID, created_at, updated_at, status, ...updatedPayment} = payment;\n      const parsedPaymentDate = parseDateForBackend(payment.payment_date);\n      if (!parsedPaymentDate) return;\n\n      const payload = {\n        ...updatedPayment,\n        payment_method: payment.payment_method.id,\n        payment_date: parsedPaymentDate,\n      };\n      await insertProceduralCostPayment(\n        payload,\n        () => {\n          refetch();\n          refetchProceduralCost();\n          alert.success('Uspješno sačuvano.');\n          setEditRowId(null);\n        },\n        () => alert?.error('Greška. Promjene nisu sačuvane.'),\n      );\n    }\n  };\n\n  const handleDeletePayment = async () => {\n    const paymentIndex = payments.findIndex(payment => payment.id === showDeletePaymentModal);\n    if (!showDeletePaymentModal || paymentIndex === -1) return;\n    await deleteProceduralCostPayment(\n      showDeletePaymentModal,\n      () => {\n        remove(paymentIndex);\n        refetchProceduralCost();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeletePaymentModal(null);\n  };\n\n  const tableHeadsPayments: TableHead[] = [\n    {\n      title: 'Način plaćanja',\n      accessor: 'payment_method',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_method`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Dropdown\n                style={{width: '180px'}}\n                name={name}\n                onChange={onChange}\n                value={value ?? FinePaymentMethods.find(method => method.title === value)}\n                options={FinePaymentMethods}\n                isDisabled={isRowDisabled(row)}\n                error={isRowDisabled(row) ? '' : errors?.payments?.[index]?.payment_method?.title?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.amount`)}\n            type=\"number\"\n            leftContent={\n              <div style={{color: isRowDisabled(row) ? Theme.palette.gray300 : Theme.palette.gray800}}>€</div>\n            }\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Datum uplate',\n      accessor: 'payment_date',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_date`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Datepicker\n                name={name}\n                onChange={onChange}\n                selected={value ? new Date(value) : ''}\n                disabled={isRowDisabled(row)}\n                error={errors?.payments?.[index]?.payment_date?.message}\n                popperProps={{\n                  strategy: 'fixed', // fixes datepicker going behind other elements\n                  placement: 'top',\n                }}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Broj izvoda',\n      accessor: 'receipt_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.receipt_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.receipt_number?.message}\n            key={`payments.${index}.receipt_number`}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj odobrenja',\n      accessor: 'payment_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.payment_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.payment_reference_number?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj zaduženja',\n      accessor: 'debit_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.debit_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.debit_reference_number?.message}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  return (\n    <>\n      <Amount style={{marginTop: 10}}>\n        <Typography style={{fontWeight: 600, marginBottom: 10}} variant={'bodySmall'} content={'Platiti do:'} />\n        <Typography variant=\"bodySmall\" content={parseDate(procedural_cost?.payment_deadline_date)} />\n      </Amount>\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"DETALJI PLAĆANJA:\" />\n      </LabeledDivider>\n      <Table\n        tableHeads={tableHeadsPayments}\n        data={fields}\n        tableActions={[\n          {\n            name: 'Otkaži',\n            onClick: () => setEditRowId(null),\n            icon: <CloseIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Plati',\n\n            onClick: handleSubmit(handleSubmitPayment),\n            icon: <CheckIcon stroke={Theme?.palette?.gray800} width={'20px'} height={'20px'} />,\n            shouldRender: row => !isRowDisabled(row) || !row.originalID,\n          },\n          {\n            name: 'Izmijeni',\n            onClick: row => setEditRowId(row.originalID),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Izbriši',\n            onClick: row => setShowDeletePaymentModal(row.originalID),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !!row.originalID && (!editRowId || editRowId !== row.originalID),\n          },\n        ]}\n      />\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPNO:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={`${proceduralCostDetails?.all_payments_amount + proceduralCostDetails?.court_costs_paid} €`}\n          />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      {/*<Amount>*/}\n      {/*  <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREMAŠEN IZNOS:\" />*/}\n      {/*  <Typography variant=\"bodySmall\" content={`${fine?.amount} €`} />*/}\n      {/*</Amount>*/}\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREGLED PLAĆANJA:\" />\n      </LabeledDivider>\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${procedural_cost?.amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${proceduralCostDetails?.all_payments_amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UMANJENJE KAZNE:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={\n              proceduralCostDetails?.amount_grace_period_available\n                ? roundCurrency(procedural_cost?.amount - proceduralCostDetails?.amount_grace_period)\n                : '0.00 €'\n            }\n          />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(proceduralCostDetails?.left_to_pay_amount)} />\n        </Amount>\n        <Amount style={{marginTop: 20}}>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${procedural_cost?.court_costs} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${proceduralCostDetails?.court_costs_paid} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={roundCurrency(proceduralCostDetails?.court_costs_left_to_pay_amount)}\n          />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      <ConfirmationModal\n        open={!!showDeletePaymentModal}\n        subTitle={'Ova uplata će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeletePaymentModal(null)}\n        onConfirm={() => handleDeletePayment()}\n      />\n    </>\n  );\n};\n\nexport default PaymentDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/paymentDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/paymentDetails/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/proceduralCostDetails/proceduralCostDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/proceduralCosts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/proceduralCostsOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2217,2220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2217,2220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2701,2704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2701,2704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {PAGE_SIZE} from '../../../constants.ts';\nimport {FilterInput} from '../../accounting/styles.tsx';\nimport {FilterDropdown, Filters} from '../../budget/planning/budgetList/styles.ts';\nimport {tableHeadsProceduralCostsOverview} from './constants.tsx';\nimport {Header} from './styles.ts';\nimport {useState} from 'react';\nimport {useDebounce} from '../../../utils/useDebounce.ts';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport useGetProceduralCosts from '../../../services/graphQL/proceduralCosts/useGetProceduralCosts.ts';\nimport useDeleteProceduralCost from '../../../services/graphQL/proceduralCosts/useDeleteProceduralCost.ts';\nimport {defaultDropdownOption, TypeOfFines} from '../fines/constants.tsx';\nimport {ConfirmationModal} from '../../../shared/confirmationModal/confirmationModal.tsx';\nimport {ProceduralCostOverviewItem} from '../../../types/graphQL/proceduralCosts.ts';\n\nconst initialValues = {\n  procedure_cost_type_id: defaultDropdownOption.id,\n};\n\nconst ProceduralCostsOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [search, setSearch] = useState('');\n  const [showDeleteProceduralCostModal, setShowDeleteProceduralCostModal] = useState<number | null>(null);\n\n  const debouncedSearch = useDebounce(search, 500);\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n\n  const {proceduralCosts, total, refetch, loading} = useGetProceduralCosts({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n    search: debouncedSearch,\n  });\n  const {deleteProceduralCost} = useDeleteProceduralCost();\n\n  const handleDeleteProceduralCost = async () => {\n    if (!showDeleteProceduralCostModal) return;\n    await deleteProceduralCost(\n      showDeleteProceduralCostModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeleteProceduralCostModal(null);\n  };\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const filterDropdownOptions = [defaultDropdownOption, ...TypeOfFines] || [];\n\n  return (\n    <>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            name=\"procedure_cost_type_id\"\n            value={filterDropdownOptions.find(option => option.id === filters?.procedure_cost_type_id)}\n            onChange={(value: any) => onFilterChange(value, 'procedure_cost_type_id')}\n            label=\"VRSTA TROŠKOVA POSTUPKA:\"\n            options={filterDropdownOptions}\n          />\n\n          <FilterInput\n            label=\"PRETRAGA:\"\n            rightContent={<SearchIcon />}\n            name=\"search\"\n            onChange={onSearch}\n            value={search}\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={tableHeadsProceduralCostsOverview}\n        data={proceduralCosts}\n        isLoading={loading}\n        style={{marginBottom: 22}}\n        emptyMessage={'Još uvjek nema troškova postupka.'}\n        onRowClick={(row: ProceduralCostOverviewItem) => navigate(`/finance/fines-taxes/procedural-costs/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteProceduralCostModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteProceduralCostModal}\n        subTitle={'Ovaj trošak postupka će biti trajno izbrisan iz sistema.'}\n        onClose={() => setShowDeleteProceduralCostModal(null)}\n        onConfirm={() => handleDeleteProceduralCost()}\n      />\n    </>\n  );\n};\n\nexport default ProceduralCostsOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/addFee/addFee.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/addFee/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/feeDetails/feeDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/form/feeForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3195,3198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3195,3198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is assigned a value but never used.","line":82,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'court_account' is assigned a value but never used.","line":82,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":82,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":82,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":82,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":82,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fee_details' is assigned a value but never used.","line":82,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":85},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3951,3954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3951,3954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Datepicker, Input, Typography, FileUpload, Button} from 'client-library';\nimport {Container, Row} from './styles.ts';\nimport {feeSubcategoryOptions, feeTypeOptions, generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport Footer from '../../../../shared/footer.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList.tsx';\nimport {optionsNumberSchema} from '../../../../utils/formSchemas.ts';\nimport {FeeInsertParams} from '../../../../types/graphQL/fees.ts';\nimport useInsertFee from '../../../../services/graphQL/fees/useInsertFee.ts';\nimport {Fee} from '../constants.tsx';\n\nconst feeSchema = yup.object().shape({\n  fee_type: optionsNumberSchema.required(requiredError).default(null),\n  fee_subcategory: optionsNumberSchema.required(requiredError).default(null),\n  decision_number: yup.string().required(requiredError),\n  decision_date: yup.date().required(requiredError),\n  subject: yup.string().required(requiredError),\n  jmbg: yup\n    .string()\n    .matches(/^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])(\\d{3})(2[1-9]|29)\\d{3}\\d{1}$/, 'Neispravan JMBG format')\n    .length(13, 'JMBG mora da ima 13 cifara')\n    .required(requiredError),\n  residence: yup.string().required(requiredError),\n  amount: yup.number().typeError('Morate unijeti broj').required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  execution_date: yup.date().required(requiredError),\n  payment_deadline_date: yup.date().required(requiredError),\n  description: yup.string(),\n  court_account: optionsNumberSchema.nullable().default(null),\n});\n\nconst defaultValues = {\n  fee_type: undefined,\n  fee_subcategory: undefined,\n  decision_number: '',\n  decision_date: undefined,\n  subject: '',\n  jmbg: '',\n  account_id: undefined,\n  residence: '',\n  amount: 0,\n  payment_reference_number: '',\n  debit_reference_number: '',\n  execution_date: undefined,\n  payment_deadline_date: undefined,\n  description: '',\n  court_account: undefined,\n};\n\ntype FeeEntryForm = yup.InferType<typeof feeSchema>;\nexport interface FeeFormProps {\n  fee?: Fee;\n}\nconst FeeForm = ({fee}: FeeFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n  } = useForm<FeeEntryForm>({resolver: yupResolver(feeSchema), defaultValues: defaultValues});\n  const [uploadedFile, setUploadedFile] = useState<FileList>();\n  const {counts} = useGetCountOverview({});\n  const {insertFee, loading} = useInsertFee();\n  const {\n    alert,\n    fileService: {uploadFile},\n    navigation: {navigate},\n  } = useAppContext();\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n  const onSubmit = async (data: any) => {\n    const {account, court_account, created_at, updated_at, file, status, fee_details, ...rest} = data;\n    let payload: FeeInsertParams = {\n      ...rest,\n      amount: Number(data.amount),\n      fee_type: data.fee_type.id,\n      court_account: data.court_account?.id,\n      fee_subcategory: data.fee_subcategory?.id,\n      decision_date: parseDateForBackend(data.decision_date),\n      execution_date: parseDateForBackend(data.execution_date),\n      payment_deadline_date: parseDateForBackend(data.payment_deadline_date),\n    };\n\n    if (uploadedFile) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFile);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFile(undefined);\n          payload = {...payload, file: [res[0]?.id]};\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n\n      insertOrUpdateFee(payload);\n    } else {\n      insertOrUpdateFee(payload);\n    }\n  };\n\n  useEffect(() => {\n    if (fee) {\n      reset({\n        ...fee,\n        fee_type: feeTypeOptions.find(option => option?.id === fee.fee_type?.id),\n        fee_subcategory: feeSubcategoryOptions.find(option => option?.id === fee.fee_type?.id),\n        court_account: countsDropdownOptions?.find(count => count?.id === fee.court_account?.id),\n        decision_date: new Date(fee.decision_date),\n        payment_deadline_date: new Date(fee.payment_deadline_date),\n        execution_date: new Date(fee.execution_date),\n      });\n    }\n  }, [fee]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n  };\n\n  const insertOrUpdateFee = async (payload: FeeInsertParams) => {\n    // update fee\n    if (fee && fee.id) {\n      const updatedPayload = {...payload, id: fee.id};\n\n      await insertFee(\n        updatedPayload,\n        () => {\n          alert.success('Taksa uspješno izmijenjena');\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom izmjene takse');\n        },\n      );\n      return;\n    }\n\n    // create fee\n    await insertFee(\n      payload,\n      id => {\n        navigate(`/finance/fines-taxes/fines/${id}`);\n        alert.success('Taksa uspješno kreirana');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom kreiranja takse');\n      },\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Controller\n          name=\"fee_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"VRSTA TAKSE:\"\n              placeholder={'Odaberite vrstu takse'}\n              options={feeTypeOptions}\n              isRequired\n              error={errors.fee_type?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"fee_subcategory\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"POTKATEGORIJA TAKSE:\"\n              placeholder={'Odaberite potkategoriju takse'}\n              options={feeSubcategoryOptions}\n              isRequired\n              error={errors.fee_subcategory?.message}\n            />\n          )}\n        />\n        <Input {...register('subject')} label=\"SUBJEKAT:\" isRequired error={errors.subject?.message} />\n      </Row>\n      <Row>\n        <Input {...register('jmbg')} label=\"JMBG:\" isRequired error={errors.jmbg?.message} />\n        <Input {...register('residence')} label=\"PREBIVALIŠTE:\" isRequired error={errors.residence?.message} />\n      </Row>\n      <Row>\n        <Input\n          {...register('decision_number')}\n          label=\"BROJ RJEŠENJA / PRESUDE:\"\n          isRequired\n          error={errors.decision_number?.message}\n        />\n        <Controller\n          name={'decision_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM RJEŠENJA / PRESUDE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.decision_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('debit_reference_number')}\n          label=\"POZIV NA BROJ ZADUŽENJA:\"\n          isRequired\n          error={errors.debit_reference_number?.message}\n        />\n        <Input\n          {...register('payment_reference_number')}\n          label=\"POZIV NA BROJ ODOBRENJA:\"\n          isRequired\n          error={errors.payment_reference_number?.message}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('amount')}\n          label=\"VISINA TAKSE:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          isRequired\n          error={errors.amount?.message}\n        />\n        <Controller\n          name=\"court_account\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO:\"\n              placeholder={'Odaberite konto'}\n              options={countsDropdownOptions}\n              isRequired\n              error={errors.court_account?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Controller\n          name={'payment_deadline_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"ROK ZA PLAĆANJE UKUPNE TAKSE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.payment_deadline_date?.message}\n            />\n          )}\n        />\n        <Controller\n          name={'execution_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI:\"\n              onChange={onChange}\n              isRequired\n              error={errors.execution_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input {...register('description')} label=\"OPIS:\" textarea />\n      </Row>\n\n      <Row>\n        <FileUpload\n          icon={null}\n          files={uploadedFile}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n        />\n        <FileList files={(fee?.file && fee?.file) ?? []} />\n      </Row>\n      <Footer>\n        <Button content=\"Odustani\" variant=\"secondary\" style={{width: 130}} onClick={() => reset()} />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={loading} />\n      </Footer>\n    </Container>\n  );\n};\n\nexport default FeeForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/form/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/paymentDetails/paymentDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4011,4014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4011,4014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4974,4975],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalID' is assigned a value but never used.","line":150,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":150,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":150,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":150,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Typography,\n  Table,\n  TableHead,\n  Dropdown,\n  Input,\n  Datepicker,\n  EditIconTwo,\n  Theme,\n  TrashIcon,\n  CheckIcon,\n  CloseIcon,\n} from 'client-library';\nimport {Amount, FinePaymentDetailsWrapper, LabeledDivider} from './styles.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {useEffect, useState} from 'react';\nimport {requiredError} from '../../../../constants.ts';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport {Fee, FeeDetails} from '../constants.tsx';\nimport useGetFeesPayments from '../../../../services/graphQL/fees/feesPayments/useGetFeesPayments.ts';\nimport useInsertFeesPayment from '../../../../services/graphQL/fees/feesPayments/useInsertFeesPayment.ts';\nimport useDeleteFeesPayment from '../../../../services/graphQL/fees/feesPayments/useDeleteFeesPayment.ts';\nimport {FinePaymentMethods} from '../../fines/constants.tsx';\n\nconst singlePaymentSchema = yup.object().shape({\n  id: yup.number().required(requiredError),\n  payment_method: yup.object().shape({\n    id: yup.number().required(),\n    title: yup.string().required(requiredError),\n  }),\n  amount: yup.number().required(requiredError).min(1, 'Iznos mora biti veći od 0'),\n  payment_date: yup.date().required(requiredError),\n  receipt_number: yup.string().required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  originalID: yup.number().required(requiredError),\n  fee_id: yup.number().required(),\n  created_at: yup.string().optional(),\n  updated_at: yup.string().optional(),\n  status: yup.object().shape({\n    id: yup.number().optional(),\n    title: yup.string().optional(),\n  }),\n});\n\nconst paymentsSchema = yup.object().shape({\n  payments: yup.array().of(singlePaymentSchema),\n});\n\ntype PaymentEntryForm = yup.InferType<typeof paymentsSchema>;\ntype PaymentRow = yup.InferType<typeof singlePaymentSchema>;\n\ninterface PaymentFormProps {\n  fee: Fee;\n  refetchFee: () => Promise<void>;\n}\nconst PaymentDetails = ({fee, refetchFee}: PaymentFormProps) => {\n  const fineFeeDetails: FeeDetails = fee?.fee_details;\n  const {payments, refetch} = useGetFeesPayments(fee?.id);\n  const {insertFeePayment} = useInsertFeesPayment();\n  const {deleteFeePayment} = useDeleteFeesPayment();\n  const {alert} = useAppContext();\n\n  const [editRowId, setEditRowId] = useState<number | null>(null);\n  const [showDeletePaymentModal, setShowDeletePaymentModal] = useState<number | null>(null);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    formState: {errors},\n    setError,\n  } = useForm<PaymentEntryForm>({});\n\n  const {fields, append, remove} = useFieldArray({name: 'payments', control});\n  const appendLastRow = () =>\n    append({\n      id: 0,\n      payment_method: {\n        id: 0,\n        title: '',\n      },\n      amount: 0,\n      payment_date: new Date(),\n      receipt_number: '',\n      payment_reference_number: '',\n      debit_reference_number: '',\n      originalID: 0,\n      fee_id: fee.id,\n      status: {\n        id: 0,\n        title: '',\n      },\n    });\n\n  useEffect(() => {\n    remove();\n    if (payments.length) {\n      payments.forEach(payment => {\n        append({\n          ...payment,\n          // need to save original id to be able to edit/delete the payment because useFieldArray will change it\n          originalID: payment.id,\n          payment_method: FinePaymentMethods.find(method => method.title === payment.payment_method.title) ?? {\n            id: 0,\n            title: '',\n          },\n          payment_date: new Date(payment?.payment_date),\n        });\n      });\n      appendLastRow();\n      return;\n    }\n\n    appendLastRow();\n  }, [payments]);\n\n  const isRowDisabled = (row: any) => {\n    return editRowId ? editRowId !== row.originalID : !!row.originalID;\n  };\n\n  const validateSingleRow = async (rowData: PaymentRow, id: number) => {\n    try {\n      // Validate using Yup directly\n      await singlePaymentSchema.validate(rowData, {abortEarly: false});\n      return true; // Validation passed\n    } catch (err) {\n      if (err instanceof yup.ValidationError) {\n        err.inner.forEach(error => {\n          setError(`payments.${id}.${error.path}` as never, {type: 'manual', message: error.message});\n        });\n      }\n    }\n  };\n\n  const handleSubmitPayment = async (data: PaymentEntryForm) => {\n    if (data.payments?.length) {\n      const test = data.payments?.findIndex(item => item.originalID === editRowId);\n      const selectedRow = test != -1 ? test : fields.length - 1;\n\n      const isValid = await validateSingleRow(data?.payments[selectedRow], selectedRow);\n\n      if (!isValid) return;\n\n      const payment = data.payments![selectedRow];\n      const {originalID, created_at, updated_at, status, ...updatedPayment} = payment;\n      const parsedPaymentDate = parseDateForBackend(payment.payment_date);\n      if (!parsedPaymentDate) return;\n\n      const payload = {\n        ...updatedPayment,\n        payment_method: payment.payment_method.id,\n        payment_date: parsedPaymentDate,\n      };\n      await insertFeePayment(\n        payload,\n        () => {\n          refetch();\n          refetchFee();\n          alert.success('Uspješno sačuvano.');\n          setEditRowId(null);\n        },\n        () => alert?.error('Greška. Promjene nisu sačuvane.'),\n      );\n    }\n  };\n\n  const handleDeletePayment = async () => {\n    const paymentIndex = payments.findIndex(payment => payment.id === showDeletePaymentModal);\n    if (!showDeletePaymentModal || paymentIndex === -1) return;\n    await deleteFeePayment(\n      showDeletePaymentModal,\n      () => {\n        remove(paymentIndex);\n        refetchFee();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeletePaymentModal(null);\n  };\n\n  const tableHeadsPayments: TableHead[] = [\n    {\n      title: 'Način plaćanja',\n      accessor: 'payment_method',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_method`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Dropdown\n                style={{width: '180px'}}\n                name={name}\n                onChange={onChange}\n                value={value ?? FinePaymentMethods.find(method => method.title === value)}\n                options={FinePaymentMethods}\n                isDisabled={isRowDisabled(row)}\n                error={isRowDisabled(row) ? '' : errors?.payments?.[index]?.payment_method?.title?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.amount`)}\n            type=\"number\"\n            leftContent={\n              <div style={{color: isRowDisabled(row) ? Theme.palette.gray300 : Theme.palette.gray800}}>€</div>\n            }\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Datum uplate',\n      accessor: 'payment_date',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_date`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Datepicker\n                name={name}\n                onChange={onChange}\n                selected={value ? new Date(value) : ''}\n                disabled={isRowDisabled(row)}\n                error={errors?.payments?.[index]?.payment_date?.message}\n                popperProps={{\n                  strategy: 'fixed', // fixes datepicker going behind other elements\n                  placement: 'top',\n                }}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Broj izvoda',\n      accessor: 'receipt_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.receipt_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.receipt_number?.message}\n            key={`payments.${index}.receipt_number`}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj odobrenja',\n      accessor: 'payment_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.payment_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.payment_reference_number?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj zaduženja',\n      accessor: 'debit_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.debit_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.debit_reference_number?.message}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  return (\n    <>\n      <Amount style={{marginTop: 10}}>\n        <Typography style={{fontWeight: 600, marginBottom: 10}} variant={'bodySmall'} content={'Platiti do:'} />\n        <Typography variant=\"bodySmall\" content={parseDate(fee?.payment_deadline_date)} />\n      </Amount>\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"DETALJI PLAĆANJA:\" />\n      </LabeledDivider>\n      <Table\n        tableHeads={tableHeadsPayments}\n        data={fields}\n        tableActions={[\n          {\n            name: 'Otkaži',\n            onClick: () => setEditRowId(null),\n            icon: <CloseIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Plati',\n\n            onClick: handleSubmit(handleSubmitPayment),\n            icon: <CheckIcon stroke={Theme?.palette?.gray800} width={'20px'} height={'20px'} />,\n            shouldRender: row => !isRowDisabled(row) || !row.originalID,\n          },\n          {\n            name: 'Izmijeni',\n            onClick: row => setEditRowId(row.originalID),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Izbriši',\n            onClick: row => setShowDeletePaymentModal(row.originalID),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !!row.originalID && (!editRowId || editRowId !== row.originalID),\n          },\n        ]}\n      />\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPNO:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(fineFeeDetails?.fee_all_payments_amount)} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(fineFeeDetails?.fee_left_to_pay_amount)} />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      <ConfirmationModal\n        open={!!showDeletePaymentModal}\n        subTitle={'Ova uplata će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeletePaymentModal(null)}\n        onConfirm={() => handleDeletePayment()}\n      />\n    </>\n  );\n};\n\nexport default PaymentDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/paymentDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/paymentDetails/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/taxes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/taxesOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2082,2085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2082,2085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2655,2658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2655,2658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3000,3003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3000,3003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {feeSubcategoryOptions, feeTypeOptions, PAGE_SIZE} from '../../../constants.ts';\nimport useGetFees from '../../../services/graphQL/fees/useGetFees.ts';\nimport {FilterInput} from '../../accounting/styles.tsx';\nimport {FilterDropdown, Filters} from '../../budget/planning/budgetList/styles.ts';\nimport {tableHeadsTaxesOverview} from './constants.tsx';\nimport {Header} from './styles.ts';\nimport {FinesOverviewItem} from '../../../types/graphQL/finesOverview.ts';\nimport {ConfirmationModal} from '../../../shared/confirmationModal/confirmationModal.tsx';\nimport {useState} from 'react';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport useDeleteFee from '../../../services/graphQL/fees/useDeleteFee.ts';\nimport {useDebounce} from '../../../utils/useDebounce.ts';\nimport {defaultDropdownOption} from '../fines/constants.tsx';\n\nconst initialValues = {\n  fee_type_id: undefined,\n  fee_subcategory_id: undefined,\n};\nconst TaxesOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [search, setSearch] = useState('');\n  const debouncedSearch = useDebounce(search, 500);\n\n  const {fees, refetch, total, loading} = useGetFees({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n    search: debouncedSearch || undefined,\n  });\n  const [showDeleteFeeModal, setShowDeleteFeeModal] = useState<number | null>(null);\n\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n  // TO DO implement the logic when the BE is done\n  const {deleteFee} = useDeleteFee();\n\n  const handleDeleteFee = async () => {\n    if (!showDeleteFeeModal) return;\n\n    await deleteFee(\n      showDeleteFeeModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => {\n        alert.error('Greška. Brisanje nije uspjelo.');\n      },\n    );\n  };\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const filterDropdownOptionsType = [defaultDropdownOption, ...feeTypeOptions] || [];\n  const filterDropdownOptionsSubcategory = [defaultDropdownOption, ...feeSubcategoryOptions] || [];\n\n  return (\n    <>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            name=\"fee_type_id\"\n            value={filterDropdownOptionsType.find(option => option.id === filters?.fee_type_id)}\n            onChange={(value: any) => onFilterChange(value, 'fee_type_id')}\n            label=\"VRSTA TAKSE:\"\n            options={filterDropdownOptionsType}\n          />\n          <FilterDropdown\n            name=\"fee_subcategory_id\"\n            value={filterDropdownOptionsSubcategory.find(option => option.id === filters?.fee_subcategory_id)}\n            onChange={(value: any) => onFilterChange(value, 'fee_subcategory_id')}\n            label=\"POTKATEGORIJA TAKSE:\"\n            options={filterDropdownOptionsSubcategory}\n          />\n\n          <FilterInput\n            label=\"PRETRAGA:\"\n            rightContent={<SearchIcon />}\n            name=\"search\"\n            onChange={onSearch}\n            value={search}\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={tableHeadsTaxesOverview}\n        data={fees}\n        isLoading={loading}\n        style={{marginBottom: 22}}\n        emptyMessage={'Još uvjek nema taksi'}\n        onRowClick={(row: FinesOverviewItem) => navigate(`/finance/fines-taxes/taxes/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteFeeModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteFeeModal}\n        subTitle={'Ova taksa će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeleteFeeModal(null)}\n        onConfirm={() => handleDeleteFee()}\n      />\n    </>\n  );\n};\n\nexport default TaxesOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/landingPage/landingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/landingPage/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/additionalExpenses/additionalExpensesOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/additionalExpenses/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contracts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contractsDetails/contractsDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contractsEntry/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contractsEntry/contractsEntry.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5377,5380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5377,5380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6705,6708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6705,6708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":423,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":423,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15169,15172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15169,15172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":433,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":433,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15618,15621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15618,15621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":445,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":445,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16070,16073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16070,16073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":455,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16516,16519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16516,16519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, Dropdown, Input, Table, TableHead, Typography} from 'client-library';\nimport {useEffect, useMemo} from 'react';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {generateDropdownOptions} from '../../../../constants.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useCalculateAdditionalExpenses from '../../../../services/graphQL/calculateAdditionalExpenses/useCalculateAdditionalExpenses.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useInsertInvoice from '../../../../services/graphQL/invoice/useInsertInvoice.ts';\nimport useGetSuppliers from '../../../../services/graphQL/suppliers/useGetSuppliers.ts';\nimport useGetTaxAuthorityCodebook from '../../../../services/graphQL/taxAuthorityCodebook/useGetTaxAuthorityCodebookOverview.tsx';\nimport Footer from '../../../../shared/footer.ts';\nimport {ContractItem} from '../../../../types/graphQL/invoice.ts';\nimport {createDropdownOptions} from '../../../../utils/createOptions.ts';\nimport {parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {contractsSchema} from './constants.tsx';\nimport {ContractsFormContainer, HalfWidthContainer, Row} from './styles.ts';\n\ntype ContractEntryForm = yup.InferType<typeof contractsSchema>;\ninterface ContractFormProps {\n  contract?: ContractItem;\n}\n\nconst ContractsEntry = ({contract}: ContractFormProps) => {\n  const {\n    alert,\n    navigation: {navigate},\n  } = useAppContext();\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    watch,\n    formState: {errors},\n  } = useForm<ContractEntryForm>({\n    resolver: yupResolver(contractsSchema),\n  });\n  const {\n    net_price,\n    gross_price,\n    previous_income_net,\n    previous_income_gross,\n    tax_authority_codebook_id,\n    municipality_id,\n    supplier_id,\n  } = watch();\n\n  const {suppliers} = useGetSuppliers({});\n\n  const {data: taxAuthorityCodebook} = useGetTaxAuthorityCodebook();\n  const {suppliers: municipalities} = useGetSuppliers({entity: 'municipalities'});\n  const {counts} = useGetCountOverview({level: 3});\n  const {insertInvoice, loading} = useInsertInvoice();\n\n  const {data: additionalExpenses, calculateAdditionalExpenses} = useCalculateAdditionalExpenses({\n    tax_authority_codebook_id: tax_authority_codebook_id?.id ? tax_authority_codebook_id?.id : null,\n    municipality_id: municipality_id?.id ? municipality_id?.id : null,\n    net_price: net_price ? Number(net_price) : null,\n    gross_price: gross_price ? Number(gross_price) : null,\n    previous_income_net: previous_income_net ? Number(previous_income_net) : null,\n    previous_income_gross: previous_income_gross ? Number(previous_income_gross) : null,\n  });\n\n  const optionsForTaxAuthorityCodebook = createDropdownOptions(taxAuthorityCodebook || []);\n\n  const {fields, remove, insert} = useFieldArray({\n    control,\n    name: 'additionalExpenses',\n    keyName: 'key',\n  });\n\n  const dropdowncountsOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n\n  const onCount = () => {\n    calculateAdditionalExpenses();\n  };\n\n  const additionalExpensesTableHeads: TableHead[] = [\n    {\n      title: 'Iznos',\n      accessor: 'price',\n      type: 'custom',\n      renderContents: price => <Typography content={price || ''} />,\n    },\n    {\n      title: 'Konto',\n      accessor: 'account',\n      type: 'custom',\n      renderContents: (_item, _row, index) => (\n        <Controller\n          name={`additionalExpenses.${index}.account`}\n          control={control}\n          render={({field: {onChange, name, value}}) => (\n            <div style={{minWidth: '200px'}}>\n              <Dropdown\n                options={dropdowncountsOptions}\n                name={name}\n                value={value}\n                onChange={onChange}\n                error={errors?.additionalExpenses?.[index]?.account?.message}\n              />\n            </div>\n          )}\n        />\n      ),\n    },\n    {title: 'Opis', accessor: 'title'},\n    {\n      title: 'Subjekat',\n      accessor: 'subject',\n      type: 'custom',\n      renderContents: subject => <Typography content={subject?.title} />,\n    },\n    {\n      title: 'Račun banke',\n      accessor: 'bank_account',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        const supplierOptions = suppliers?.find(supplier => supplier.id === row.subject.id);\n        const bankAccounts = supplierOptions?.bank_accounts.map(account => ({id: account, title: account}));\n        return (\n          <>\n            <Controller\n              name={`additionalExpenses.${index}.bank_account`}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <div style={{minWidth: '200px'}}>\n                  <Dropdown\n                    options={bankAccounts || []}\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    error={errors?.additionalExpenses?.[index]?.bank_account?.message}\n                  />\n                </div>\n              )}\n            />\n          </>\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  const onSubmit = async (data: any) => {\n    if (loading) return;\n\n    const payload = {\n      id: data?.id,\n      invoice_number: data.invoice_number,\n      tax_authority_codebook_id: data?.tax_authority_codebook_id?.id,\n      municipality_id: data?.municipality_id?.id,\n      supplier_id: data?.supplier_id?.id,\n      date_of_invoice: parseDateForBackend(data?.date_of_invoice),\n      date_of_start: parseDateForBackend(data?.date_of_start),\n      receipt_date: parseDateForBackend(data?.receipt_date),\n      sss_invoice_receipt_date: parseDateForBackend(data?.sss_invoice_receipt_date),\n      type: 'contracts',\n      supplier_title: data.supplier_title,\n      issuer: data?.issuer,\n      activity_id: data?.activity_id?.id,\n      source_of_funding: data?.source_of_funding?.id,\n      date_of_payment: parseDateForBackend(data?.date_of_payment),\n      description: data?.description,\n      additional_expenses: fields.map((_, index) => ({\n        title: data.additionalExpenses[index]?.title,\n        price: data.additionalExpenses[index]?.price,\n        account_id: data.additionalExpenses[index]?.account?.id,\n        bank_account: data.additionalExpenses[index]?.bank_account.id,\n        subject_id: index === fields.length - 1 ? data?.supplier_id?.id : data.additionalExpenses[index]?.subject.id,\n      })),\n    };\n\n    insertInvoice(\n      payload as any,\n      () => {\n        alert.success('Uspješno dodavanje ugovora.');\n        navigate('/finance/liabilities-receivables/liabilities/contracts');\n      },\n      () => alert.error('Neuspješno dodavanje ugovora.'),\n    );\n\n    return;\n  };\n\n  useEffect(() => {\n    if (additionalExpenses) {\n      if (additionalExpenses && additionalExpenses.length) {\n        for (let i = fields.length - 1; i >= 0; i--) {\n          remove(i);\n        }\n\n        additionalExpenses.forEach((article, index) => {\n          insert(index, {\n            id: Math.random(),\n            title: article.title,\n            price: article.price,\n            account: {id: 0, title: ''},\n            subject:\n              article.subject.title !== ''\n                ? {id: article.subject.id, title: article.subject.title}\n                : {id: supplier_id?.id, title: supplier_id?.title},\n            bank_account: {id: '', title: ''},\n            organization_unit_id: article.organization_unit,\n          });\n        });\n      }\n    }\n  }, [additionalExpenses]);\n\n  useEffect(() => {\n    if (contract) {\n      reset({\n        id: contract.id,\n        supplier_id: {id: contract.supplier.id, title: contract.supplier.title},\n        supplier_title: contract.supplier_title,\n        invoice_number: contract.invoice_number,\n        date_of_invoice: contract.date_of_invoice !== null ? new Date(contract.date_of_invoice) : undefined,\n        date_of_start: contract.date_of_start !== null ? new Date(contract.date_of_start) : undefined,\n        receipt_date: contract.receipt_date !== null ? new Date(contract.receipt_date) : undefined,\n        date_of_payment: contract.date_of_payment !== null ? new Date(contract.date_of_payment) : undefined,\n        description: contract?.description,\n        issuer: contract?.issuer,\n        municipality_id: {id: contract.municipality.id, title: contract.municipality.title},\n        tax_authority_codebook_id: {\n          id: contract.tax_authority_codebook.id,\n          title: contract.tax_authority_codebook.title,\n        },\n        additionalExpenses: contract.additional_expenses.map((_, index) => ({\n          id: contract.additional_expenses[index]?.id,\n          title: contract.additional_expenses[index]?.title,\n          price: contract.additional_expenses[index]?.price,\n          bank_account: {\n            id: contract.additional_expenses[index]?.bank_account,\n            title: contract.additional_expenses[index]?.bank_account,\n          },\n          account: {\n            id: contract.additional_expenses[index]?.account?.id,\n            title: contract.additional_expenses[index]?.account?.title,\n          },\n          subject: {\n            id: contract.additional_expenses[index]?.subject?.id,\n            title: contract.additional_expenses[index]?.subject?.title,\n          },\n        })),\n      });\n    }\n  }, [contract]);\n\n  return (\n    <ContractsFormContainer>\n      <>\n        <Row>\n          <Controller\n            name=\"supplier_id\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"SUBJEKT:\"\n                placeholder=\"Odaberite ime subjekta\"\n                options={suppliers}\n                error={errors.supplier_id?.message}\n              />\n            )}\n          />\n          <Input\n            {...register('invoice_number')}\n            label=\"DJELOVODNI BROJ:\"\n            placeholder={'Unesite djelovodni broj'}\n            error={errors.invoice_number?.message}\n          />\n\n          <Input\n            {...register('issuer')}\n            label=\"SUBJEKT KOJI JE IZDAO RJEŠENJE:\"\n            placeholder=\"Odaberite subjekt\"\n            error={errors.issuer?.message}\n          />\n        </Row>\n\n        <Row>\n          {/*Treba da se prikazu opcije iz sifarnika kad se zavrsi budzet*/}\n          <Controller\n            name={'activity_id'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"AKTIVNOST:\"\n                placeholder={'Odaberite aktivnost'}\n                options={[]}\n              />\n            )}\n          />\n          <Controller\n            name={'date_of_start'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"TRAJANJE UGOVORA:\"\n                placeholder={'Odaberite trajanje ugovora'}\n                onChange={onChange}\n                error={errors.date_of_start?.message}\n              />\n            )}\n          />\n          <Controller\n            name={'date_of_invoice'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM UGOVORA:\"\n                onChange={onChange}\n                error={errors.date_of_invoice?.message}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name=\"date_of_payment\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM VALUTE:\"\n                onChange={onChange}\n                error={errors.date_of_payment?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"receipt_date\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA RAČUNOVODSTVA:\"\n                onChange={onChange}\n              />\n            )}\n          />\n\n          <Controller\n            name=\"sss_invoice_receipt_date\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA RJEŠENJA SSS:\"\n                onChange={onChange}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Input {...register('description')} label=\"OPIS:\" textarea placeholder=\"Unesite opis\" />\n        </Row>\n        {!!supplier_id && (\n          <>\n            <HalfWidthContainer>\n              <Row>\n                <Controller\n                  name=\"municipality_id\"\n                  control={control}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value}\n                      onChange={onChange}\n                      label=\"OPŠTINA:\"\n                      placeholder={'Odaberite opštinu'}\n                      options={municipalities}\n                      isSearchable\n                      error={errors.municipality_id?.message}\n                    />\n                  )}\n                />\n\n                <Controller\n                  name={'tax_authority_codebook_id'}\n                  control={control}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value}\n                      onChange={onChange}\n                      label=\"ŠIFARNIK PORESKE UPRAVE:\"\n                      placeholder={'Odaberite šifarnik'}\n                      options={optionsForTaxAuthorityCodebook}\n                      error={errors.tax_authority_codebook_id?.message}\n                    />\n                  )}\n                />\n              </Row>\n            </HalfWidthContainer>\n            <HalfWidthContainer>\n              <Row>\n                <Input\n                  {...register('gross_price')}\n                  label=\"IZNOS ZA UPLATU BRUTO:\"\n                  placeholder=\"Unesite iznos\"\n                  type={'number'}\n                  inputMode={'decimal'}\n                  leftContent={<div>€</div>}\n                  disabled={net_price as any}\n                  error={errors.gross_price?.message}\n                />\n                <Input\n                  {...register('previous_income_gross')}\n                  label=\"PRETHODNA PRIMANJA U MJESECU BRUTO:\"\n                  placeholder=\"Unesite prethodna primanja\"\n                  type={'number'}\n                  inputMode={'decimal'}\n                  leftContent={<div>€</div>}\n                  disabled={previous_income_net as any}\n                  error={errors.previous_income_gross?.message}\n                />\n              </Row>\n              <Row>\n                <Input\n                  {...register('net_price')}\n                  label={'NETO IZNOS:'}\n                  placeholder={'Unesite neto iznos'}\n                  type={'number'}\n                  inputMode={'decimal'}\n                  leftContent={<div>€</div>}\n                  disabled={gross_price as any}\n                  error={errors.net_price?.message}\n                />\n                <Input\n                  {...register('previous_income_net')}\n                  label=\"PRETHODNA PRIMANJA U MJESECU NETO:\"\n                  placeholder=\"Unesite prethodna primanja\"\n                  type={'number'}\n                  inputMode={'decimal'}\n                  leftContent={<div>€</div>}\n                  disabled={previous_income_gross as any}\n                  error={errors.previous_income_net?.message}\n                />\n              </Row>\n              <Button content=\"Obračunaj\" variant={'primary'} onClick={() => onCount()} />\n            </HalfWidthContainer>\n          </>\n        )}\n\n        {!!fields.length && <Table tableHeads={additionalExpensesTableHeads} data={fields} />}\n        <Footer>\n          <Button\n            content=\"Odustani\"\n            variant=\"secondary\"\n            style={{width: 130}}\n            onClick={() => navigate('/finance/liabilities-receivables/liabilities/contracts')}\n          />\n          <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} disabled={!fields.length} />\n        </Footer>\n      </>\n    </ContractsFormContainer>\n  );\n};\n\nexport default ContractsEntry;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contractsEntry/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contractsOverview/contractsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contractsOverview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisionsDetails/decisionsDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisionsEntry/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisionsEntry/decisionsEntry.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5427,5430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5427,5430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6745,6748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6745,6748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":422,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15222,15225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15222,15225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":432,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":432,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15671,15674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15671,15674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":444,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16123,16126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16123,16126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":454,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16569,16572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16569,16572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, Dropdown, Input, Table, TableHead, Typography} from 'client-library';\nimport {useEffect, useMemo} from 'react';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {generateDropdownOptions} from '../../../../constants.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useCalculateAdditionalExpenses from '../../../../services/graphQL/calculateAdditionalExpenses/useCalculateAdditionalExpenses.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useInsertInvoice from '../../../../services/graphQL/invoice/useInsertInvoice.ts';\nimport useGetSuppliers from '../../../../services/graphQL/suppliers/useGetSuppliers.ts';\nimport useGetTaxAuthorityCodebook from '../../../../services/graphQL/taxAuthorityCodebook/useGetTaxAuthorityCodebookOverview.tsx';\nimport Footer from '../../../../shared/footer.ts';\nimport {DecisionItem} from '../../../../types/graphQL/invoice.ts';\nimport {createDropdownOptions} from '../../../../utils/createOptions.ts';\nimport {parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {SourceOfFunding} from '../constants.tsx';\nimport {decisionsSchema} from './constants.tsx';\nimport {DecisionsFormContainer, HalfWidthContainer, Row} from './styles.ts';\n\ntype DecisionEntryForm = yup.InferType<typeof decisionsSchema>;\ninterface DecisionFormProps {\n  decision?: DecisionItem;\n}\n\nconst DecisionsEntry = ({decision}: DecisionFormProps) => {\n  const {\n    alert,\n    navigation: {navigate},\n  } = useAppContext();\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    watch,\n    reset,\n    formState: {errors},\n  } = useForm<DecisionEntryForm>({\n    resolver: yupResolver(decisionsSchema),\n  });\n  const {\n    net_price,\n    gross_price,\n    previous_income_net,\n    previous_income_gross,\n    tax_authority_codebook_id,\n    municipality_id,\n    supplier_id,\n  } = watch();\n\n  const {suppliers} = useGetSuppliers({});\n  const {suppliers: municipalities} = useGetSuppliers({entity: 'municipalities'});\n  const {data: taxAuthorityCodebook} = useGetTaxAuthorityCodebook();\n  const {counts} = useGetCountOverview({level: 3});\n  const {insertInvoice, loading} = useInsertInvoice();\n\n  const optionsForTaxAuthorityCodebook = createDropdownOptions(taxAuthorityCodebook || []);\n\n  const {data: additionalExpenses, calculateAdditionalExpenses} = useCalculateAdditionalExpenses({\n    tax_authority_codebook_id: tax_authority_codebook_id?.id ? tax_authority_codebook_id?.id : null,\n    municipality_id: municipality_id?.id ? municipality_id?.id : null,\n    net_price: net_price ? Number(net_price) : null,\n    gross_price: gross_price ? Number(gross_price) : null,\n    previous_income_net: previous_income_net ? Number(previous_income_net) : null,\n    previous_income_gross: previous_income_gross ? Number(previous_income_gross) : null,\n  });\n\n  const {fields, remove, insert} = useFieldArray({\n    control,\n    name: 'additionalExpenses',\n    keyName: 'key',\n  });\n\n  const dropdowncountsOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n\n  const onCount = () => {\n    calculateAdditionalExpenses();\n  };\n\n  const additionalExpensesTableHeads: TableHead[] = [\n    {\n      title: 'Iznos',\n      accessor: 'price',\n      type: 'custom',\n      renderContents: price => <Typography content={price || ''} />,\n    },\n    {\n      title: 'Konto',\n      accessor: 'account',\n      type: 'custom',\n      renderContents: (_item, _row, index) => (\n        <Controller\n          name={`additionalExpenses.${index}.account`}\n          control={control}\n          render={({field: {onChange, name, value}}) => (\n            <div style={{minWidth: '200px'}}>\n              <Dropdown\n                options={dropdowncountsOptions}\n                name={name}\n                value={value}\n                onChange={onChange}\n                error={errors?.additionalExpenses?.[index]?.account?.message}\n              />\n            </div>\n          )}\n        />\n      ),\n    },\n    {title: 'Opis', accessor: 'title'},\n    {\n      title: 'Subjekat',\n      accessor: 'subject',\n      type: 'custom',\n      renderContents: subject => <Typography content={subject?.title} />,\n    },\n    {\n      title: 'Račun banke',\n      accessor: 'bank_account',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        const supplierOptions = suppliers?.find(supplier => supplier.id === row.subject.id);\n        const bankAccounts = supplierOptions?.bank_accounts.map(account => ({id: account, title: account}));\n\n        return (\n          <>\n            <Controller\n              name={`additionalExpenses.${index}.bank_account`}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <div style={{minWidth: '200px'}}>\n                  <Dropdown\n                    options={bankAccounts || []}\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    error={errors?.additionalExpenses?.[index]?.bank_account?.message}\n                  />\n                </div>\n              )}\n            />\n          </>\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  const onSubmit = async (data: any) => {\n    if (loading) return;\n\n    const payload = {\n      id: data?.id,\n      invoice_number: data.invoice_number,\n      tax_authority_codebook_id: data?.tax_authority_codebook_id?.id,\n      municipality_id: data?.municipality_id?.id,\n      supplier_id: data?.supplier_id?.id,\n      date_of_invoice: parseDateForBackend(data?.date_of_invoice),\n      receipt_date: parseDateForBackend(data?.receipt_date),\n      sss_invoice_receipt_date: parseDateForBackend(data?.sss_invoice_receipt_date),\n      type: 'decisions',\n      type_of_decision: data?.type_of_decision?.id,\n      supplier_title: data.supplier_title,\n      issuer: data?.issuer,\n      activity_id: data?.activity_id?.id,\n      source_of_funding: data?.source_of_funding?.id,\n      date_of_payment: parseDateForBackend(data?.date_of_payment),\n      description: data?.description,\n      additional_expenses: fields.map((_, index) => ({\n        title: data.additionalExpenses[index]?.title,\n        price: data.additionalExpenses[index]?.price,\n        account_id: data.additionalExpenses[index]?.account?.id,\n        bank_account: data.additionalExpenses[index]?.bank_account?.id,\n        subject_id: index === fields.length - 1 ? data?.supplier_id?.id : data.additionalExpenses[index]?.subject.id,\n      })),\n    };\n\n    insertInvoice(\n      payload as any,\n      () => {\n        alert.success('Uspješno dodavanje rješenja.');\n        navigate('/finance/liabilities-receivables/liabilities/decisions');\n      },\n      () => alert.error('Neuspješno dodavanje rješenja.'),\n    );\n\n    return;\n  };\n\n  useEffect(() => {\n    if (additionalExpenses) {\n      if (additionalExpenses && additionalExpenses.length) {\n        for (let i = fields.length - 1; i >= 0; i--) {\n          remove(i);\n        }\n\n        additionalExpenses.forEach((article, index) => {\n          insert(index, {\n            id: Math.random(),\n            title: article.title,\n            price: article.price,\n            account: {id: 0, title: ''},\n            subject:\n              article.subject.title !== ''\n                ? {id: article.subject.id, title: article.subject.title}\n                : {id: supplier_id?.id, title: supplier_id?.title},\n            bank_account: {id: '', title: ''},\n            organization_unit_id: article.organization_unit,\n          });\n        });\n      }\n    }\n  }, [additionalExpenses]);\n\n  useEffect(() => {\n    if (decision) {\n      reset({\n        ...decision,\n        id: decision.id,\n        supplier_id: {id: decision.supplier.id, title: decision.supplier.title},\n        supplier_title: decision.supplier_title,\n        invoice_number: decision.invoice_number,\n        date_of_invoice: decision.date_of_invoice !== null ? new Date(decision.date_of_invoice) : undefined,\n        receipt_date: decision.receipt_date !== null ? new Date(decision.receipt_date) : undefined,\n        date_of_payment: decision.date_of_payment !== null ? new Date(decision.date_of_payment) : undefined,\n        description: decision?.description,\n        issuer: decision?.issuer,\n        source_of_funding: {id: decision.source_of_funding, title: decision.source_of_funding},\n        municipality_id: {id: decision.municipality.id, title: decision.municipality.title},\n        tax_authority_codebook_id: {\n          id: decision.tax_authority_codebook.id,\n          title: decision.tax_authority_codebook.title,\n        },\n        additionalExpenses: decision.additional_expenses.map((_, index) => ({\n          id: decision.additional_expenses[index]?.id,\n          title: decision.additional_expenses[index]?.title,\n          price: decision.additional_expenses[index]?.price,\n          bank_account: {\n            id: decision.additional_expenses[index]?.bank_account,\n            title: decision.additional_expenses[index]?.bank_account,\n          },\n          account: {\n            id: decision.additional_expenses[index]?.account?.id,\n            title: decision.additional_expenses[index]?.account?.title,\n          },\n          subject: {\n            id: decision.additional_expenses[index]?.subject?.id,\n            title: decision.additional_expenses[index]?.subject?.title,\n          },\n        })),\n      });\n    }\n  }, [decision]);\n\n  return (\n    <DecisionsFormContainer>\n      <>\n        <Row>\n          <Controller\n            name=\"supplier_id\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"SUBJEKT:\"\n                placeholder=\"Odaberite ime subjekta\"\n                options={suppliers}\n                error={errors?.supplier_id?.message}\n              />\n            )}\n          />\n          <Input\n            {...register('invoice_number')}\n            label=\"BROJ PREDMETA:\"\n            placeholder=\"Unesite broj predmeta\"\n            error={errors.invoice_number?.message}\n          />\n          <Input\n            {...register('issuer')}\n            label=\"SUBJEKT KOJI JE IZDAO RJEŠENJE:\"\n            placeholder=\"Odaberite subjekt\"\n            error={errors.issuer?.message}\n          />\n        </Row>\n        <Row>\n          {/*Treba da se prikazu opcije iz sifarnika kad se zavrsi budzet*/}\n          <Controller\n            name={'activity_id'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"AKTIVNOST:\"\n                placeholder={'Odaberite aktivnost'}\n                options={[]}\n              />\n            )}\n          />\n          <Controller\n            name=\"source_of_funding\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"IZVOR FINANSIRANJA:\"\n                placeholder=\"Odaberite izvor finansiranja\"\n                options={SourceOfFunding}\n                error={errors.source_of_funding?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"date_of_invoice\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM RJEŠENJA:\"\n                onChange={onChange}\n                error={errors.date_of_invoice?.message}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name=\"date_of_payment\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM VALUTE:\"\n                onChange={onChange}\n                error={errors.date_of_payment?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"receipt_date\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA RJEŠENJA:\"\n                onChange={onChange}\n              />\n            )}\n          />\n          <Controller\n            name=\"sss_invoice_receipt_date\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA RJEŠENJA SSS:\"\n                onChange={onChange}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Input {...register('description')} label=\"OPIS:\" textarea placeholder=\"Unesite opis\" />\n        </Row>\n        {!!supplier_id && (\n          <>\n            <HalfWidthContainer>\n              <Row>\n                <Controller\n                  name=\"municipality_id\"\n                  control={control}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value}\n                      onChange={onChange}\n                      label=\"OPŠTINA:\"\n                      placeholder=\"Odaberite opštinu\"\n                      options={municipalities}\n                      isSearchable\n                      error={errors.municipality_id?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"tax_authority_codebook_id\"\n                  control={control}\n                  render={({field: {name, value, onChange}}) => (\n                    <Dropdown\n                      name={name}\n                      value={value}\n                      onChange={onChange}\n                      label=\"ŠIFARNIK PORESKE UPRAVE:\"\n                      placeholder=\"Odaberite šifarnik\"\n                      options={optionsForTaxAuthorityCodebook}\n                      error={errors.tax_authority_codebook_id?.message}\n                    />\n                  )}\n                />\n              </Row>\n            </HalfWidthContainer>\n            <HalfWidthContainer>\n              <Row>\n                <Input\n                  {...register('gross_price')}\n                  label=\"IZNOS ZA UPLATU BRUTO:\"\n                  placeholder=\"Unesite iznos\"\n                  type=\"number\"\n                  inputMode=\"decimal\"\n                  leftContent={<div>€</div>}\n                  disabled={net_price as any}\n                  error={errors.gross_price?.message}\n                />\n                <Input\n                  {...register('previous_income_gross')}\n                  label=\"PRETHODNA PRIMANJA U MJESECU BRUTO:\"\n                  placeholder=\"Unesite prethodna primanja\"\n                  type={'number'}\n                  inputMode={'decimal'}\n                  leftContent={<div>€</div>}\n                  disabled={previous_income_net as any}\n                  error={errors.previous_income_gross?.message}\n                />\n              </Row>\n              <Row>\n                <Input\n                  {...register('net_price')}\n                  label={'NETO IZNOS:'}\n                  placeholder={'Unesite neto iznos'}\n                  type={'number'}\n                  inputMode={'decimal'}\n                  leftContent={<div>€</div>}\n                  disabled={gross_price as any}\n                  error={errors.net_price?.message}\n                />\n                <Input\n                  {...register('previous_income_net')}\n                  label=\"PRETHODNA PRIMANJA U MJESECU NETO:\"\n                  placeholder=\"Unesite prethodna primanja\"\n                  type={'number'}\n                  inputMode={'decimal'}\n                  leftContent={<div>€</div>}\n                  disabled={previous_income_gross as any}\n                  error={errors.previous_income_net?.message}\n                />\n              </Row>\n              <Button content=\"Obračunaj\" variant={'primary'} onClick={() => onCount()} />\n            </HalfWidthContainer>\n          </>\n        )}\n\n        {!!fields.length && <Table tableHeads={additionalExpensesTableHeads} data={fields} />}\n\n        <Footer>\n          <Button\n            content=\"Odustani\"\n            variant=\"secondary\"\n            style={{width: 130}}\n            onClick={() => navigate('/finance/liabilities-receivables/liabilities/decisions')}\n          />\n          <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} disabled={!fields.length} />\n        </Footer>\n      </>\n    </DecisionsFormContainer>\n  );\n};\n\nexport default DecisionsEntry;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisionsEntry/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisionsOverview/decisionsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisionsOverview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoiceDetails/invoiceDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoiceEntry/InvoiceEntry.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5141,5144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5141,5144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6957,6960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6957,6960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":265,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8722,8725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8722,8725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":371,"column":29,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":371,"endColumn":84},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 12.","line":439,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":439,"endColumn":13,"fix":{"range":[15532,15544],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 12.","line":440,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":440,"endColumn":13,"fix":{"range":[15601,15613],"text":"              "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":726,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":726,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26453,26456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26453,26456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":751,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":751,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27314,27317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27314,27317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {\n  Button,\n  Datepicker,\n  Dropdown,\n  FileUpload,\n  Input,\n  Table,\n  TableHead,\n  Theme,\n  Typography,\n  XIcon,\n} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport FileListComponent from '../../../../components/fileList/fileList.tsx';\nimport {generateDropdownOptions} from '../../../../constants.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useInsertInvoice from '../../../../services/graphQL/invoice/useInsertInvoice.ts';\nimport useGetOrderList from '../../../../services/graphQL/orders/useGetOrders.ts';\nimport useGetSuppliers from '../../../../services/graphQL/suppliers/useGetSuppliers.ts';\nimport {FileUploadWrapper} from '../../../../shared/FileUploadWrapper.ts';\nimport {FlexRow} from '../../../../shared/flex.ts';\nimport Footer from '../../../../shared/footer.ts';\nimport PlusButton from '../../../../shared/plusButton.tsx';\nimport {FileItem, FileResponseItem} from '../../../../types/fileUploadType.ts';\nimport {pdvOptions} from '../constants';\nimport {FileListWrapper} from '../invoicesOverview/styles.ts';\nimport {invoiceSchema} from './constants.tsx';\nimport {InvoiceEntryForm, PlusButtonWrapper, Row, StyledSwitch} from './styles';\nimport {TypeOptions, invoiceTypeOptions} from './types.ts';\nimport {InvoiceItem} from '../../../../types/graphQL/invoice.ts';\nimport {parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {DropdownData} from '../../../../types/dropdownData.ts';\n\ntype InvoiceEntryForm = yup.InferType<typeof invoiceSchema>;\n\ninterface InvoiceFormProps {\n  invoice?: InvoiceItem;\n}\n\nconst InvoiceEntry = ({invoice}: InvoiceFormProps) => {\n  const [uploadedFile, setUploadedFile] = useState<FileList | null>(null);\n  const [showFileUploadError, setShowFileUploadError] = useState<boolean>(false);\n  const [accountingInvoiceFile, setAccountingInvoiceFile] = useState<FileItem | null>(null);\n  const [accountingProFormaInvoiceFile, setAccountingProFormaInvoiceFile] = useState<FileItem | null>(null);\n\n  const {\n    navigation: {navigate},\n    alert,\n    fileService: {uploadFile},\n    contextMain,\n  } = useAppContext();\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    watch,\n    formState: {errors},\n    setValue,\n    reset,\n  } = useForm<InvoiceEntryForm>({\n    resolver: yupResolver(invoiceSchema),\n  });\n\n  const selectedOrderOption = watch('order_id')?.id;\n\n  const [invoiceType, invoice_number, date_of_invoice, receipt_date, pro_forma_invoice_date] = watch([\n    'invoice_type',\n    'invoice_number',\n    'date_of_invoice',\n    'receipt_date',\n    'pro_forma_invoice_date',\n  ]);\n\n  const {fields, append, remove} = useFieldArray({name: 'articles', control});\n\n  const isManual = invoiceType?.id === 'manual';\n\n  const {suppliers} = useGetSuppliers({});\n  const {orders} = useGetOrderList({\n    supplier_id: watch('supplier_id')?.id,\n    finance_overview: true,\n    page: 1,\n    size: 1000,\n  });\n\n  const {counts} = useGetCountOverview({level: 3});\n  const {insertInvoice, loading} = useInsertInvoice();\n\n  const supplierBankAccounts = suppliers.find(supplier => supplier.id === watch('supplier_id')?.id)?.bank_accounts;\n\n  const dropdowncountsOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n    setShowFileUploadError(false);\n  };\n\n  const invoiceTableHeads: TableHead[] = useMemo(() => {\n    return [\n      {\n        title: 'Naziv stavke',\n        accessor: 'title',\n        type: 'custom',\n        renderContents: (title: string, _, index) => {\n          if (isManual) {\n            return (\n              <Input\n                {...register(`articles.${index}.title`)}\n                style={{minWidth: '100px'}}\n                error={errors.articles?.[index]?.title?.message}\n              />\n            );\n          } else {\n            return <Input value={title} disabled />;\n          }\n        },\n      },\n      {\n        title: 'Neto iznos',\n        accessor: 'net_price',\n        type: 'custom',\n        renderContents: (_item, _row, index) => {\n          return (\n            <Input\n              {...register(`articles.${index}.net_price`)}\n              style={{minWidth: '100px'}}\n              leftContent={<>Є</>}\n              error={errors.articles?.[index]?.net_price?.message}\n              disabled={!isManual}\n            />\n          );\n        },\n      },\n      {\n        title: 'Stopa PDV-a',\n        accessor: 'vat_percentage',\n        type: 'custom',\n        renderContents: (_item, _row, index) => {\n          return (\n            <Controller\n              name={`articles.${index}.vat_percentage`}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <div style={{minWidth: '100px'}}>\n                  <Dropdown options={pdvOptions} name={name} value={value as any} onChange={onChange} />\n                </div>\n              )}\n            />\n          );\n        },\n      },\n      {\n        title: 'PDV',\n        accessor: 'vat_price',\n        type: 'custom',\n        renderContents: (_item, _row, index) => {\n          const vatPercentage = watch(`articles.${index}.vat_percentage`);\n          const vatPrice = vatPercentage?.id !== 0 ? calculateVatPrice(index) : 0.0;\n\n          return <Input value={vatPrice?.toFixed(2)} disabled leftContent={<>Є</>} />;\n        },\n      },\n      {\n        title: 'Količina',\n        accessor: 'amount',\n        type: 'custom',\n        renderContents: (_item, _row, index) => {\n          return (\n            <Input\n              {...register(`articles.${index}.amount`)}\n              style={{minWidth: '100px'}}\n              error={errors.articles?.[index]?.amount?.message}\n              disabled={!isManual}\n            />\n          );\n        },\n      },\n      {\n        title: 'Ukupan iznos',\n        accessor: '',\n        type: 'custom',\n        renderContents: (_item, _row, index) => {\n          const vatPercentage = watch(`articles.${index}.vat_percentage`);\n          const total = vatPercentage ? calculateTotalPrice(index) : 0;\n\n          return <Input value={Number(total)?.toFixed(2)} disabled leftContent={<>Є</>} />;\n        },\n      },\n      {\n        title: 'Konto',\n        accessor: 'account',\n        type: 'custom',\n        renderContents: (_item, _row, index) => (\n          <Controller\n            name={`articles.${index}.account`}\n            control={control}\n            render={({field: {onChange, name, value}}) => (\n              <div style={{minWidth: '200px'}}>\n                <Dropdown\n                  options={dropdowncountsOptions}\n                  name={name}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.articles?.[index]?.account?.message}\n                />\n              </div>\n            )}\n          />\n        ),\n      },\n      {\n        title: 'Opis',\n        accessor: 'description',\n        type: 'custom',\n        renderContents: (description: string, _, index) => {\n          if (isManual) {\n            return <Input {...register(`articles.${index}.description`)} style={{minWidth: '200px'}} />;\n          } else {\n            return <Input value={description} disabled textarea />;\n          }\n        },\n      },\n      {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n    ];\n  }, [invoiceType, register, control, dropdowncountsOptions]);\n\n  const calculateTotalPrice = (index: number) => {\n    const net_price = watch('articles')?.[index].net_price;\n    const amount = watch('articles')?.[index].amount;\n    const vat_percentage = watch('articles')?.[index]?.vat_percentage?.id;\n    const totalPrice =\n      amount && net_price && vat_percentage && vat_percentage !== 0\n        ? net_price * (1 + vat_percentage / 100) * amount\n        : net_price && amount && net_price * amount;\n    return totalPrice;\n  };\n\n  const calculateVatPrice = (index: number) => {\n    const net_price = watch('articles')?.[index]?.net_price;\n    const vat_percentage = watch('articles')?.[index]?.vat_percentage;\n    const vatPrice = net_price && vat_percentage?.id ? net_price * (vat_percentage?.id / 100) : 0;\n    return vatPrice;\n  };\n\n  const handleAddRow = () => {\n    append({\n      id: 0,\n      title: '',\n      net_price: 0,\n      vat_price: 0,\n      description: '',\n      account: null,\n      vat_percentage: null,\n      amount: 1,\n    });\n  };\n\n  const onSubmit = async (data: any) => {\n    if (loading) return;\n\n    if (uploadedFile) {\n      setShowFileUploadError(false);\n\n      const formData = new FormData();\n      formData.append('file', uploadedFile[0]);\n\n      await uploadFile(formData, (files: FileResponseItem[]) => {\n        setUploadedFile(null);\n        const payload = {\n          id: data?.id,\n          supplier_id: data?.supplier_id?.id,\n          order_id: selectedOrderOption,\n          is_invoice: data.is_invoice.id,\n          file_id: type.id === true ? files[0].id : null,\n          pro_forma_invoice_file_id: type.id === false ? files[0].id : null,\n          invoice_number: invoice_number,\n          date_of_invoice: date_of_invoice ? parseDateForBackend(date_of_invoice) : null,\n          receipt_date: receipt_date ? parseDateForBackend(receipt_date) : null,\n          sss_invoice_receipt_date: parseDateForBackend(data?.sss_invoice_receipt_date),\n          bank_account: data?.bank_account?.id,\n          date_of_payment: parseDateForBackend(data?.date_of_payment),\n          description: data?.description,\n          passed_to_accounting: data?.passed_to_accounting,\n          passed_to_inventory: data?.passed_to_inventory,\n          type: 'invoice',\n          organization_unit_id: contextMain?.organization_unit?.id,\n          pro_forma_invoice_number: data?.pro_forma_invoice_number,\n          pro_forma_invoice_date: pro_forma_invoice_date ? parseDateForBackend(pro_forma_invoice_date) : null,\n          articles: fields.map((_, index) => ({\n            title: data.articles[index]?.title,\n            net_price: data.articles[index]?.net_price,\n            description: data.articles[index]?.description,\n            account_id: data.articles[index]?.account?.id,\n            vat_percentage: data.articles[index]?.vat_percentage?.id,\n            amount: data.articles[index]?.amount,\n          })),\n        };\n        insertInvoice(\n          payload,\n          () => {\n            alert.success('Uspješno dodavanje računa.');\n            navigate('/finance/liabilities-receivables/liabilities/invoices');\n          },\n          () => alert.error('Neuspješno dodavanje računa.'),\n        );\n      });\n\n      return;\n    } else if (isManual && !uploadedFile && !invoice?.file && !invoice?.pro_forma_invoice_file) {\n      setShowFileUploadError(true);\n    } else {\n      const payload = {\n        id: data?.id,\n        is_invoice: data.is_invoice?.id,\n        supplier_id: data?.supplier_id?.id,\n        order_id: selectedOrderOption,\n        file_id: invoice?.file?.id || null,\n        pro_forma_invoice_file_id: invoice?.pro_forma_invoice_file?.id,\n        invoice_number: invoice_number,\n        date_of_invoice: date_of_invoice ? parseDateForBackend(date_of_invoice) : null,\n        receipt_date: receipt_date ? parseDateForBackend(receipt_date) : null,\n        sss_invoice_receipt_date: parseDateForBackend(data?.sss_invoice_receipt_date),\n        bank_account: data?.bank_account?.id,\n        date_of_payment: parseDateForBackend(data?.date_of_payment),\n        organization_unit_id: contextMain?.organization_unit?.id,\n        description: data?.description,\n        type: 'invoice',\n        pro_forma_invoice_number: data?.pro_forma_invoice_number,\n        pro_forma_invoice_date: pro_forma_invoice_date ? parseDateForBackend(pro_forma_invoice_date) : null,\n        passed_to_accounting: data?.passed_to_accounting,\n        passed_to_inventory: data?.passed_to_inventory,\n        articles: fields.map((_, index) => ({\n          title: data.articles[index]?.title,\n          net_price: data.articles[index]?.net_price,\n          description: data.articles[index]?.description,\n          account_id: data.articles[index]?.account?.id,\n          vat_percentage: data.articles[index]?.vat_percentage?.id,\n          amount: data.articles[index]?.amount,\n        })),\n      };\n      insertInvoice(\n        payload,\n        () => {\n          alert.success('Uspješno dodavanje računa.');\n          navigate('/finance/liabilities-receivables/liabilities/invoices');\n        },\n        () => alert.error('Neuspješno dodavanje računa.'),\n      );\n    }\n\n    return;\n  };\n\n  const removeRow = (idToRemove: number) => {\n    const indexToRemove = fields.findIndex(field => field.id === idToRemove);\n    if (indexToRemove !== -1) {\n      remove(indexToRemove);\n    }\n  };\n\n  useEffect(() => {\n    // * When order is selected, invoice number, date of invoice, receipt date and articles are set from its values\n    if (selectedOrderOption) {\n      const selectedOrder = orders.find(order => order.id === selectedOrderOption)!;\n\n      if (!selectedOrder) return;\n\n      if (selectedOrder.receive_file) setAccountingInvoiceFile(selectedOrder.receive_file);\n      if (selectedOrder.order_file) setAccountingProFormaInvoiceFile(selectedOrder.order_file);\n\n      if (selectedOrder.invoice_number) setValue('invoice_number', selectedOrder.invoice_number);\n      if (selectedOrder.invoice_date) setValue('date_of_invoice', new Date(selectedOrder.invoice_date));\n      if (selectedOrder.pro_forma_invoice_date)\n        setValue('pro_forma_invoice_date', new Date(selectedOrder.pro_forma_invoice_date));\n      if (selectedOrder.pro_forma_invoice_number)\n        setValue('pro_forma_invoice_number', selectedOrder.pro_forma_invoice_number);\n      if (selectedOrder.date_system) setValue('receipt_date', new Date(selectedOrder.date_system));\n\n      if (selectedOrder.articles && selectedOrder.articles.length) {\n        for (const article of selectedOrder.articles) {\n          append({\n            id: article.id,\n            title: article.title,\n            net_price: article.net_price,\n            vat_price: 0,\n            description: article.description,\n            account: null,\n            vat_percentage: null,\n            amount: article.amount,\n          });\n        }\n      }\n    }\n  }, [selectedOrderOption]);\n\n  const dropdownOrderOptions = useMemo(() => {\n    return orders?.map(item => {\n      return {\n        id: item.id,\n        title: item.invoice_number,\n      };\n    });\n  }, [orders]);\n\n  const resetFormValues = () => {\n    setValue('order_id', null);\n    setValue('invoice_number', '');\n    setValue('articles', []);\n    setValue('invoice_type', {id: '', title: ''});\n    setValue('date_of_invoice', undefined);\n    setValue('receipt_date', undefined);\n  };\n\n  useEffect(() => {\n    !invoice && resetFormValues();\n  }, [watch('is_invoice')]);\n\n  const type = watch('is_invoice');\n\n  const passedToInventory = watch('passed_to_inventory');\n  const passedToAccounting = watch('passed_to_accounting');\n\n  useEffect(() => {\n    if (invoice) {\n      reset({\n        ...invoice,\n        id: invoice.id,\n        invoice_type:\n          type?.id === false\n            ? {id: 'manual', title: 'Ručni unos'}\n            : !!invoice.order_id && !type?.id\n            ? {id: 'accounting', title: 'Materijalno knjigovodstvo'}\n            : {id: 'manual', title: 'Ručni unos'},\n        supplier_id: {id: invoice.supplier.id, title: invoice.supplier.title},\n        order_id: dropdownOrderOptions.find((ord: DropdownData<number>) => ord?.id === invoice.order_id),\n        file_id: invoice.file.id,\n        is_invoice: invoice.is_invoice === false ? {id: false, title: 'Predračun'} : {id: true, title: 'Račun'},\n        invoice_number: invoice.invoice_number,\n        date_of_invoice: invoice.date_of_invoice,\n        receipt_date: invoice.receipt_date,\n        date_of_payment: invoice.date_of_payment,\n        bank_account: {id: invoice.bank_account, title: invoice.bank_account},\n        description: invoice?.description,\n        passed_to_inventory: invoice?.passed_to_inventory,\n        passed_to_accounting: invoice?.passed_to_accounting,\n        pro_forma_invoice_date: invoice?.pro_forma_invoice_date,\n        pro_forma_invoice_number: invoice?.pro_forma_invoice_number,\n        articles: invoice.articles.map((_, index) => ({\n          title: invoice.articles[index]?.title,\n          amount: invoice.articles[index]?.amount,\n          net_price: invoice.articles[index]?.net_price,\n          description: invoice.articles[index]?.description,\n          account: {id: invoice.articles[index]?.account?.id, title: invoice.articles[index]?.account?.title},\n          vat_percentage: {\n            id: invoice.articles[index]?.vat_percentage,\n            title: ` ${invoice.articles[index]?.vat_percentage}`,\n          },\n        })),\n      });\n    }\n  }, [invoice]);\n\n  return (\n    <InvoiceEntryForm>\n      <>\n        <Row>\n          <Controller\n            name=\"is_invoice\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"TIP:\"\n                placeholder=\"Odaberite tip\"\n                options={TypeOptions}\n                error={errors?.type_for_invoice?.message}\n                isRequired\n                isDisabled={invoice !== undefined}\n              />\n            )}\n          />\n          <Controller\n            name=\"invoice_type\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"TIP RAČUNA:\"\n                placeholder=\"Odaberite tip računa\"\n                options={type?.id === false ? [invoiceTypeOptions[0]] : invoiceTypeOptions}\n                error={errors?.invoice_type?.message}\n                isRequired\n                isDisabled={type === undefined || invoice !== undefined}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name=\"supplier_id\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"DOBAVLJAČ:\"\n                placeholder=\"Odaberite ime dobavljača\"\n                options={suppliers}\n                isDisabled={type === undefined}\n                error={errors?.supplier_id?.message}\n                isRequired\n              />\n            )}\n          />\n          <Controller\n            name=\"order_id\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"NARUDŽBENICA:\"\n                placeholder=\"Odaberite narudžbenicu\"\n                options={dropdownOrderOptions}\n                isDisabled={isManual || isManual === undefined}\n                error={errors?.order_id?.message}\n              />\n            )}\n          />\n\n          <Input\n            {...register('pro_forma_invoice_number')}\n            label=\"BROJ PREDRAČUNA:\"\n            placeholder=\"Unesite broj računa\"\n            error={errors?.invoice_number?.message}\n            isRequired\n            disabled={type?.id === true || Boolean(selectedOrderOption)}\n          />\n\n          <Input\n            {...register('invoice_number')}\n            label=\"BROJ RAČUNA:\"\n            placeholder=\"Unesite broj računa\"\n            disabled={\n              (type?.id === true && !isManual) ||\n              type?.id === false ||\n              (Boolean(selectedOrderOption) && Boolean(invoice_number))\n            }\n            error={errors?.invoice_number?.message}\n            isRequired\n          />\n        </Row>\n        {/* TODO: This date is being added by the accountant of SSS */}\n        {/* Flex row shared flex component is being tested here */}\n        <FlexRow gap=\"0.5rem\" justify=\"between\" style={{marginBottom: 25}} stretchChildren>\n          <Controller\n            name=\"pro_forma_invoice_date\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PREDRAČUNA:\"\n                onChange={onChange}\n                disabled={type?.id === true || (Boolean(selectedOrderOption) && pro_forma_invoice_date)}\n                error={errors?.date_of_invoice?.message}\n                isRequired\n              />\n            )}\n          />\n\n          <Controller\n            name=\"date_of_invoice\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM RAČUNA:\"\n                onChange={onChange}\n                disabled={\n                  (type?.id === true && !isManual) ||\n                  type?.id === false ||\n                  (Boolean(selectedOrderOption) && Boolean(invoice_number))\n                }\n                error={errors?.date_of_invoice?.message}\n                isRequired\n              />\n            )}\n          />\n          <Controller\n            name=\"receipt_date\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA ROBE:\"\n                onChange={onChange}\n                disabled={Boolean(selectedOrderOption) && receipt_date}\n              />\n            )}\n          />\n          <Controller\n            name=\"sss_invoice_receipt_date\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label={type?.id === false ? 'DATUM PRIJEMA PREDRAČUNA SSS' : 'DATUM PRIJEMA RAČUNA SSS:'}\n                onChange={onChange}\n                error={errors?.sss_invoice_receipt_date?.message}\n                isRequired\n              />\n            )}\n          />\n        </FlexRow>\n        {isManual && (\n          <FileUploadWrapper>\n            <FileUpload\n              icon={null}\n              files={uploadedFile}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content={type.id === false ? 'Predračun' : 'Račun'} />}\n              hint={\n                type.id === false\n                  ? 'Fajlovi neće biti učitani dok ne sačuvate predračun.'\n                  : 'Fajlovi neće biti učitani dok ne sačuvate račun.'\n              }\n              buttonText=\"Učitaj\"\n              error={showFileUploadError ? 'Morate učitati fajl' : undefined}\n            />\n          </FileUploadWrapper>\n        )}\n        {!!invoice?.file.id && (\n          <FileListWrapper>\n            <Typography variant=\"bodySmall\" style={{fontWeight: 600}} content={'RAČUN:'} />\n            <FileListComponent files={(invoice?.file && [invoice.file]) ?? []} />\n          </FileListWrapper>\n        )}\n\n        {!!invoice?.pro_forma_invoice_file.id && (\n          <FileListWrapper>\n            <Typography variant=\"bodySmall\" style={{fontWeight: 600}} content={'PREDRAČUN:'} />\n            <FileListComponent files={invoice?.pro_forma_invoice_file ? [invoice?.pro_forma_invoice_file] : []} />\n          </FileListWrapper>\n        )}\n\n        {!!accountingInvoiceFile?.id && !isManual && !invoice?.file && (\n          <FileListWrapper>\n            <Typography variant=\"bodySmall\" style={{fontWeight: 600}} content={'RAČUN:'} />\n            <FileListComponent files={(accountingInvoiceFile && [accountingInvoiceFile]) ?? []} />\n          </FileListWrapper>\n        )}\n\n        {!!accountingProFormaInvoiceFile?.id && !isManual && !invoice?.pro_forma_invoice_file && (\n          <FileListWrapper>\n            <Typography variant=\"bodySmall\" style={{fontWeight: 600}} content={'PREDRAČUN:'} />\n            <FileListComponent files={(accountingProFormaInvoiceFile && [accountingProFormaInvoiceFile]) ?? []} />\n          </FileListWrapper>\n        )}\n\n        <Row>\n          <Controller\n            name=\"bank_account\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"ŽIRO RAČUN:\"\n                placeholder=\"Odaberite broj računa\"\n                options={\n                  supplierBankAccounts\n                    ? supplierBankAccounts.map((account: string) => ({id: account, title: account}))\n                    : []\n                }\n                error={errors?.bank_account?.message}\n                isRequired\n              />\n            )}\n          />\n          <Controller\n            name=\"date_of_payment\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM VALUTE:\"\n                onChange={onChange}\n                error={errors?.date_of_payment?.message}\n                isRequired\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Input {...register('description')} label=\"OPIS:\" textarea placeholder=\"Unesite opis\" />\n        </Row>\n\n        {isManual && (\n          <div style={{width: 350, marginTop: 20}}>\n            <Controller\n              name=\"passed_to_accounting\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <StyledSwitch\n                  name={name}\n                  checked={value as any}\n                  onChange={onChange}\n                  content={\n                    <Typography\n                      variant=\"bodyMedium\"\n                      content=\"PROSLIJEDITE U MATERIJALNO KNJIGOVODSTVO:\"\n                      style={{marginLeft: 10}}\n                    />\n                  }\n                  disabled={passedToInventory === true}\n                  theme={Theme}\n                />\n              )}\n            />\n          </div>\n        )}\n        {type?.id === true && isManual && (\n          <div style={{width: 350, marginBlock: 20}}>\n            <Controller\n              name=\"passed_to_inventory\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <StyledSwitch\n                    name={name}\n                    checked={value as any}\n                    onChange={onChange}\n                    content={\n                      <Typography\n                        variant=\"bodyMedium\"\n                        content=\"PROSLIJEDITE U OSNOVNA SREDSTVA:\"\n                        style={{marginLeft: 10}}\n                      />\n                    }\n                    disabled={passedToAccounting === true}\n                    theme={Theme}\n                  />\n                );\n              }}\n            />\n          </div>\n        )}\n        {isManual && (\n          <PlusButtonWrapper>\n            <PlusButton onClick={handleSubmit(handleAddRow)} />\n          </PlusButtonWrapper>\n        )}\n\n        <Table\n          tableHeads={invoiceTableHeads}\n          data={fields}\n          tableActions={[\n            {\n              name: 'Ukloni',\n              icon: <XIcon stroke={Theme?.palette?.gray800} width=\"10px\" />,\n              onClick: row => {\n                removeRow(row?.id);\n              },\n              tooltip: () => 'Uklonite artikal',\n              shouldRender: () => isManual,\n            },\n          ]}\n        />\n        {/* For now we do not need this */}\n        {/* {fields.length > 0 && (\n          <>\n            <FlexColumn style={{marginTop: '1rem'}}>\n              <Amount>\n                <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"NETO IZNOS:\" />\n                <Typography variant=\"bodySmall\" content={`${totalNet?.toFixed(2)}Є`} />\n              </Amount>\n              <Amount>\n                <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PDV:\" />\n                <Typography variant=\"bodySmall\" content={`${totalVat?.toFixed(2)}Є`} />\n              </Amount>\n              <Amount>\n                <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPAN IZNOS:\" />\n                <Typography variant=\"bodySmall\" content={`${(totalNet + totalVat)?.toFixed(2)}Є`} />\n              </Amount>\n              <InvoiceAmount>\n                <Typography variant=\"bodySmall\" content=\"IZNOS FAKTURA PO RAČUNU\" />\n              </InvoiceAmount>\n            </FlexColumn>\n            <Table tableHeads={invoiceAmountTableHeads} data={fields} />\n          </>\n        )} */}\n      </>\n      <Footer>\n        <Button\n          content=\"Odustani\"\n          variant=\"secondary\"\n          style={{width: 130}}\n          onClick={() => navigate('/finance/liabilities-receivables/liabilities/invoices')}\n        />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} />\n      </Footer>\n    </InvoiceEntryForm>\n  );\n};\n\nexport default InvoiceEntry;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoiceEntry/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoiceEntry/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoiceEntry/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoices.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoicesOverview/invoicesOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoicesOverview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/liabilitiesLanding/liabilitiesLandingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/liabilitiesReceivablesLandingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/receivables/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/receivables/receivableDetails/receivableDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3212,3215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3212,3215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3621,3624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3621,3624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, Dropdown, Input, Table, TableHead, Typography} from 'client-library';\nimport {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport PayOrderModal from '../../../../components/payOrderModal/payOrderModal.tsx';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useGetOrganizationUnits from '../../../../services/graphQL/organizationUnits/useGetOrganizationUnits.ts';\nimport useGetPaymentOrder from '../../../../services/graphQL/receivables/useGetPaymentOrder.ts';\nimport useInsertPaymentOrder from '../../../../services/graphQL/receivables/useInsertPaymentOrder.ts';\nimport useGetSuppliers from '../../../../services/graphQL/suppliers/useGetSuppliers.ts';\nimport Footer from '../../../../shared/footer.ts';\nimport ScreenWrapper from '../../../../shared/screenWrapper/screenWrapper.tsx';\nimport SectionBox from '../../../../shared/sectionBox.ts';\nimport {parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {TypesForReceivables, receivableSchema, sourceOfFunding} from '../constants.tsx';\nimport {ButtonWrapper, ReceivableFormContainer, Row} from '../styles.ts';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\n\ntype ReceivableEntryForm = yup.InferType<typeof receivableSchema>;\n\nconst ReceivableDetails = () => {\n  const {\n    alert,\n    navigation: {navigate, location},\n  } = useAppContext();\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    watch,\n    reset,\n    formState: {errors},\n  } = useForm<ReceivableEntryForm>({\n    resolver: yupResolver(receivableSchema),\n  });\n\n  const [showModal, setShowModal] = useState<boolean>(false);\n  const receivableID = location.pathname.split('/').at(-1);\n\n  const {organization_unit_id, supplier_id} = watch();\n\n  const {suppliers} = useGetSuppliers({});\n  const {organizationUnits} = useGetOrganizationUnits();\n\n  const {paymentOrder} = useGetPaymentOrder({\n    page: 1,\n    size: 1,\n    id: receivableID,\n    status: '',\n    year: null,\n    search: '',\n    organization_unit_id: null,\n  });\n\n  const paymentData = paymentOrder[0] ? paymentOrder[0] : null;\n\n  const {insertPaymentOrder, loading} = useInsertPaymentOrder();\n\n  const receivableTableHeads: TableHead[] = [\n    {\n      title: 'Tip obaveze',\n      accessor: 'type',\n      type: 'custom',\n      renderContents: (_, row) => {\n        const typeValue = TypesForReceivables.find(option => option.id === row.type);\n        return <Typography content={typeValue ? typeValue?.title : ''} />;\n      },\n    },\n    {\n      title: 'Broj obaveze',\n      accessor: 'title',\n      type: 'custom',\n      renderContents: title => <Typography content={title || ''} />,\n    },\n    {\n      title: 'Plaćeno',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: amount => <Typography content={roundCurrency(amount) || ''} />,\n    },\n    {\n      title: 'Konto',\n      accessor: 'account',\n      type: 'custom',\n      renderContents: account => <Typography content={account.title} />,\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  const onSubmit = async (data: any) => {\n    if (loading) return;\n\n    const payload = {\n      organization_unit_id: organization_unit_id?.id,\n      supplier_id: supplier_id?.id,\n      amount: data?.amount,\n      id_of_statement: data?.id_of_statement,\n      date_of_payment: parseDateForBackend(data?.date_of_payment),\n      description: data?.description,\n      items: paymentData?.items,\n    };\n\n    insertPaymentOrder(\n      payload as any,\n      () => {\n        alert.success('Uspješno dodavanje naloga.');\n        navigate('/finance/liabilities-receivables/receivables');\n      },\n      () => alert.error('Neuspješno dodavanje naloga.'),\n    );\n\n    return;\n  };\n\n  useEffect(() => {\n    reset({\n      amount: paymentData?.amount,\n      organization_unit_id: {\n        id: paymentData?.organization_unit?.id,\n        title: paymentData?.organization_unit?.title,\n      },\n      supplier_id: {\n        id: paymentData?.supplier?.id,\n        title: paymentData?.supplier?.title,\n      },\n      id_of_statement: paymentData?.id_of_statement?.toString(),\n      sap_id: paymentData?.sap_id,\n      description: paymentData?.description,\n      date_of_sap: paymentData?.date_of_sap as Date,\n      date_of_payment: paymentData?.date_of_payment as Date,\n      source_of_funding: {id: paymentData?.source_of_funding, title: paymentData?.source_of_funding},\n    });\n  }, [paymentData]);\n\n  return (\n    <ScreenWrapper>\n      <SectionBox>\n        <ReceivableFormContainer>\n          <Row>\n            <Controller\n              name=\"organization_unit_id\"\n              control={control}\n              render={({field: {name, value, onChange}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  label=\"ORGANIZACIONA JEDINICA:\"\n                  options={organizationUnits}\n                  error={errors.supplier_id?.message}\n                  isSearchable\n                  isDisabled={paymentData?.status === 'Plaćen'}\n                />\n              )}\n            />\n            <Controller\n              name=\"supplier_id\"\n              control={control}\n              render={({field: {name, value, onChange}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  label=\"DOBAVLJAČ:\"\n                  options={suppliers}\n                  error={errors.supplier_id?.message}\n                  isSearchable\n                  isDisabled={paymentData?.status === 'Plaćen'}\n                />\n              )}\n            />\n            <Controller\n              name=\"source_of_funding\"\n              control={control}\n              render={({field: {name, value, onChange}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  label=\"IZVOR SREDSTAVA:\"\n                  options={sourceOfFunding}\n                  error={errors.supplier_id?.message}\n                  isSearchable\n                />\n              )}\n            />\n            <Input\n              {...register('id_of_statement')}\n              label=\"ID NALOGA:\"\n              error={errors.id_of_statement?.message}\n              style={{width: '350px'}}\n              disabled={paymentData?.status === 'Plaćen'}\n            />\n          </Row>\n          <Row>\n            <Input\n              {...register('sap_id')}\n              label=\"SAP ID:\"\n              disabled\n              error={errors.sap_id?.message}\n              style={{width: '350px'}}\n            />\n            <Controller\n              name=\"date_of_sap\"\n              control={control}\n              render={({field: {name, value, onChange}}) => (\n                <Datepicker\n                  name={name}\n                  disabled\n                  selected={value ? new Date(value) : ''}\n                  label=\"DATUM SAP:\"\n                  onChange={onChange}\n                  error={errors.date_of_sap?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"date_of_payment\"\n              control={control}\n              render={({field: {name, value, onChange}}) => (\n                <Datepicker\n                  name={name}\n                  selected={value ? new Date(value) : ''}\n                  label=\"DATUM PLAĆANJA:\"\n                  onChange={onChange}\n                  error={errors.date_of_payment?.message}\n                  disabled={paymentData?.status === 'Plaćen'}\n                />\n              )}\n            />\n            <ButtonWrapper>\n              <Button\n                content=\"Platite nalog\"\n                variant=\"primary\"\n                onClick={() => setShowModal(true)}\n                disabled={paymentData?.status === 'Plaćen'}\n              />\n            </ButtonWrapper>\n          </Row>\n          <Row>\n            <Input\n              {...register('description')}\n              label=\"OPIS:\"\n              textarea\n              placeholder=\"Unesite opis\"\n              disabled={paymentData?.status === 'Plaćen'}\n            />\n          </Row>\n          <Row>\n            <Input\n              label=\"Iznos za placanje:\"\n              value={roundCurrency(paymentData?.amount)}\n              error={errors.amount?.message}\n              style={{width: '250px'}}\n              disabled\n            />\n          </Row>\n          <Table tableHeads={receivableTableHeads} data={paymentData?.items || []} />\n\n          <Footer>\n            <Button\n              content=\"Odustani\"\n              variant=\"secondary\"\n              style={{width: 130}}\n              onClick={() => navigate('/finance/liabilities-receivables/receivables')}\n            />\n\n            <Button\n              content=\"Sačuvaj\"\n              variant=\"primary\"\n              onClick={handleSubmit(onSubmit)}\n              disabled={paymentData?.status === 'Plaćen'}\n            />\n          </Footer>\n        </ReceivableFormContainer>\n\n        {showModal && <PayOrderModal onClose={() => setShowModal(prev => !prev)} open={showModal} />}\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default ReceivableDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/receivables/receivableEntry/receivableEntry.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1902,1905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1902,1905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4862,4865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4862,4865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6221,6224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6221,6224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6869,6872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6869,6872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7415,7418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7415,7418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, Dropdown, Input, Table, TableHead, Typography} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {StatusOptions, generateDropdownOptions} from '../../../../constants.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useGetOrganizationUnits from '../../../../services/graphQL/organizationUnits/useGetOrganizationUnits.ts';\nimport useGetObligations from '../../../../services/graphQL/receivables/useGetObligations.ts';\nimport useInsertPaymentOrder from '../../../../services/graphQL/receivables/useInsertPaymentOrder.ts';\nimport useGetSuppliers from '../../../../services/graphQL/suppliers/useGetSuppliers.ts';\nimport Footer from '../../../../shared/footer.ts';\nimport ScreenWrapper from '../../../../shared/screenWrapper/screenWrapper.tsx';\nimport SectionBox from '../../../../shared/sectionBox.ts';\nimport StatusTableCell from '../../../../shared/statusTableCell/statusTableCell.tsx';\nimport {parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport {TypesForReceivables, receivableSchema, sourceOfFunding} from '../constants.tsx';\nimport {ReceivableFormContainer, Row} from '../styles.ts';\n\ntype ReceivableEntryForm = yup.InferType<typeof receivableSchema>;\n\nconst ReceivableEntry = () => {\n  const {\n    alert,\n    navigation: {navigate},\n  } = useAppContext();\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    watch,\n    formState: {errors},\n  } = useForm<ReceivableEntryForm>({\n    resolver: yupResolver(receivableSchema),\n  });\n  const [selectedRows, setSelectedRows] = useState<any[]>([]);\n  const [amountValue, setAmountValue] = useState<number>();\n\n  const {organization_unit_id, supplier_id, type, amount} = watch();\n\n  const {counts} = useGetCountOverview({level: 3});\n  const {suppliers} = useGetSuppliers({});\n  const {organizationUnits} = useGetOrganizationUnits();\n  const {\n    obligations,\n\n    fetchObligations,\n  } = useGetObligations({\n    supplier_id: supplier_id?.id ? supplier_id?.id : null,\n    organization_unit_id: organization_unit_id?.id ? organization_unit_id.id : null,\n    type: type?.id ? type?.id : null,\n  });\n\n  const {insertPaymentOrder, loading} = useInsertPaymentOrder();\n\n  const getObligations = () => {\n    fetchObligations(() => alert.error('Za izabranu opciju nema rezultata.'));\n  };\n\n  const {fields, remove, insert} = useFieldArray({\n    control,\n    name: 'items',\n    keyName: 'key',\n  });\n\n  const dropdowncountsOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n\n  const receivableTableHeads: TableHead[] = [\n    {\n      title: 'Tip obaveze',\n      accessor: 'type',\n      type: 'custom',\n      renderContents: (_, row) => {\n        const typeValue = TypesForReceivables.find(option => option.id === row.type);\n        return <Typography content={typeValue ? typeValue?.title : ''} />;\n      },\n    },\n    {\n      title: 'Broj obaveze',\n      accessor: 'title',\n      type: 'custom',\n      renderContents: title => <Typography content={title || ''} />,\n    },\n    {\n      title: 'Ukupni iznos',\n      accessor: 'total_price',\n      type: 'custom',\n      renderContents: total_price => <Typography content={roundCurrency(total_price)} />,\n    },\n    {\n      title: 'Preostalo da se plati',\n      accessor: 'remain_price',\n      type: 'custom',\n      renderContents: remain_price => <Typography content={roundCurrency(remain_price)} />,\n    },\n    {\n      title: 'Konto',\n      accessor: 'account',\n      type: 'custom',\n      renderContents: (_item, row, index) => (\n        <Controller\n          name={`items.${index}.account`}\n          control={control}\n          render={({field: {onChange, name, value}}) => (\n            <div style={{minWidth: '200px'}}>\n              <Dropdown\n                options={dropdowncountsOptions}\n                name={name}\n                value={value}\n                onChange={onChange}\n                error={errors?.items?.[index]?.account?.message}\n                isDisabled={selectedRows && selectedRows.every(option => option !== row.id)}\n              />\n            </div>\n          )}\n        />\n      ),\n    },\n    {\n      title: 'Status',\n      accessor: 'status',\n      type: 'custom',\n      renderContents: (_, row) => {\n        const statusValue = StatusOptions.find(option => option.id === row.status);\n        return <StatusTableCell status={statusValue ? statusValue?.title : ''} />;\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  const onSubmit = async (data: any) => {\n    if (loading) return;\n\n    const payload = {\n      organization_unit_id: organization_unit_id?.id,\n      supplier_id: supplier_id?.id,\n      amount: selectedRows.length > 1 ? Number(amountValue) : amount,\n      id_of_statement: data?.id_of_statement,\n      date_of_payment: parseDateForBackend(data?.date_of_payment),\n      description: data?.description,\n      source_of_funding: data?.source_of_funding?.id,\n      items: fields\n        .filter(field => selectedRows.includes(field.id))\n        .map((_, index) => ({\n          invoice_id: data.items[index]?.invoice_id,\n          additional_expense_id: data.items[index]?.additional_expense_id,\n          salary_additional_expense_id: data.items[index]?.salary_additional_expense_id,\n          account_id: data.items[index]?.account?.id,\n        })),\n    };\n\n    insertPaymentOrder(\n      payload,\n      () => {\n        alert.success('Uspješno dodavanje naloga.');\n        navigate('/finance/liabilities-receivables/receivables');\n      },\n      () => alert.error('Neuspješno dodavanje naloga.'),\n    );\n\n    return;\n  };\n\n  const onCheck = (checked: boolean, currId: number | null) => {\n    if (checked && currId) {\n      setSelectedRows([...selectedRows, currId]);\n    } else {\n      setSelectedRows(selectedRows.filter(id => id !== currId));\n    }\n  };\n\n  const areItemsDisabled = (): ((row: any) => boolean) => {\n    const isStatusPartiallyCreated = (status: string | undefined) => status === 'Djelimično na nalogu';\n    const isStatusCreated = (status: string | undefined) => status === 'Kreiran';\n\n    const firstSelectedItem = fields.find(field => selectedRows.includes(field.id));\n    if (!firstSelectedItem) return () => false; // Ako nema selektovanih itema onda je sve enabled\n\n    const firstSelectedItemStatus = firstSelectedItem.status;\n\n    // Ako prvi item u selectedRows ima status Kreiran onda su disabled samo oni koji imaju status Djelimično na nalogu\n    if (isStatusCreated(firstSelectedItemStatus)) {\n      return (row: any) => {\n        if (selectedRows.includes(row.id)) {\n          return false; // Prvi selektovani item nije disabled\n        }\n        if (isStatusPartiallyCreated(row.status)) {\n          return true; // Vraćamo true za sve iteme sa statusom Djelimično na čekanju osim za prvi selektovani\n        }\n        return false;\n      };\n    }\n\n    // Ako je prvi selektovani item sa statusom Djelimično na nalogu, onda treba onemogućiti sve iteme osim prvog selektovanog\n    if (isStatusPartiallyCreated(firstSelectedItemStatus)) {\n      return (row: any) => {\n        if (selectedRows.includes(row.id)) {\n          return false; // Prvi selektovani item nije disabled\n        }\n        return true; // Svi ostali itemi će biti disabled\n      };\n    }\n\n    return () => false;\n  };\n\n  const calculateTotalRemainingPrice = () => {\n    const relevantFields = fields.filter(field => selectedRows.includes(field.id));\n\n    let totalRemainingPrice = 0;\n    relevantFields.forEach(field => {\n      totalRemainingPrice += field.remain_price || 0;\n    });\n\n    return setAmountValue(totalRemainingPrice);\n  };\n\n  useEffect(() => {\n    if (obligations) {\n      if (obligations && obligations.length) {\n        for (let i = fields.length - 1; i >= 0; i--) {\n          remove(i);\n        }\n\n        obligations.forEach((article, index) => {\n          insert(index, {\n            id: Math.random(),\n            additional_expense_id: article.additional_expense_id,\n            salary_additional_expense_id: article.salary_additional_expense_id,\n            invoice_id: article.invoice_id,\n            title: article.title,\n            total_price: article.total_price,\n            remain_price: article.remain_price,\n            account: null,\n            status: article.status,\n            type: article.type,\n          });\n        });\n      }\n    }\n  }, [obligations]);\n\n  useEffect(() => {\n    calculateTotalRemainingPrice();\n  }, [selectedRows]);\n\n  return (\n    <ScreenWrapper>\n      <SectionBox>\n        <ReceivableFormContainer>\n          <>\n            <Row>\n              <Controller\n                name=\"organization_unit_id\"\n                control={control}\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    label=\"ORGANIZACIONA JEDINICA:\"\n                    options={organizationUnits}\n                    error={errors.supplier_id?.message}\n                    isSearchable\n                    isRequired\n                  />\n                )}\n              />\n              <Controller\n                name=\"supplier_id\"\n                control={control}\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    label=\"DOBAVLJAČ:\"\n                    options={suppliers}\n                    error={errors.supplier_id?.message}\n                    isSearchable\n                    isRequired\n                  />\n                )}\n              />\n              <Controller\n                name=\"type\"\n                control={control}\n                render={({field: {name, value, onChange}}) => (\n                  <Dropdown\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    label=\"TIP:\"\n                    options={TypesForReceivables}\n                    error={errors.type?.message}\n                  />\n                )}\n              />\n              <div style={{display: 'flex', alignItems: 'flex-end'}}>\n                <Button\n                  content=\"Prikaži\"\n                  variant=\"primary\"\n                  onClick={() => getObligations()}\n                  disabled={!supplier_id || !organization_unit_id}\n                />\n              </div>\n            </Row>\n            {!!fields.length && (\n              <>\n                <Row>\n                  <Controller\n                    name=\"source_of_funding\"\n                    control={control}\n                    render={({field: {name, value, onChange}}) => (\n                      <Dropdown\n                        name={name}\n                        value={value}\n                        onChange={onChange}\n                        label=\"IZVOR SREDSTAVA:\"\n                        options={sourceOfFunding}\n                        error={errors.source_of_funding?.message}\n                        isSearchable\n                      />\n                    )}\n                  />\n                  <Input\n                    {...register('id_of_statement')}\n                    label=\"ID NALOGA:\"\n                    error={errors.id_of_statement?.message}\n                    style={{width: '350px'}}\n                  />\n                  <Input\n                    {...register('sap_id')}\n                    label=\"SAP ID:\"\n                    disabled\n                    error={errors.sap_id?.message}\n                    style={{width: '350px'}}\n                  />\n                </Row>\n                <Row>\n                  <Controller\n                    name={'date_of_sap'}\n                    control={control}\n                    render={({field: {name, value, onChange}}) => (\n                      <Datepicker\n                        name={name}\n                        disabled\n                        selected={value ? new Date(value) : ''}\n                        label=\"DATUM SAP:\"\n                        onChange={onChange}\n                        error={errors.date_of_sap?.message}\n                      />\n                    )}\n                  />\n                  <Controller\n                    name={'date_of_payment'}\n                    control={control}\n                    render={({field: {name, value, onChange}}) => (\n                      <Datepicker\n                        name={name}\n                        selected={value ? new Date(value) : ''}\n                        label=\"DATUM PLAĆANJA:\"\n                        onChange={onChange}\n                        error={errors.date_of_payment?.message}\n                      />\n                    )}\n                  />\n                </Row>\n                <Row>\n                  <Input {...register('description')} label=\"OPIS:\" textarea placeholder=\"Unesite opis\" />\n                </Row>\n              </>\n            )}\n\n            {!!fields.length && (\n              <>\n                <Row>\n                  {selectedRows.length === 1 && (\n                    <Input\n                      {...register('amount')}\n                      label=\"Iznos za plaćanje:\"\n                      error={errors.amount?.message}\n                      style={{width: '250px'}}\n                    />\n                  )}\n                  {selectedRows.length > 1 && (\n                    <Input\n                      {...register('amount')}\n                      label=\"Iznos za placanje:\"\n                      disabled\n                      value={roundCurrency(amountValue)}\n                      error={errors.amount?.message}\n                      style={{width: '250px'}}\n                    />\n                  )}\n                </Row>\n                <Table\n                  tableHeads={receivableTableHeads}\n                  data={fields}\n                  checkedRows={selectedRows}\n                  checkboxes\n                  onCheck={onCheck}\n                  disabledCheckbox={areItemsDisabled()}\n                />\n              </>\n            )}\n\n            <Footer>\n              <Button\n                content=\"Odustani\"\n                variant=\"secondary\"\n                style={{width: 130}}\n                onClick={() => navigate('/finance/liabilities-receivables/receivables')}\n              />\n\n              {!!fields.length && (\n                <Button\n                  content=\"Sačuvaj\"\n                  variant=\"primary\"\n                  onClick={handleSubmit(onSubmit)}\n                  disabled={!fields.length}\n                />\n              )}\n            </Footer>\n          </>\n        </ReceivableFormContainer>\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default ReceivableEntry;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/receivables/receivablesOverview/receivablesOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3160,3163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3160,3163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Button,\n  Divider,\n  Dropdown,\n  EditIconTwo,\n  Input,\n  Pagination,\n  SearchIcon,\n  Table,\n  Theme,\n  TrashIcon,\n} from 'client-library';\nimport {ChangeEvent, useState} from 'react';\nimport {PAGE_SIZE} from '../../../../constants.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useGetOrganizationUnits from '../../../../services/graphQL/organizationUnits/useGetOrganizationUnits.ts';\nimport useDeletePaymentOrder from '../../../../services/graphQL/receivables/useDeletePaymentOrder.ts';\nimport useGetPaymentOrder from '../../../../services/graphQL/receivables/useGetPaymentOrder.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport {MainTitle} from '../../../../shared/pageElements.ts';\nimport ScreenWrapper from '../../../../shared/screenWrapper/screenWrapper.tsx';\nimport SectionBox from '../../../../shared/sectionBox.ts';\nimport {DropdownData} from '../../../../types/dropdownData.ts';\nimport {PaymentOrderItem} from '../../../../types/graphQL/receivablesTypes.ts';\nimport {getYearOptions} from '../../../../utils/getYearOptions.ts';\nimport {useDebounce} from '../../../../utils/useDebounce.ts';\nimport {Row} from '../../decisions/decisionsOverview/styles.ts';\nimport {receivablesStatusOptions, tableHeads} from '../constants.tsx';\nimport {ButtonOverviewWrapper, FilterWrapper, RowWrapper} from '../styles.ts';\n\nexport interface DecisionsOverviewFilters {\n  year?: DropdownData<string> | null;\n  organization_unit_id?: DropdownData<number> | null;\n  status?: DropdownData<string> | null;\n  search?: string;\n}\n\nconst initialDecisionsFilterValues = {\n  year: null,\n  organization_unit_id: null,\n  status: null,\n  search: '',\n};\n\nconst ReceivablesOverview = () => {\n  const {\n    alert,\n    navigation: {navigate},\n  } = useAppContext();\n  const [page, setPage] = useState(1);\n  const [filterValues, setFilterValues] = useState<DecisionsOverviewFilters>(initialDecisionsFilterValues);\n  const [showDeleteModalId, setShowDeleteModalId] = useState<number | undefined>(undefined);\n\n  const [search, setSearch] = useState('');\n  const debouncedSearch = useDebounce(search, 500);\n\n  const onFilter = (value: DropdownData<string> | ChangeEvent<HTMLInputElement>, name: string) => {\n    if ('target' in value) {\n      setFilterValues({...filterValues, [name]: value.target.value});\n    } else {\n      setFilterValues({...filterValues, [name]: value});\n    }\n  };\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n  const {organizationUnits} = useGetOrganizationUnits(undefined, {allOption: true});\n\n  const {paymentOrder, total, fetch} = useGetPaymentOrder({\n    page: page,\n    size: PAGE_SIZE,\n    status: filterValues.status ? filterValues.status.id : '',\n    year: filterValues.year ? filterValues.year.id : null,\n    search: debouncedSearch,\n    organization_unit_id: filterValues.organization_unit_id ? filterValues.organization_unit_id.id : null,\n  });\n\n  const {deletePaymentOrder} = useDeletePaymentOrder();\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const onDelete = (invoice: any) => {\n    setShowDeleteModalId(invoice.id);\n  };\n\n  const handleCloseDeleteModal = () => {\n    setShowDeleteModalId(undefined);\n  };\n\n  const handleDelete = async () => {\n    if (!showDeleteModalId) return;\n\n    await deletePaymentOrder(\n      showDeleteModalId,\n      () => {\n        alert.success('Uspješno ste obrisali nalog.');\n        fetch();\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom brisanja naloga.');\n      },\n    );\n    setShowDeleteModalId(undefined);\n  };\n\n  return (\n    <ScreenWrapper>\n      <SectionBox>\n        <MainTitle variant=\"bodyMedium\" content=\"NALOZI ZA PLAĆANJE\" />\n        <Divider color=\"#615959\" height=\"1px\" />\n        <RowWrapper>\n          <Row>\n            <FilterWrapper>\n              <Dropdown\n                label=\"ORGANIZACIONA JEDINICA:\"\n                placeholder={'Odaberite organizacionu jedinicu'}\n                options={organizationUnits}\n                value={filterValues.organization_unit_id}\n                onChange={value => onFilter(value as DropdownData<string>, 'organization_unit_id')}\n              />\n            </FilterWrapper>\n            <FilterWrapper>\n              <Dropdown\n                label=\"GODINA:\"\n                options={getYearOptions(10, true, 1)}\n                value={filterValues.year}\n                name=\"year\"\n                onChange={value => onFilter(value as DropdownData<string>, 'year')}\n                placeholder=\"Odaberite godinu\"\n              />\n            </FilterWrapper>\n            <FilterWrapper>\n              <Dropdown\n                name=\"status\"\n                label=\"STATUS:\"\n                placeholder=\"Odaberi status\"\n                options={receivablesStatusOptions}\n                value={filterValues.status}\n                onChange={value => onFilter(value as DropdownData<string>, 'status')}\n              />\n            </FilterWrapper>\n            <FilterWrapper>\n              <Input\n                name=\"search\"\n                label=\"PRETRAGA:\"\n                placeholder=\"Unesi pojam\"\n                onChange={onSearch}\n                value={search}\n                rightContent={<SearchIcon style={{marginLeft: 10, marginRight: 10}} stroke={Theme.palette.gray500} />}\n              />\n            </FilterWrapper>\n          </Row>\n        </RowWrapper>\n        <ButtonOverviewWrapper>\n          <Button\n            content=\"Kreirajte nalog za plaćanje\"\n            size=\"md\"\n            onClick={() => navigate('/finance/liabilities-receivables/receivables/add-receivable')}\n          />\n        </ButtonOverviewWrapper>\n\n        <Table\n          tableHeads={tableHeads}\n          data={paymentOrder || []}\n          onRowClick={(row: PaymentOrderItem) =>\n            row.status === 'Plaćen' && navigate(`/finance/liabilities-receivables/receivables/${row.id}`)\n          }\n          emptyMessage={'Još nema naloga za plaćanje'}\n          tableActions={[\n            {\n              name: 'Izmijeni',\n              onClick: (row: PaymentOrderItem) => navigate(`/finance/liabilities-receivables/receivables/${row.id}`),\n              icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n              shouldRender: row => row.status !== 'Plaćen',\n            },\n            {\n              name: 'Izbriši',\n              onClick: onDelete,\n              icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n              shouldRender: row => row.status !== 'Plaćen',\n            },\n          ]}\n        />\n        <Pagination\n          pageCount={total ? Math.ceil(total / PAGE_SIZE) : 0}\n          onChange={onPageChange}\n          variant=\"filled\"\n          itemsPerPage={PAGE_SIZE}\n          pageRangeDisplayed={3}\n          style={{marginTop: '20px'}}\n        />\n        <ConfirmationModal\n          open={!!showDeleteModalId}\n          subTitle=\"Ovaj nalog će biti trajno izbrisan iz sistema.\"\n          onClose={() => handleCloseDeleteModal()}\n          onConfirm={() => handleDelete()}\n        />\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default ReceivablesOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/receivables/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salaries.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salariesOverview/salariesOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1587,1590],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1587,1590],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2595,2598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2595,2598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2872,2875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2872,2875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3147,3150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3147,3150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Dropdown, Theme, Table, Pagination, TrashIcon} from 'client-library';\nimport {Row} from './styles.ts';\nimport {salariesOverviewTableHeads} from '../constants.tsx';\nimport {useEffect, useState} from 'react';\nimport usePrependedDropdownOptions from '../../../../utils/usePrependedDropdownOptions.ts';\nimport {mockDropdownOptions, PAGE_SIZE} from '../../../../constants.ts';\nimport useGetSalaries from '../../../../services/graphQL/salaries/useGetSalaries.ts';\nimport {Salary} from '../../../../types/graphQL/salaries.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport useDeleteSalary from '../../../../services/graphQL/salaries/useDeleteSalary.ts';\nimport {getYearOptions} from '../../../../utils/getYearOptions.ts';\nimport {getMonthOptions} from '../../../../utils/getMonthOptions.ts';\n\n// check if filters are correct\nconst initialValues = {\n  organization_unit_id: undefined,\n  activity_id: undefined,\n  id: undefined,\n  year: undefined,\n  month: undefined,\n};\n\nconst SalariesOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [showDeleteSalaryModal, setShowDeleteSalaryModal] = useState<number | null>(null);\n\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n\n  const {salaries, total, loading, refetch} = useGetSalaries({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n  });\n\n  const {deleteSalary} = useDeleteSalary();\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  // TODO Reset page to 1 on filter/search change, check other screens where this might be missing\n\n  useEffect(() => {\n    if (page === 1) return;\n    setPage(1);\n  }, [filters]);\n\n  const handleDeleteSalary = async () => {\n    if (!showDeleteSalaryModal) return;\n    await deleteSalary(\n      showDeleteSalaryModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeleteSalaryModal(null);\n  };\n\n  const dropdownYears = getYearOptions();\n  const dropdownMonths = getMonthOptions();\n  return (\n    <>\n      <Row>\n        <Dropdown\n          label={'AKTIVNOST:'}\n          placeholder={'Odaberi aktivnost'}\n          options={usePrependedDropdownOptions(mockDropdownOptions)}\n          value={filters.activity_id}\n          onChange={(value: any) => onFilterChange(value, 'activity_id')}\n        />\n        <Dropdown\n          label={'GODINA:'}\n          placeholder={'Odaberi godinu'}\n          options={dropdownYears}\n          value={dropdownYears.find(year => year.id === filters.year)}\n          onChange={(value: any) => onFilterChange(value, 'year')}\n        />\n        <Dropdown\n          label={'MJESEC:'}\n          placeholder={'Odaberi mjesec'}\n          options={dropdownMonths}\n          value={dropdownMonths.find(month => month.id === filters.month)}\n          onChange={(value: any) => onFilterChange(value, 'month')}\n        />\n      </Row>\n      <Table\n        tableHeads={salariesOverviewTableHeads}\n        data={salaries}\n        emptyMessage={'Još nema zarada'}\n        isLoading={loading}\n        style={{marginBottom: 22}}\n        onRowClick={(row: Salary) => navigate(`/finance/liabilities-receivables/liabilities/salaries/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteSalaryModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteSalaryModal}\n        subTitle={'Ova zarada će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeleteSalaryModal(null)}\n        onConfirm={() => handleDeleteSalary()}\n      />\n    </>\n  );\n};\n\nexport default SalariesOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salariesOverview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salaryDetails/salaryDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salaryForm/salaryForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4904,4907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4904,4907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5235,5238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5235,5238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6745,6748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6745,6748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6910,6913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6910,6913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7123,7126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7123,7126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7252,7255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7252,7255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8730,8733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8730,8733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":292,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9888,9891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9888,9891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9950,9953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9950,9953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  SalariesFormContainer,\n  Row,\n  FileUploadStepTitle,\n  InfoBoxWrapper,\n  InfoBox,\n  InfoBoxText,\n  TitleDivider,\n  Title,\n  AddIcon,\n  FileTypeWarning,\n  FileUploadErrorsWrapper,\n} from './styles.ts';\nimport Footer from '../../../../shared/footer.ts';\nimport {\n  Dropdown,\n  Datepicker,\n  Input,\n  Button,\n  FileUpload,\n  Typography,\n  TableHead,\n  Table,\n  PlusIcon,\n  Theme,\n  TrashIcon,\n} from 'client-library';\nimport {FileUploadWrapper} from '../../../../shared/FileUploadWrapper.ts';\nimport {generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport {getMonthOptions} from '../../../../utils/getMonthOptions.ts';\nimport {formatCurrency} from '../../../../utils/roundCurrency.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport {\n  AdditionalSalaryExpenseType,\n  generateUsersDropdownOptions,\n  mockedActivitiesDropdownOption,\n} from '../constants.tsx';\nimport {Salary, SalaryAdditionalExpense, SalaryAdditionalExpenseParams} from '../../../../types/graphQL/salaries.ts';\nimport useGetUserProfiles from '../../../../services/graphQL/userProfiles/useGetUserProfiles.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useInsertSalary from '../../../../services/graphQL/salaries/useInsertSalary.ts';\nimport {parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {importSuspensionsExcel} from '../../../../services/importExcel/importSuspensions.ts';\nimport {importSalariesExcel} from '../../../../services/importExcel/importSalaries.ts';\nimport useGetSuppliers from '../../../../services/graphQL/suppliers/useGetSuppliers.ts';\nimport {getSuppliersDropdown} from '../salaryUtils.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport {optionsNumberSchema, optionsStringSchema} from '../../../../utils/formSchemas.ts';\n\nconst salaryAdditionalExpensesSchema = yup.object().shape({\n  account: optionsNumberSchema.required(requiredError).default(null),\n  amount: yup.number().required(requiredError).typeError('Morate unijeti broj').min(1, 'Iznos mora biti veći od 0'),\n  subject: optionsNumberSchema.required(requiredError).default(null),\n  bank_account: optionsStringSchema.required(requiredError).default(null),\n  organization_unit_id: yup.number(),\n  title: yup.string().required(requiredError),\n  type: yup.string().required(requiredError),\n  debtor: optionsNumberSchema.when('type', {\n    is: 'suspensions',\n    then: schema => schema.required(requiredError).default(null),\n  }),\n});\n\nconst salarySchema = yup.object().shape({\n  activity: optionsNumberSchema.required(requiredError).default(null),\n  month: optionsStringSchema.required(requiredError).default(null),\n  date_of_calculation: yup.string().required(requiredError),\n  description: yup.string().required(requiredError),\n  salary_additional_expenses: yup.array().of(salaryAdditionalExpensesSchema),\n});\n\nconst initialValues = {\n  activity: undefined,\n  month: undefined,\n  date_of_calculation: '',\n  description: '',\n  salary_additional_expenses: [\n    {\n      account: undefined,\n      amount: 0,\n      subject: undefined,\n      debtor: undefined,\n      bank_account: undefined,\n      organization_unit_id: 0,\n      title: '',\n      type: '',\n    },\n  ],\n};\n\ntype SalaryForm = yup.InferType<typeof salarySchema>;\n\ninterface SalaryFormProps {\n  salary?: Salary;\n  refetchSalary?: () => Promise<void>;\n}\n\nconst SalaryForm = ({salary, refetchSalary}: SalaryFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n    watch,\n    setValue,\n    clearErrors,\n  } = useForm<SalaryForm>({defaultValues: initialValues, resolver: yupResolver(salarySchema)});\n\n  const {\n    contextMain: {\n      organization_unit: {id: organization_unit_id},\n      token,\n    },\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n  const monthOptions = getMonthOptions(false);\n\n  const {counts} = useGetCountOverview({});\n  const {insertSalary} = useInsertSalary();\n  const {suppliers} = useGetSuppliers({entity: 'other'});\n  const [importSuspensionsErrors, setImportSuspensionsErrors] = useState<string[]>([]);\n  const [importSalariesErrors, setImportSalariesErrors] = useState<string[]>([]);\n  const [totalEmployees, setTotalEmployees] = useState(0);\n\n  const suppliersDropdownOptions = useMemo(() => {\n    return getSuppliersDropdown(suppliers);\n  }, [suppliers]);\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n\n  const {fields, append, remove} = useFieldArray({\n    control,\n    name: 'salary_additional_expenses',\n  });\n\n  const {userProfiles} = useGetUserProfiles({\n    page: 1,\n    size: 10000,\n    organization_unit_id,\n  });\n\n  const onDelete = (row: any) => {\n    remove(findIndexInFieldsArray(row.id));\n  };\n\n  const tableActions = [\n    {\n      name: 'Izbriši',\n      onClick: onDelete,\n      icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n    },\n  ];\n\n  const debtorDropdownOptions = generateUsersDropdownOptions(userProfiles);\n\n  const handleImportResponse = (response: any, type: 'salaries' | 'suspensions') => {\n    if (!response?.status) return;\n\n    if (response?.validation?.length) {\n      const errorsArr = response?.validation?.map(\n        (error: {column: number; message: string; row: number}) =>\n          `Red ${error.row}, Kolona ${error.column}: ${error.message}`,\n      );\n\n      type === 'salaries' && setImportSalariesErrors(errorsArr);\n      type === 'suspensions' && setImportSuspensionsErrors(errorsArr);\n      return;\n    }\n\n    if (!response.data?.length) return;\n    setImportSalariesErrors([]);\n    setImportSuspensionsErrors([]);\n\n    if (type === 'salaries') {\n      setTotalEmployees(response.number_of_employees);\n    }\n\n    response.data.forEach((additionalExpense: SalaryAdditionalExpenseParams) => {\n      append({\n        ...additionalExpense,\n        amount: Math.round(additionalExpense.amount * 100) / 100,\n        // TODO check if there is subject in the response, until then let the user select it manually\n        subject: undefined,\n        account: countsDropdownOptions.find(option => option.id === additionalExpense.account_id) ?? undefined,\n        organization_unit_id: additionalExpense.organization_unit_id,\n        debtor: debtorDropdownOptions.find(debtor => debtor.id === additionalExpense.debtor_id) ?? undefined,\n        title: additionalExpense.title,\n        bank_account: additionalExpense.bank_account\n          ? {id: additionalExpense.bank_account, title: additionalExpense.bank_account}\n          : undefined,\n      } as any);\n    });\n  };\n\n  const handleImportSuspensions = async (files: FileList) => {\n    importSuspensionsExcel(files[0], organization_unit_id, token).then((response: any) =>\n      handleImportResponse(response, 'suspensions'),\n    );\n  };\n\n  const handleImportSalaries = async (files: FileList) => {\n    importSalariesExcel(files[0], organization_unit_id, token).then((response: any) =>\n      handleImportResponse(response, 'salaries'),\n    );\n  };\n\n  const isNew = !salary;\n\n  const onSubmit = async (data: any) => {\n    const payload = {\n      id: isNew ? undefined : salary?.id,\n      activity_id: data.activity.id,\n      month: data.month.id,\n      date_of_calculation: parseDateForBackend(data.date_of_calculation) ?? '',\n      organization_unit_id,\n      description: data.description,\n      number_of_employees: totalEmployees,\n      salary_additional_expenses: data.salary_additional_expenses.map((additionalExpense: SalaryAdditionalExpense) => ({\n        title: additionalExpense.title,\n        account_id: additionalExpense.account.id,\n        amount: additionalExpense.amount,\n        subject_id: additionalExpense.subject.id,\n        debtor_id: additionalExpense.type === 'suspensions' ? additionalExpense.debtor?.id : null,\n        bank_account: additionalExpense.bank_account?.id,\n        organization_unit_id,\n        type: additionalExpense.type,\n      })),\n    };\n\n    insertSalary(\n      payload,\n      salaryId => {\n        if (isNew) {\n          navigate(`/finance/liabilities-receivables/liabilities/salaries/${salaryId}`);\n        }\n        refetchSalary && refetchSalary();\n        alert.success('Uspješno sačuvano.');\n      },\n      () => alert?.error('Greška. Promjene nisu sačuvane.'),\n    );\n  };\n\n  const appendNewRow = (type: keyof typeof AdditionalSalaryExpenseType) => {\n    append({\n      subject: null,\n      debtor: null,\n      account: null,\n      organization_unit_id,\n      type,\n      amount: 0,\n      bank_account: null,\n      title: '',\n    } as any);\n  };\n\n  useEffect(() => {\n    remove();\n    if (!salary) return;\n\n    // fill inputs\n    reset({\n      ...salary,\n      activity: mockedActivitiesDropdownOption.find(option => option.id === salary.activity.id),\n      month: monthOptions.find(option => option.id === salary.month),\n      date_of_calculation: salary.date_of_calculation,\n      description: salary.description,\n      salary_additional_expenses: [],\n    });\n\n    // fill additional expenses inputs\n    if (!salary.salary_additional_expenses.length) return;\n    salary.salary_additional_expenses.forEach(additionalExpense => {\n      append({\n        ...additionalExpense,\n        subject: additionalExpense.subject ?? undefined,\n        debtor: additionalExpense.debtor\n          ? additionalExpense.debtor.id === 0\n            ? undefined\n            : additionalExpense.debtor\n          : undefined,\n        account: countsDropdownOptions?.find(option => option.id === additionalExpense.account.id) ?? undefined,\n        organization_unit_id: additionalExpense.organization_unit.id,\n        title: additionalExpense.title,\n        bank_account: additionalExpense.bank_account,\n      } as any);\n    });\n  }, [salary]);\n\n  const groupByType = (fields: any[]) => {\n    return fields.reduce((acc, field) => {\n      (acc[field.type] = acc[field.type] || []).push(field);\n      return acc;\n    }, {});\n  };\n\n  const groupedFields = useMemo(() => groupByType(fields), [fields, salary]);\n  // const groupedFields = groupByType(fields);\n  const suspensionsFields = groupedFields['suspensions'] ?? [];\n  const contributionsFields = groupedFields['contributions'] ?? [];\n  const taxesFields = groupedFields['taxes'] ?? [];\n  const subtaxesFields = groupedFields['subtaxes'] ?? [];\n  const banksFields = groupedFields['banks'] ?? [];\n\n  const findIndexInFieldsArray = (id: string) => {\n    return fields.findIndex(field => field.id === id);\n  };\n\n  const debtorTableHead: TableHead = {\n    title: 'Dužnik',\n    accessor: 'debtor',\n    type: 'custom',\n    renderContents: (_item, row) => {\n      const index = findIndexInFieldsArray(row.id);\n\n      return (\n        <Controller\n          name={`salary_additional_expenses.${index}.debtor`}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              placeholder={'Odaberite dužnika'}\n              options={debtorDropdownOptions}\n              isRequired\n              error={errors.salary_additional_expenses?.[index]?.debtor?.message}\n            />\n          )}\n        />\n      );\n    },\n  };\n\n  const salariesAdditionalExpensesTableHeads: TableHead[] = [\n    {\n      title: 'Naziv',\n      accessor: 'title',\n      type: 'custom',\n      width: '20%',\n      renderContents: (_item, row) => {\n        const index = findIndexInFieldsArray(row.id);\n        return (\n          <Input\n            {...register(`salary_additional_expenses.${index}.title`)}\n            error={errors.salary_additional_expenses?.[index]?.title?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Konto',\n      accessor: 'account',\n      type: 'custom',\n      width: '20%',\n      renderContents: (_item, row) => {\n        const index = findIndexInFieldsArray(row.id);\n\n        return (\n          <Controller\n            name={`salary_additional_expenses.${index}.account`}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                placeholder={'Odaberite konto'}\n                options={countsDropdownOptions}\n                isRequired\n                error={errors.salary_additional_expenses?.[index]?.account?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      width: '200px',\n      renderContents: (_item, row) => {\n        const index = findIndexInFieldsArray(row.id);\n\n        return (\n          <Input\n            {...register(`salary_additional_expenses.${index}.amount`)}\n            type=\"number\"\n            leftContent={<div>€</div>}\n            error={errors.salary_additional_expenses?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Subjekat',\n      accessor: 'subject',\n      type: 'custom',\n      renderContents: (_item, row) => {\n        const index = findIndexInFieldsArray(row.id);\n\n        const currentSubject = watch(`salary_additional_expenses.${index}.subject`);\n        const bankAccounts =\n          suppliersDropdownOptions\n            .find(option => option.id === currentSubject?.id)\n            ?.bank_accounts.map(bankAcc => {\n              return {id: bankAcc, title: bankAcc};\n            }) ?? [];\n\n        useEffect(() => {\n          if (!bankAccounts.length) return;\n          // automatically select first bank account for the subject\n          setValue(`salary_additional_expenses.${index}.bank_account`, bankAccounts[0]);\n          // clear bank account error if subject is changed and account is selected\n          if (errors.salary_additional_expenses?.[index]?.bank_account?.message) {\n            clearErrors(`salary_additional_expenses.${index}.bank_account`);\n          }\n        }, [currentSubject, bankAccounts, index, setValue]);\n\n        return (\n          <Controller\n            name={`salary_additional_expenses.${index}.subject`}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={selectedValue => {\n                  onChange(selectedValue);\n                  setValue(\n                    `salary_additional_expenses.${index}.bank_account`,\n                    bankAccounts?.length ? bankAccounts[0] : {id: '', title: ''},\n                  );\n                }}\n                placeholder={'Odaberite subjekat'}\n                options={suppliersDropdownOptions}\n                isRequired\n                error={errors.salary_additional_expenses?.[index]?.subject?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Račun subjekta',\n      accessor: 'bank_account',\n      type: 'custom',\n      renderContents: (_item, row) => {\n        const index = findIndexInFieldsArray(row.id);\n\n        const currentSubject = watch(`salary_additional_expenses.${index}.subject`);\n        const bankAccounts =\n          suppliersDropdownOptions\n            .find(option => option.id === currentSubject?.id)\n            ?.bank_accounts.map(bankAcc => {\n              return {id: bankAcc, title: bankAcc};\n            }) ?? [];\n\n        return (\n          <Controller\n            name={`salary_additional_expenses.${index}.bank_account`}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                placeholder={'Odaberite račun subjekta'}\n                options={bankAccounts}\n                isRequired\n                error={errors.salary_additional_expenses?.[index]?.bank_account?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n  const salariesAdditionalExpensesTableHeadsWithDebtor = [...salariesAdditionalExpensesTableHeads];\n  salariesAdditionalExpensesTableHeadsWithDebtor.splice(1, 0, debtorTableHead);\n\n  const renderInfoBox = (label: string, value: number, isCurrency = false) => {\n    return (\n      <InfoBox>\n        <InfoBoxText variant=\"bodySmall\" content={isCurrency ? formatCurrency(value, 'left') : value} />\n        <InfoBoxText variant=\"bodySmall\" content={label} />\n      </InfoBox>\n    );\n  };\n\n  const renderTitleDivider = (type: keyof typeof AdditionalSalaryExpenseType) => {\n    return (\n      <TitleDivider>\n        <Title content={AdditionalSalaryExpenseType[type]} />\n        <AddIcon onClick={() => appendNewRow(type)}>\n          <PlusIcon width={'18px'} stroke={Theme?.palette?.primary500} />\n        </AddIcon>\n      </TitleDivider>\n    );\n  };\n\n  return (\n    <SalariesFormContainer>\n      <>\n        <Row>\n          <Controller\n            name=\"activity\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"AKTIVNOST\"\n                placeholder={'Odaberite aktivnost'}\n                // TODO activities not yet done, send 0 until it's fixed\n                options={mockedActivitiesDropdownOption}\n                error={errors.activity?.message}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'month'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"MJESEC:\"\n                placeholder={'Odaberite mjesec'}\n                options={monthOptions}\n                error={errors.month?.message}\n              />\n            )}\n          />\n          <Controller\n            name={'date_of_calculation'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM OBRAČUNA:\"\n                onChange={onChange}\n                error={errors.date_of_calculation?.message}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Input\n            {...register('description')}\n            label=\"OPIS:\"\n            textarea\n            placeholder=\"Unesite opis\"\n            error={errors.description?.message}\n          />\n        </Row>\n\n        <InfoBoxWrapper>\n          {renderInfoBox('BROJ ZAPOSLENIH', salary ? salary.number_of_employees : 0)}\n          {renderInfoBox('UKUPNI NETO IZNOS', salary ? salary.net_price + salary.obligations_price : 0, true)}\n          {renderInfoBox('UKUPNO OBUSTAVE', salary ? salary.obligations_price : 0, true)}\n          {renderInfoBox('ZA ISPLATU BANKAMA', salary ? salary.net_price : 0, true)}\n        </InfoBoxWrapper>\n        <Row>\n          <FileUploadStepTitle variant=\"bodyMedium\" content=\"STEP 1: UVEZI REKAPITULACIJU MJESEČNE ZARADE\" />\n        </Row>\n        <FileUploadWrapper>\n          <FileUpload\n            icon={<></>}\n            variant=\"secondary\"\n            onUpload={handleImportSalaries}\n            accept=\".xlsx\"\n            note={\n              <>\n                <Typography variant=\"bodySmall\" content=\"UVEZI REKAPITULACIJU MJESEČNE ZARADE\" />\n                <FileTypeWarning variant=\"bodySmall\" content=\"Fajl mora biti u .xlsx formatu!\" />\n              </>\n            }\n            buttonText=\"UČITAJ FAJL\"\n          />\n          <FileUploadErrorsWrapper>\n            {importSalariesErrors.map((error, index) => (\n              <Typography key={index} variant=\"bodySmall\" content={error} style={{color: Theme.palette?.error500}} />\n            ))}\n          </FileUploadErrorsWrapper>\n        </FileUploadWrapper>\n        <Row>\n          <FileUploadStepTitle variant=\"bodyMedium\" content=\"STEP 2: UVEZI REKAPITULACIJU OBUSTAVA ZARADA\" />\n        </Row>\n        <FileUploadWrapper>\n          <FileUpload\n            icon={<></>}\n            variant=\"secondary\"\n            onUpload={handleImportSuspensions}\n            accept=\".xlsx\"\n            note={\n              <>\n                <Typography variant=\"bodySmall\" content=\"UVEZI REKAPITULACIJU OBUSTAVA ZARADA\" />\n                <FileTypeWarning variant=\"bodySmall\" content=\"Fajl mora biti u .xlsx formatu!\" />\n              </>\n            }\n            buttonText=\"UČITAJ FAJL\"\n          />\n          <FileUploadErrorsWrapper>\n            {importSuspensionsErrors.map((error, index) => (\n              <Typography key={index} variant=\"bodySmall\" content={error} style={{color: Theme.palette?.error500}} />\n            ))}\n          </FileUploadErrorsWrapper>\n        </FileUploadWrapper>\n        {renderTitleDivider('contributions')}\n        <Table\n          tableHeads={salariesAdditionalExpensesTableHeads}\n          data={contributionsFields}\n          tableActions={tableActions}\n        />\n        {renderTitleDivider('taxes')}\n        <Table tableHeads={salariesAdditionalExpensesTableHeads} data={taxesFields} tableActions={tableActions} />\n        {renderTitleDivider('subtaxes')}\n        <Table tableHeads={salariesAdditionalExpensesTableHeads} data={subtaxesFields} tableActions={tableActions} />\n        {renderTitleDivider('banks')}\n        <Table tableHeads={salariesAdditionalExpensesTableHeads} data={banksFields} tableActions={tableActions} />\n        {renderTitleDivider('suspensions')}\n        <Table\n          tableHeads={salariesAdditionalExpensesTableHeadsWithDebtor}\n          data={suspensionsFields}\n          tableActions={tableActions}\n        />\n        <Footer>\n          <Button content=\"Obriši\" variant=\"secondary\" onClick={() => reset()} />\n          <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} />\n        </Footer>\n      </>\n    </SalariesFormContainer>\n  );\n};\n\nexport default SalaryForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salaryForm/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salaryUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/get-environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/getEnvironment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/additionalExpensesOverview/additionalExpensesOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/additionalExpensesOverview/useAdditionalExpensesOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/budgetContoUpdate/updateContoVersion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/budgetContoUpdate/useUpdateControVersion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/calculateAdditionalExpenses/calculateAdditionalExpenses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/calculateAdditionalExpenses/useCalculateAdditionalExpenses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/counts/getCountOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/counts/useGetCountOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/deleteBudget/deleteBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/deleteBudget/useDeleteBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/deleteFee.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/deleteFeesPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/getFeesPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/insertFeesPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/useDeleteFeesPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/useGetFeesPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/useInsertFeesPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/getFees.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/insertFee.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/useDeleteFee.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/useGetFees.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/useInsertFee.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/deleteFine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/deleteFinePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/getFinePayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/insertFinePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/useDeleteFinePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/useGetFinePayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/useInsertFinePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finesOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/insertFine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/useDeleteFine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/useGetFines.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/useInsertFine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/deleteDepositDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/deleteFixedDeposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/deleteFixedDepositItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/getFixedDeposits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/insertDepositDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/insertFixedDeposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/insertFixedDepositItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useDeleteDepositDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useDeleteFixedDeposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useDeleteFixedDepositItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useGetFixedDeposits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useInsertDepositDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useInsertDepositItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useInsertFixedDeposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/deleteFlatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRateOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/deleteFlatRatePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/getFlatRatePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/insertFlatRatePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/useDeleteFlatRatePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/useGetFlatRatePayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/useInsertFlatRatePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/insertFlatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/useDeleteFlatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/useGetFlatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/useInsertFlatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getBudgetDetails/getBudgetDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getBudgetDetails/useGetBudgetDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getBudgets/getBudgets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getBudgets/useGetBudgets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getFinancial/getFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getFinancial/useGetFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getSettings/useGetSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6049,6052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6049,6052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6063,6066],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6063,6066],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {getEnvironment} from '../get-environment';\nimport calculateAdditionalExpenses from './calculateAdditionalExpenses/calculateAdditionalExpenses.ts';\nimport getCountOverview from './counts/getCountOverview.ts';\nimport deleteBudget from './deleteBudget/deleteBudget';\nimport deleteFee from './fees/deleteFee.ts';\nimport deleteFeesPayment from './fees/feesPayments/deleteFeesPayment.ts';\nimport getFeesPayments from './fees/feesPayments/getFeesPayments.ts';\nimport insertFeesPayment from './fees/feesPayments/insertFeesPayment.ts';\nimport getFeesOverview from './fees/getFees.ts';\nimport insertFee from './fees/insertFee.ts';\nimport deleteFine from './fines/deleteFine.ts';\nimport deleteFinePayment from './fines/finePayments/deleteFinePayment.ts';\nimport getFinePayments from './fines/finePayments/getFinePayments.ts';\nimport insertFinePayment from './fines/finePayments/insertFinePayment.ts';\nimport finesOverview from './fines/finesOverview.ts';\nimport insertFine from './fines/insertFine.ts';\nimport deleteDepositDispatch from './fixedDeposits/deleteDepositDispatch.ts';\nimport deleteFixedDeposit from './fixedDeposits/deleteFixedDeposit.ts';\nimport deleteFixedDepositItem from './fixedDeposits/deleteFixedDepositItem.ts';\nimport getFixedDeposits from './fixedDeposits/getFixedDeposits.ts';\nimport insertDepositDispatch from './fixedDeposits/insertDepositDispatch.ts';\nimport insertFixedDeposit from './fixedDeposits/insertFixedDeposit.ts';\nimport insertFixedDepositItem from './fixedDeposits/insertFixedDepositItem.ts';\nimport deleteFlatRate from './flatRate/deleteFlatRate.ts';\nimport flatRateOverview from './flatRate/flatRateOverview.ts';\nimport deleteFlatRatePayment from './flatRate/flatRatePayments/deleteFlatRatePayment.ts';\nimport getFlatRatePayment from './flatRate/flatRatePayments/getFlatRatePayment.ts';\nimport insertFlatRatePayment from './flatRate/flatRatePayments/insertFlatRatePayment.ts';\nimport insertFlatRate from './flatRate/insertFlatRate.ts';\nimport getBudgetDetails from './getBudgetDetails/getBudgetDetails.ts';\nimport getBudgets from './getBudgets/getBudgets';\nimport insertBudget from './insertBudget/insertBudget.ts';\nimport goalsInsert from './insertNonFinancial/goals/insertGoals.ts';\nimport insertNonFinancial from './insertNonFinancial/insertNonFinancial.ts';\nimport deleteInvoice from './invoice/deleteInvoice.ts';\nimport getInvoice from './invoice/getInvoice.ts';\nimport insertInvoice from './invoice/insertInvoice.ts';\nimport getJudges from './judges/getJudges.ts';\nimport deleteProceduralCost from './proceduralCosts/deleteProceduralCost.ts';\nimport insertProceduralCost from './proceduralCosts/insertProceduralCost.ts';\nimport proceduralCostsOverview from './proceduralCosts/proceduralCostsOverview.ts';\nimport deleteProceduralCostPayment from './proceduralCosts/proceduralCostsPayments/deleteProceduralCostPayment.ts';\nimport getProceduralCostPayment from './proceduralCosts/proceduralCostsPayments/getProceduralCostPayment.ts';\nimport insertProceduralCostPayment from './proceduralCosts/proceduralCostsPayments/insertProceduralCostPayment.ts';\nimport deletePropertyBenefitsConfiscation from './propertyBenefitsConfiscation/deletePropertyBenefitsConfiscation.ts';\nimport insertPropertyBenefitsConfiscation from './propertyBenefitsConfiscation/insertPropertyBenefitsConfiscation.ts';\nimport propertyBenefitsConfiscationOverview from './propertyBenefitsConfiscation/propertyBenefitsConfiscationOverview.ts';\nimport deletePropertyBenefitsConfiscationPayment from './propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/deletePropertyBenefitsConfiscationPayment.ts';\nimport getPropertyBenefitsConfiscationPayment from './propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/getPropertyBenefitsConfiscationPayment.ts';\nimport insertPropertyBenefitsConfiscationPayment from './propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/insertPropertyBenefitsConfiscationPayment.ts';\nimport deletePaymentOrder from './receivables/deletePaymentOrder.ts';\nimport insertPaymentOrder from './receivables/insertPaymentOrder.ts';\nimport obligationsOverview from './receivables/obligationsOverview.ts';\nimport payPaymentOrder from './receivables/payPaymentOrder.ts';\nimport paymentOrderOverview from './receivables/paymentOrderOverview.ts';\nimport sendBudget from './sendBudget/sendBudget.ts';\nimport deleteDepositPayment from './transitDeposits/deleteDepositPayment.ts';\nimport deleteDepositPaymentOrder from './transitDeposits/deleteDepositPaymentOrder.ts';\nimport getAdditionalExpenses from './transitDeposits/getAdditionalExpenses.ts';\nimport getCases from './transitDeposits/getCases.ts';\nimport getDepositPaymentOrders from './transitDeposits/getDepositPaymentOrders.ts';\nimport getDepositPayments from './transitDeposits/getDepositPayments.ts';\nimport getInitialState from './transitDeposits/getInitialState.ts';\nimport getRemainAmountByCaseNumber from './transitDeposits/getRemainAmountByCaseNumber.ts';\nimport insertDepositPayment from './transitDeposits/insertDepositPayment.ts';\nimport insertDepositPaymentOrder from './transitDeposits/insertDepositPaymentOrder.ts';\nimport payOrder from './transitDeposits/payOrder.ts';\nimport deleteWill from './wills/deleteWill.ts';\nimport getWill from './wills/getWill.ts';\nimport insertWill from './wills/insertWill.ts';\nimport insertWillDispatch from './wills/insertWillDispatch.ts';\nimport deleteWillDispatch from './wills/deleteWillDispatch.ts';\nimport additionalExpensesOverview from './additionalExpensesOverview/additionalExpensesOverview.ts';\nimport salariesOverview from './salaries/salariesOverview.ts';\nimport insertSalary from './salaries/insertSalary.ts';\nimport deleteSalary from './salaries/deleteSalary.ts';\nimport getUserProfiles from './userProfiles/getUserProfiles.ts';\n\nexport const BFF_URL = {\n  local: 'http://localhost:8080',\n  development: 'https://sss-erp-bff.oykos.me',\n  staging: 'http://localhost:8080',\n  production: 'http://localhost:8080',\n};\n\nexport const GraphQL = {\n  fetch: (query: string, variables?: any): Promise<any> => {\n    return fetch(BFF_URL[getEnvironment()], {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({query, variables}),\n    })\n      .then(response => response.json())\n      .catch(error => console.error(error));\n  },\n  getBudgets: getBudgets,\n  insertBudget: insertBudget,\n  deleteBudget: deleteBudget,\n  sendBudget: sendBudget,\n  getCountOverview: getCountOverview,\n  getBudgetDetails: getBudgetDetails,\n  insertNonFinancial: insertNonFinancial,\n  goalsInsert: goalsInsert,\n  finesOverview: finesOverview,\n  insertFine: insertFine,\n  deleteFine: deleteFine,\n  insertFinePayment: insertFinePayment,\n  deleteFinePayment: deleteFinePayment,\n  getFinePayments: getFinePayments,\n  getFeesOverview: getFeesOverview,\n  insertFee: insertFee,\n  deleteFee: deleteFee,\n  insertFeePayment: insertFeesPayment,\n  deleteFeePayment: deleteFeesPayment,\n  getFeePayments: getFeesPayments,\n  getInvoice: getInvoice,\n  insertInvoice: insertInvoice,\n  deleteInvoice: deleteInvoice,\n  getFixedDeposits: getFixedDeposits,\n  getJudges: getJudges,\n  proceduralCostsOverview: proceduralCostsOverview,\n  insertProceduralCost: insertProceduralCost,\n  deleteProceduralCost: deleteProceduralCost,\n  getProceduralCostPayments: getProceduralCostPayment,\n  insertProceduralCostPayment: insertProceduralCostPayment,\n  deleteProceduralCostPayment: deleteProceduralCostPayment,\n  propertyBenefitsConfiscationOverview: propertyBenefitsConfiscationOverview,\n  insertPropertyBenefitsConfiscation: insertPropertyBenefitsConfiscation,\n  deletePropertyBenefitsConfiscation: deletePropertyBenefitsConfiscation,\n  getPropertyBenefitsConfiscationPayment: getPropertyBenefitsConfiscationPayment,\n  insertPropertyBenefitsConfiscationPayment: insertPropertyBenefitsConfiscationPayment,\n  deletePropertyBenefitsConfiscationPayment: deletePropertyBenefitsConfiscationPayment,\n  flatRateOverview: flatRateOverview,\n  insertFlatRate: insertFlatRate,\n  deleteFlatRate: deleteFlatRate,\n  getFlatRatePayments: getFlatRatePayment,\n  insertFlatRatePayment: insertFlatRatePayment,\n  deleteFlatRatePayment: deleteFlatRatePayment,\n  insertFixedDeposit: insertFixedDeposit,\n  deleteFixedDeposit: deleteFixedDeposit,\n  insertFixedDepositItem: insertFixedDepositItem,\n  deleteFixedDepositItem: deleteFixedDepositItem,\n  insertDepositDispatch: insertDepositDispatch,\n  deleteDepositDispatch: deleteDepositDispatch,\n  getWill: getWill,\n  insertWill: insertWill,\n  deleteWill: deleteWill,\n  insertWillDispatch: insertWillDispatch,\n  deleteWillDispatch: deleteWillDispatch,\n  calculateAdditionalExpenses: calculateAdditionalExpenses,\n  additionalExpensesOverview: additionalExpensesOverview,\n  insertDepositPayment: insertDepositPayment,\n  getDepositPayments: getDepositPayments,\n  deleteDepositPayment: deleteDepositPayment,\n  getDepositPaymentOrders: getDepositPaymentOrders,\n  deleteDepositPaymentOrder: deleteDepositPaymentOrder,\n  insertDepositPaymentOrder: insertDepositPaymentOrder,\n  getAdditionalExpenses: getAdditionalExpenses,\n  getRemainAmountByCaseNumber: getRemainAmountByCaseNumber,\n  getCases: getCases,\n  payOrder: payOrder,\n  getInitialState: getInitialState,\n  paymentOrderOverview: paymentOrderOverview,\n  deletePaymentOrder: deletePaymentOrder,\n  obligationsOverview: obligationsOverview,\n  payPaymentOrder: payPaymentOrder,\n  insertPaymentOrder: insertPaymentOrder,\n  salariesOverview: salariesOverview,\n  insertSalary: insertSalary,\n  deleteSalary: deleteSalary,\n  getUserProfiles: getUserProfiles,\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertBudget/insertBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertBudget/useInsertBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertNonFinancial/goals/insertGoals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertNonFinancial/goals/useInsertGoals.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[290,293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[290,293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState} from 'react';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {GraphQL} from '../../index.ts';\n\nconst useInsertGoals = () => {\n  const [loading, setLoading] = useState(false);\n  const {fetch} = useAppContext();\n\n  const insertGoals = async (data: any, onSuccess?: () => void, onError?: () => void) => {\n    setLoading(true);\n    const response = await fetch(GraphQL.goalsInsert, {data});\n    if (response.goalsNotFinancially_Insert.status === 'success') {\n      onSuccess && onSuccess();\n    } else {\n      onError && onError();\n    }\n  };\n\n  return {loading, insertGoals};\n};\n\nexport default useInsertGoals;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertNonFinancial/insertNonFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertNonFinancial/useInsertNonFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/deleteInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/getInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/insertInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/useDeleteInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/useGetInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/useInsertInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/judges/getJudges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/judges/useGetJudges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/orders/getOrders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/orders/useGetOrders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/organizationUnits/useGetOrganizationUnits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/deleteProceduralCost.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/insertProceduralCost.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/deleteProceduralCostPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/getProceduralCostPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/insertProceduralCostPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/useDeleteProceduralCostPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/useGetProceduralCostPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/useInsertProceduralCostPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/useDeleteProceduralCost.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/useGetProceduralCosts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/useInsertProceduralCost.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/deletePropertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/insertPropertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/deletePropertyBenefitsConfiscationPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/getPropertyBenefitsConfiscationPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/insertPropertyBenefitsConfiscationPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useDeletePropertyBenefitsConfiscationPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useGetPropertyBenefitsConfiscationPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useInsertPropertyBenefitsConfiscationPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/useDeletePropertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/useGetPropertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/useInsertPropertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/receivables/deletePaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/receivables/insertPaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/receivables/obligationsOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/receivables/payPaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/receivables/paymentOrderOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/receivables/useDeletePaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/receivables/useGetObligations.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":17,"column":53,"nodeType":"Literal","messageId":"wrongQuotes","endLine":17,"endColumn":74,"fix":{"range":[803,824],"text":"'There aren\\'t items!'"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {useState} from 'react';\nimport useAppContext from '../../../context/useAppContext';\nimport {ObligationsItem, ObligationsParams} from '../../../types/graphQL/receivablesTypes';\nimport {ReceivablesResponse} from '../../../types/graphQL/response';\nimport obligationsOverview from './obligationsOverview';\n\nconst useGetObligations = (params: ObligationsParams) => {\n  const [obligations, setObligations] = useState<ObligationsItem[]>([]);\n\n  const [loading, setLoading] = useState(true);\n  const {fetch} = useAppContext();\n\n  const fetchObligations = async (getMessage: () => void) => {\n    const response: ReceivablesResponse['getObligations'] = await fetch(obligationsOverview, params);\n\n    const items = response?.obligations_Overview?.items;\n    if (response?.obligations_Overview?.message === \"There aren't items!\") {\n      getMessage && getMessage();\n    }\n\n    setObligations(items);\n    setLoading(false);\n  };\n\n  return {obligations, loading, fetchObligations};\n};\n\nexport default useGetObligations;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/receivables/useGetPaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/receivables/useInsertPaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/receivables/usePayPaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/salaries/deleteSalary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/salaries/insertSalary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/salaries/salariesOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/salaries/useDeleteSalary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/salaries/useGetSalaries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/salaries/useInsertSalary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/sendBudget/sendBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/sendBudget/useSendBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/suppliers/useGetSuppliers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/taxAuthorityCodebook/useGetTaxAuthorityCodebookOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/deleteDepositPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/deleteDepositPaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/getAdditionalExpenses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/getCases.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/getDepositPaymentOrders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/getDepositPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/getInitialState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/getRemainAmountByCaseNumber.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/insertDepositPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/insertDepositPaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/payOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/useDeleteDepositPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/useDeleteDepositPaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/useGetAdditionalExpenses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/useGetCases.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/useGetDepositPaymentOrders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/useGetDepositPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/useGetInitialState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/useGetRemainAmountByCaseNumber.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/useInsertDepositPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/useInsertDepositPaymentOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/transitDeposits/usePayOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/userProfiles/getUserProfiles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/userProfiles/useGetUserProfiles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/wills/deleteWill.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/wills/deleteWillDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/wills/getWill.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/wills/insertWill.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/wills/insertWillDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/wills/useDeleteWill.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/wills/useDeleteWillDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/wills/useGetWills.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/wills/useInsertWill.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/wills/useInsertWillDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/importExcel/importSalaries.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[117,120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[117,120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const importSalariesExcel = async (\n  file: File,\n  organization_unit_id: number,\n  token: string,\n): Promise<any['data']> => {\n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('organization_unit_id', organization_unit_id.toString());\n\n  const response = await fetch('https://sss-erp-bff.oykos.me/files/import-salaries-excel', {\n    method: 'POST',\n    headers: {\n      ...(token && {Authorization: `Bearer ${token}`}),\n    },\n    body: formData,\n  });\n\n  return await response.json();\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/importExcel/importSuspensions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[120,123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[120,123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const importSuspensionsExcel = async (\n  file: File,\n  organization_unit_id: number,\n  token: string,\n): Promise<any['data']> => {\n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('organization_unit_id', organization_unit_id.toString());\n\n  const response = await fetch('https://sss-erp-bff.oykos.me/files/import-suspensions-excel', {\n    method: 'POST',\n    headers: {\n      ...(token && {Authorization: `Bearer ${token}`}),\n    },\n    body: formData,\n  });\n\n  return await response.json();\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/FileUploadWrapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/budgetTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/components/budgetTableRow.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":243,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":243,"endColumn":13,"fix":{"range":[8263,8275],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":244,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":244,"endColumn":11,"fix":{"range":[8342,8352],"text":"        "}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import {\n  Typography,\n  ChevronRightIcon,\n  Theme,\n  Dropdown,\n  ChevronDownIcon,\n  EditIconTwo,\n  Input,\n  Checkbox,\n} from 'client-library';\nimport {ReactNode, useState, useMemo} from 'react';\nimport {Count} from '../../../types/graphQL/counts';\nimport {months, sourceOptions} from '../constants';\nimport {BudgetText, CountTableCell, FlexContainer} from '../styles';\nimport {BudgetTableStep} from '../types';\nimport BudgetingForm from './budgetingForm';\nimport {useFormContext, Controller} from 'react-hook-form';\n\ntype BudgetTableRowProps = {\n  step: BudgetTableStep | `${BudgetTableStep}`;\n  count: Count;\n  level: number;\n  fieldPath: string[];\n  children: ReactNode;\n  updateParentValues: (fieldPath: string) => void;\n};\n\nconst BudgetTableRow = ({step, count, level, fieldPath, children, updateParentValues}: BudgetTableRowProps) => {\n  const {control} = useFormContext();\n\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const onCollapse = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  const content = useMemo(() => {\n    switch (step) {\n      case BudgetTableStep.CREATING:\n      case BudgetTableStep.AWAITING_APPROVAL:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <Typography content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.BUDGETING:\n      case BudgetTableStep.BUDGETING_ACTUAL:\n        return (\n          <BudgetingForm\n            updateParentValues={updateParentValues}\n            level={level}\n            lastLevel={!count.children?.length}\n            fieldPath={fieldPath}\n            actual={step === BudgetTableStep.BUDGETING_ACTUAL}\n          />\n        );\n      case BudgetTableStep.VIEW_ANNUAL:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.VIEW_MONTHLY:\n        return (\n          <>\n            {months.map((value, index) => (\n              <CountTableCell level={level} key={`${value}-${index}`}>\n                <div style={{width: 50}}>\n                  <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n                </div>\n              </CountTableCell>\n            ))}\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.REBALANCING:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level} rebalanceCol>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level} rebalanceCol>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.CURRENT_BUDGET:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.VIEW_MONTHLY_WITH_EDIT:\n        return (\n          <>\n            {months.map((value, index) => (\n              <CountTableCell level={level} key={`${value}-${index}`}>\n                <div style={{width: 100}}>\n                  <Input />\n                  <BudgetText content=\"0.00\" variant=\"bodySmall\" style={{color: 'red'}} />\n                </div>\n              </CountTableCell>\n            ))}\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <div style={{display: 'flex', justifyContent: 'center'}}>\n                {/*TO DO add logic for Edit, for now we do not have BE ready */}\n                <EditIconTwo />\n              </div>\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.INTERNAL_REALLOCATION:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <Input />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <Input />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.REQUEST_FUND_RELEASE:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <Input />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n                {/* TO DO add logic for check, for now we do not have BE */}\n                <Checkbox name={''} onChange={undefined} checked={false} style={{marginLeft: '20px'}} />\n              </div>\n            </CountTableCell>\n          </>\n        );\n      default:\n        <></>;\n    }\n  }, [step, count, level]);\n\n  const sourceCellContent = useMemo(() => {\n    const lastLevel = !count.children?.length;\n\n    if (lastLevel) {\n      return step === BudgetTableStep.BUDGETING ? (\n        <Controller\n          control={control}\n          name={`${fieldPath.join('.')}-source`}\n          render={({field: {onChange, name, value}}) => (\n            <Dropdown\n              options={sourceOptions}\n              value={value}\n              name={name}\n              onChange={onChange}\n              placeholder=\"Izaberite izvor\"\n            />\n          )}\n        />\n      ) : (\n        <Typography content=\"\" variant=\"bodySmall\" />\n      );\n    }\n\n    return null;\n  }, [count, step, level]);\n\n  const generateChevronIcon = () => {\n    return isCollapsed ? (\n      <ChevronDownIcon stroke={Theme.palette.gray900} style={{marginRight: 10}} />\n    ) : (\n      <ChevronRightIcon stroke={Theme.palette.gray900} style={{marginRight: 10}} />\n    );\n  };\n\n  return (\n    <>\n      <tr>\n        <CountTableCell level={level} onClick={level === 1 ? onCollapse : undefined} first>\n          <FlexContainer>\n            {level === 1 && generateChevronIcon()}\n            <Typography\n              content={`${count.serial_number} - ${count.title}`}\n              variant=\"bodySmall\"\n              style={{\n                marginLeft: level !== 1 ? 26 : 0,\n                fontWeight: level < 4 ? 600 : 400,\n                padding: `12px ${(level - 1) * 7}`,\n              }}\n            />\n          </FlexContainer>\n        </CountTableCell>\n\n        {/* TO DO  When all the templates are finished, check which ones require this and write the condition more nicely */}\n        {step !== BudgetTableStep.VIEW_MONTHLY &&\n          step !== BudgetTableStep.VIEW_MONTHLY_WITH_EDIT &&\n          step !== BudgetTableStep.INTERNAL_REALLOCATION &&\n          step !== BudgetTableStep.REQUEST_FUND_RELEASE && (\n            <CountTableCell level={level}>{sourceCellContent}</CountTableCell>\n          )}\n\n        {content}\n      </tr>\n\n      {isCollapsed && children}\n    </>\n  );\n};\n\nexport default BudgetTableRow;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/components/budgetingForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/confirmationModal/confirmationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/confirmationModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/confirmationModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[68,71],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[68,71],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[105,108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[105,108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[137,140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[137,140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ModalProps {\n  open: boolean;\n  onClose: (action?: any) => void;\n  onConfirm: (action?: any) => void;\n  customContent?: any;\n  subTitle?: string;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/deleteModal/deleteModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/deleteModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/deleteModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74,77],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74,77],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[114,117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[114,117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[146,149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[146,149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface DeleteModalProps {\n  open: boolean;\n  onClose: (action?: any) => void;\n  handleDelete: (action?: any) => void;\n  customContent?: any;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/flex.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/footer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/form.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/pageElements.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/plusButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/screenWrapper/screenWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1092,1095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1092,1095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {FC, ReactElement, ReactNode} from 'react';\nimport {Breadcrumbs} from 'client-library';\nimport styled from 'styled-components';\nimport useAppContext from '../../context/useAppContext';\n\nconst Container = styled.div`\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: #f8f8f8;\n  padding: 28px 40px;\n  height: calc(100vh - 157px);\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n  margin: 0;\n`;\n\nconst ScreenWrapper: FC<{children: ReactNode; showBreadcrumbs?: boolean}> = ({children, showBreadcrumbs = true}) => {\n  const {\n    breadcrumbs,\n    navigation: {navigate},\n  } = useAppContext();\n\n  const breadcrumbItems = breadcrumbs?.get();\n\n  const handleNavigation = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | undefined,\n    item?: {\n      name: string;\n      to: string;\n      icon?: ReactElement;\n    },\n  ) => {\n    e?.preventDefault();\n    const newBreacrumbs = [...breadcrumbItems];\n    const index = newBreacrumbs.findIndex((breadcrumb: any) => breadcrumb.name === item?.name);\n    newBreacrumbs.splice(index + 1, newBreacrumbs.length - index);\n    breadcrumbs.set(newBreacrumbs);\n    navigate(item?.to);\n  };\n\n  return (\n    <Container>\n      {showBreadcrumbs ? <StyledBreadcrumbs items={breadcrumbItems} onClick={handleNavigation} /> : null}\n      {children}\n    </Container>\n  );\n};\n\nexport default ScreenWrapper;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/screenWrapper/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/sectionBox.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/statusTableCell/statusTableCell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/statusTableCell/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/styledTabsWithTitle/styledTabsWithTitle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/styledTabsWithTitle/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/tableTitle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/deposits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/dropdownData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/fileUploadType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/additionalExpenses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/budget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/budgetDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/budgetFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/budgetInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/budgetOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/calculateAdditionalExpensesType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/counts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/depositPaymentOrders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/depositPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/feePaymentForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/fees.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[189,192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[189,192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[243,246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[243,246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {GetResponse, InsertResponse, SimpleResponse} from './response';\n\nexport type FeesResponse = {\n  get: {\n    //Todo: replce any with corresponding types\n    fee_Overview: GetResponse<any>;\n  };\n  insert: {\n    fee_Insert: InsertResponse<any>;\n  };\n  delete: {\n    fee_Delete: SimpleResponse;\n  };\n};\n\nexport type FeeInsertParams = {\n  fee_type: number;\n  fee_subcategory: number;\n  decision_number: string;\n  decision_date: string;\n  subject: string;\n  jmbg: string;\n  residence: string;\n  amount: number;\n  payment_reference_number: string;\n  debit_reference_number: string;\n  execution_date: string;\n  payment_deadline_date: string;\n  description: string;\n  court_account: number;\n  file: number[];\n  id: number;\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/fineForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/finePaymentForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/finesOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/fixedDeposits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/flatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/generalSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/initialState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/invoice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[86,89],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[86,89],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[326,329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[326,329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3729,3732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3729,3732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownData} from '../dropdownData';\n\nexport interface ArticlesType {\n  id?: any;\n  title?: string;\n  net_price?: number;\n  vat_price?: number;\n  description?: string;\n  vat_percentage?: number;\n  amount?: number;\n  account: {\n    id?: number;\n    title?: string;\n  };\n}\n\nexport interface AdditionalExpenses {\n  id?: any;\n  title?: string;\n  price?: number;\n  bank_account?: string;\n  subject?: {\n    id?: number;\n    title?: string;\n  };\n  account: {\n    id?: number;\n    title?: string;\n  };\n}\n\nexport interface DecisionItem {\n  id: number;\n  type: string;\n  invoice_number: string;\n  supplier_title: string;\n  supplier: {\n    id: number;\n    title: string;\n  };\n  date_of_invoice: string | Date;\n  sss_invoice_receipt_date: Date;\n  date_of_payment: string | Date;\n  receipt_date: string | Date;\n  issuer: string;\n  date_of_start: string | Date;\n  description: string;\n  additional_expenses: AdditionalExpenses[];\n  tax_authority_codebook: DropdownData<number>;\n  type_of_decision: DropdownData<number>;\n  source_of_funding: string;\n  municipality: DropdownData<number>;\n  type_of_contract: DropdownData<number>;\n}\n\nexport interface ContractItem {\n  id: number;\n  type: string;\n  invoice_number: string;\n  supplier_title: string;\n  supplier: {\n    id: number;\n    title: string;\n  };\n  date_of_invoice: string | Date;\n  sss_invoice_receipt_date: Date;\n  date_of_payment: string | Date;\n  receipt_date: string | Date;\n  issuer: string;\n  date_of_start: string | Date;\n  description: string;\n  additional_expenses: AdditionalExpenses[];\n  tax_authority_codebook: DropdownData<number>;\n  type_of_contract: DropdownData<number>;\n  source_of_funding: string;\n  municipality: DropdownData<number>;\n  type_of_decision: DropdownData<number>;\n}\n\nexport interface InvoiceItem {\n  id: number;\n  status: string;\n  type: string;\n  type_of_subject: DropdownData<string>;\n  source_of_funding: string;\n  pro_forma_invoice_number: string;\n  invoice_number: string;\n  supplier_title: string;\n  issuer: string;\n  supplier: {\n    id: number;\n    title: string;\n  };\n  order_id: number;\n  order: {\n    id: number;\n    title: string;\n  };\n  organization_unit: DropdownData<string>;\n  date_of_invoice: Date;\n  pro_forma_invoice_date: Date;\n  receipt_date: Date;\n  sss_invoice_receipt_date: Date;\n  date_of_payment: Date;\n  date_of_start: Date;\n  file: {\n    id: number;\n    name: string;\n    type: string;\n  };\n  pro_forma_invoice_file: {\n    id: number;\n    name: string;\n    type: string;\n  };\n  bank_account: string;\n  description: string;\n  articles: ArticlesType[];\n  is_invoice: boolean;\n  passed_to_accounting: boolean;\n  passed_to_inventory: boolean;\n  additional_expenses: AdditionalExpenses[];\n  municipality: DropdownData<number>;\n  tax_authority_codebook: DropdownData<number>;\n  type_of_decision: DropdownData<number>;\n  type_of_contract: DropdownData<number>;\n}\n\nexport interface GetInvoiceParams {\n  page: number;\n  size: number;\n  type: string;\n  id?: number;\n  status?: string | null;\n  year?: string | null;\n  supplier_id?: number | null;\n  search?: string;\n  organization_unit_id?: number;\n}\n\nexport interface InsertInvoiceParams {\n  is_invoice: {\n    id: boolean;\n    title: string;\n  };\n  invoice_number?: string;\n  supplier_id?: number | null;\n  order_id?: number | null;\n  organization_unit_id?: number | null;\n  date_of_invoice: string | null | Date;\n  pro_forma_invoice_number: string;\n  pro_forma_invoice_date: string | null | Date;\n  receipt_date: string | null | Date;\n  date_of_payment: string | null | Date;\n  sss_invoice_receipt_date: string | null | Date;\n  bank_account: DropdownData<string> | null;\n  description: string;\n  file_id?: number | null;\n  pro_forma_invoice_file_id?: number | null;\n  articles?: any[];\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/judges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/nonFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/orders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/organizationUnits.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[357,360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[357,360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface GetResponse<T> {\n  status: string;\n  message: string;\n  total?: number;\n  items: T[];\n}\n\nexport interface OrganizationUnit {\n  id: number;\n  parent_id: number;\n  number_of_judges: number;\n  title: string;\n  abbreviation: string;\n  description?: string;\n  address?: string;\n  color: string;\n  folder_id: number;\n  icon: string;\n  children?: any;\n}\n\nexport type GetOrganizationUnitsParams = {\n  id?: number;\n  page?: number;\n  size?: number;\n  search?: string;\n};\n\nexport type GetOrganizationUnitsOptions = {\n  allOption?: boolean;\n};\n\nexport type OrganizationUnitsResponse = {\n  get: {\n    organizationUnits: GetResponse<OrganizationUnit>;\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/proceduralCosts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/propertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/receivablesTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1174,1177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1174,1177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface PaymentOrderParams {\n  id?: number;\n  status: string;\n  search: string;\n  organization_unit_id: number | null;\n  page: number;\n  size: number;\n  year: string | null;\n}\n\nexport interface Items {\n  id: number;\n  invoice_id: number;\n  additional_expenses_id: number;\n  salary_additional_expenses_id: number;\n  account: {\n    id: number;\n    title: string;\n  };\n  amount: number;\n  title: string;\n  type: string;\n}\n\nexport interface PaymentOrderItem {\n  id: number;\n  organization_unit: {\n    id: number;\n    title: string;\n  };\n  supplier: {\n    id: number;\n    title: string;\n  };\n  amount: number;\n  bank_account: string;\n  date_of_payment: string | Date;\n  date_of_sap: string | Date;\n  date_of_order: string | Date;\n  id_of_statement: number;\n  sap_id: string;\n  source_of_funding: string;\n  status: string;\n  file: {\n    id: number;\n    name: string;\n    type: string;\n  };\n  items: Items[];\n  created_at: string;\n  updated_at: string;\n  description: string;\n}\n\nexport interface ObligationsParams {\n  supplier_id: number | null;\n  organization_unit_id: number | null;\n  type: string | null;\n}\n\nexport interface ObligationsItem {\n  id: number;\n  supplier: any;\n  invoice_id: number;\n  additional_expense_id: number;\n  salary_additional_expense_id: number;\n  status: string;\n  total_price: number;\n  remain_price: number;\n  title: string;\n  type: string;\n}\n\nexport interface PayPaymentOrderParams {\n  id: number | null;\n  sap_id: string;\n  date_of_sap: string | null;\n}\n\nexport interface InsertPaymentOrderParams {\n  organization_unit_id?: number;\n  supplier_id?: number;\n  amount?: number | null;\n  date_of_payment: string | Date | null;\n  id_of_statement: string;\n  items: {\n    invoice_id: number;\n    additional_expense_id: number;\n    salary_additional_expense_id: number;\n    account_id: number;\n  }[];\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/response.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1762,1765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1762,1765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3273,3276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3273,3276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3344,3347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3344,3347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3912,3915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3912,3915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3997,4000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3997,4000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4423,4426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4423,4426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4489,4492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4489,4492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {BudgetOverviewItem} from './budgetOverview';\nimport {BudgetOverviewInsert} from './budgetInsert';\nimport {BudgetDetailsItem} from './budgetDetails';\nimport {NonFinancialGoal} from './nonFinancial.ts';\nimport {FinesOverviewItem} from './finesOverview.ts';\nimport {InvoiceItem} from './invoice.ts';\nimport {PaymentDetails as FinePaymentDetails} from '../../screens/finesAndTaxes/fines/paymentDetails/types.ts';\nimport {PaymentDetails as FeePaymentDetails} from '../../screens/finesAndTaxes/taxes/paymentDetails/types.ts';\nimport {ProceduralCostOverviewItem} from './proceduralCosts.ts';\nimport {PropertyBenefitsConfiscationOverviewItem} from './propertyBenefitsConfiscation.ts';\nimport {FlatRateOverviewItem} from './flatRate.ts';\nimport {ObligationsItem, PaymentOrderItem} from './receivablesTypes.ts';\nimport {Salary} from './salaries.ts';\n\nexport type PageParams = {\n  page?: number;\n  size?: number;\n};\n\nexport interface GetResponse<T> {\n  status: string;\n  message: string;\n  total?: number;\n  items: T[];\n}\n\nexport interface InsertResponse<T> {\n  status: string;\n  message: string;\n  item: T;\n}\n\nexport type SimpleResponse = {\n  status: string;\n  message: string;\n};\n\nexport type DetailsResponse<T> = {\n  status: string;\n  message: string;\n  item: T | null;\n};\n\nexport type BudgetResponse = {\n  get: {\n    budget_Overview: GetResponse<BudgetOverviewItem>;\n  };\n  insert: {\n    budget_Insert: InsertResponse<BudgetOverviewInsert>;\n  };\n  delete: {\n    budget_Delete: SimpleResponse;\n  };\n  send: {\n    budget_Send: SimpleResponse;\n  };\n  details: {\n    budget_Details: GetResponse<BudgetDetailsItem>;\n  };\n};\n\nexport type NonFinancialResponse = {\n  // get: {};\n  insert: {\n    // TODO add correct type\n    requestNotFinancially_Insert: InsertResponse<any>;\n  };\n  // delete: {};\n};\n\nexport type GoalsResponse = {\n  // get: {};\n  insert: {\n    // TODO add correct type\n    goalsNotFinancially_Insert: InsertResponse<NonFinancialGoal>;\n  };\n  // delete: {};\n};\n\nexport type FinesResponse = {\n  get: {\n    fine_Overview: GetResponse<FinesOverviewItem>;\n  };\n  insert: {\n    fine_Insert: InsertResponse<FinesOverviewItem>;\n  };\n  delete: {\n    fine_Delete: SimpleResponse;\n  };\n};\n\nexport type FinesPaymentsResponse = {\n  get: {\n    finePayment_Overview: GetResponse<FinePaymentDetails>;\n  };\n  insert: {\n    finePayment_Insert: InsertResponse<FinePaymentDetails>;\n  };\n  delete: {\n    finePayment_Delete: SimpleResponse;\n  };\n};\n\nexport type InvoiceResponse = {\n  get: {\n    invoice_Overview: GetResponse<InvoiceItem>;\n  };\n  insert: {\n    invoice_Insert: InsertResponse<InvoiceItem>;\n  };\n  delete: {\n    invoice_Delete: SimpleResponse;\n  };\n};\n\nexport type FeesPaymentsResponse = {\n  get: {\n    feePayment_Overview: GetResponse<FeePaymentDetails>;\n  };\n  insert: {\n    feePayment_Insert: InsertResponse<FeePaymentDetails>;\n  };\n  delete: {\n    feePayment_Delete: SimpleResponse;\n  };\n};\n\nexport type ProceduralCostResponse = {\n  get: {\n    procedureCost_Overview: GetResponse<ProceduralCostOverviewItem>;\n  };\n  insert: {\n    procedureCost_Insert: InsertResponse<ProceduralCostOverviewItem>;\n  };\n  delete: {\n    procedureCost_Delete: SimpleResponse;\n  };\n};\n\nexport type ProceduralCostPaymentsResponse = {\n  get: {\n    procedureCostPayment_Overview: GetResponse<any>;\n  };\n  insert: {\n    procedureCostPayment_Insert: InsertResponse<any>;\n  };\n  delete: {\n    procedureCostPayment_Delete: SimpleResponse;\n  };\n};\n\nexport type PropertyBenefitsConfiscationResponse = {\n  get: {\n    propertyBenefitConfiscation_Overview: GetResponse<PropertyBenefitsConfiscationOverviewItem>;\n  };\n  insert: {\n    propertyBenefitConfiscation_Insert: InsertResponse<PropertyBenefitsConfiscationOverviewItem>;\n  };\n  delete: {\n    propertyBenefitConfiscation_Delete: SimpleResponse;\n  };\n};\n\nexport type PropertyBenefitsConfiscationPaymentsResponse = {\n  get: {\n    propertyBenefitConfiscationPayment_Overview: GetResponse<any>;\n  };\n  insert: {\n    propertyBenefitConfiscationPayment_Insert: InsertResponse<any>;\n  };\n  delete: {\n    propertyBenefitConfiscationPayment_Delete: SimpleResponse;\n  };\n};\n\nexport type FlatRateResponse = {\n  get: {\n    flatRate_Overview: GetResponse<FlatRateOverviewItem>;\n  };\n  insert: {\n    flatRate_Insert: InsertResponse<FlatRateOverviewItem>;\n  };\n  delete: {\n    flatRate_Delete: SimpleResponse;\n  };\n};\n\nexport type FlatRatePaymentsResponse = {\n  get: {\n    flatRatePayment_Overview: GetResponse<any>;\n  };\n  insert: {\n    flatRatePayment_Insert: InsertResponse<any>;\n  };\n  delete: {\n    flatRatePayment_Delete: SimpleResponse;\n  };\n};\n\nexport type ReceivablesResponse = {\n  get: {\n    paymentOrder_Overview: GetResponse<PaymentOrderItem>;\n  };\n  getObligations: {\n    obligations_Overview: GetResponse<ObligationsItem>;\n  };\n  delete: {\n    paymentOrder_Delete: SimpleResponse;\n  };\n  pay: {\n    payPaymentOrder: SimpleResponse;\n  };\n  insert: {\n    paymentOrder_Insert: InsertResponse<PaymentOrderItem>;\n  };\n};\n\nexport type SalariesResponse = {\n  get: {\n    salary_Overview: GetResponse<Salary>;\n  };\n  insert: {\n    salary_Insert: InsertResponse<Salary>;\n  };\n  delete: {\n    salary_Delete: SimpleResponse;\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/salaries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/suppliers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/taxAuthorityCodebookType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/userProfiles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/wills.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/micro-service-props.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[54,57],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[54,57],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface MicroserviceProps {\n  [key: string]: any;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/nonFinance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/queries.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[125,128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[125,128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type QueryOptions<T> = {\n  onSuccess?: (data?: T) => void;\n  onError?: (data?: T) => void;\n  transform?: (data: T) => any[];\n};\n\n// export type QueryParams<P, T> = {\n//   input: P;\n//   options: QueryOptions<T>;\n// };\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/response.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/createOptions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[246,249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[246,249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[362,365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[362,365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownData} from '../types/dropdownData';\n\nexport const createOptions = (configObj: {[key: number]: string}) =>\n  Object.entries(configObj).map(([key, value]) => ({id: key, title: value}));\n\nexport const createDropdownOptions = (array: any[], idKey?: string, titleKey?: string): DropdownData<number>[] => {\n  if (array) {\n    return array.map((object: any) => ({\n      id: object[idKey ?? 'id'] as DropdownData<number>['id'],\n      title: object[titleKey ?? 'title'] as DropdownData<number>['title'],\n    }));\n  } else return [];\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/formSchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/getCurrentTab.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/getMonthOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/getRouteName.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/getYearFromPath.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/getYearOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/roundCurrency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/usePrependedDropdownOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/useTitle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]}]