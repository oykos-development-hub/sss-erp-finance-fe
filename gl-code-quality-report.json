[{"filePath":"/builds/erp/finance-fe/setupProxy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/accountingModal/accountingModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/accountingModal/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/budgetLimitModal/budgetLimitModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/budgetLimitModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/confiscationModal/FinancialConfiscationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2912,2915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2912,2915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport useInsertFixedDepositItem from '../../services/graphQL/fixedDeposits/useInsertDepositItem';\nimport {DropdownData} from '../../types/dropdownData';\nimport {DepositConfiscation} from '../../types/graphQL/fixedDeposits';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport {optionsNumberSchema, optionsStringSchema} from '../../utils/formSchemas';\nimport FileList from '../fileList/fileList';\nimport useGetJudges from '../../services/graphQL/judges/useGetJudges';\n\ntype FinancialConfiscationModalProps = {\n  open: boolean;\n  onClose: () => void;\n  data: DepositConfiscation | null;\n  refetch: () => void;\n};\n\nconst financialConfiscationSchema = yup.object({\n  amount: yup.string().required(requiredError),\n  currency: optionsStringSchema.required(requiredError),\n  date_of_confiscation: yup.date().required(requiredError).default(null),\n  judge_id: optionsNumberSchema.required(requiredError),\n  file_id: yup.number().nullable().default(null),\n  id: yup.number().nullable().default(null),\n});\n\ntype FinancialConfiscationSchemaType = yup.InferType<typeof financialConfiscationSchema>;\n\nconst FinancialConfiscationModal = ({open, onClose, data, refetch}: FinancialConfiscationModalProps) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const isNew = !data;\n\n  const {\n    navigation: {\n      location: {pathname},\n    },\n    fileService: {uploadFile},\n    currencies,\n    alert,\n  } = useAppContext();\n\n  const deposit_id = pathname.split('/').pop();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    reset,\n    control,\n  } = useForm<FinancialConfiscationSchemaType>({resolver: yupResolver(financialConfiscationSchema)});\n\n  const {insertFixedDepositItem} = useInsertFixedDepositItem();\n  const {judges} = useGetJudges({});\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: FinancialConfiscationSchemaType) => {\n    const payload = {\n      ...data,\n      amount: parseFloat(data.amount),\n      date_of_confiscation: parseDateForBackend(data.date_of_confiscation) as string,\n      file_id: data.file_id ? data.file_id : null,\n      currency: data.currency.id,\n      deposit_id: parseInt(deposit_id as string),\n      judge_id: data.judge_id.id,\n      id: isNew ? null : data.id,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertFixedDepositItem(\n      payload,\n      () => {\n        alert.success(isNew ? 'Depozit uspješno kreiran!' : 'Depozit uspješno izmijenjen!');\n        refetch();\n        onClose();\n      },\n      () => {\n        alert.error(isNew ? 'Greška pri kreiranju depozita!' : 'Greška pri izmjeni depozita!');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data) {\n      reset({\n        id: data.id,\n        file_id: data.file.id,\n        judge_id: data.judge,\n        date_of_confiscation: new Date(data.date_of_confiscation),\n        currency: currencies.find((currency: DropdownData<string>) => currency.id === data.currency),\n        amount: data.amount.toString(),\n      });\n    }\n  }, [data]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      title={isNew ? 'KREIRAJ DEPOZIT' : 'UREDI DEPOZIT'}\n      leftButtonOnClick={onClose}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      rightButtonText=\"Sačuvaj\"\n      leftButtonText=\"Otkaži\"\n      content={\n        <div>\n          <div style={{marginBottom: 15}}>\n            <Input {...register('amount')} label=\"IZNOS:\" error={errors.amount?.message} />\n          </div>\n          <div style={{marginBottom: 15}}>\n            <Controller\n              control={control}\n              name=\"currency\"\n              render={({field: {name, value, onChange}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  label=\"VALUTA:\"\n                  options={currencies}\n                  error={errors.currency?.message}\n                />\n              )}\n            />\n          </div>\n          <Controller\n            name=\"date_of_confiscation\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                onChange={onChange}\n                label=\"DATUM ODUZIMANJA:\"\n                error={errors.date_of_confiscation?.message}\n                style={{marginBottom: 15}}\n              />\n            )}\n          />\n          <div style={{marginBottom: 25}}>\n            <Controller\n              name=\"judge_id\"\n              control={control}\n              render={({field: {name, value, onChange}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  label=\"SUDIJA:\"\n                  options={judges}\n                  error={errors.judge_id?.message}\n                />\n              )}\n            />\n          </div>\n\n          <div>\n            <FileUpload\n              icon={null}\n              files={uploadedFiles}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n              buttonText=\"Učitaj\"\n              style={{marginBottom: 10}}\n            />\n            <FileList files={data?.file.id ? [data.file] : null} />\n          </div>\n        </div>\n      }\n    />\n  );\n};\n\nexport default FinancialConfiscationModal;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/depositDispatchModal/depositDispatchModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3044,3047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3044,3047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Datepicker, Dropdown, FileUpload, Input, Modal, Typography} from 'client-library';\nimport {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport useInsertDepositDispatch from '../../services/graphQL/fixedDeposits/useInsertDepositDispatch';\nimport useGetJudges from '../../services/graphQL/judges/useGetJudges';\nimport {DropdownData} from '../../types/dropdownData';\nimport {DepositDispatch} from '../../types/graphQL/fixedDeposits';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport {optionsNumberSchema, optionsStringSchema} from '../../utils/formSchemas';\nimport FileList from '../fileList/fileList';\n\ntype DepositDispatchModal = {\n  open: boolean;\n  onClose: () => void;\n  data: DepositDispatch | null;\n  refetch: () => void;\n};\n\nconst depositDispatchSchema = yup.object({\n  amount: yup.string().required(requiredError),\n  currency: optionsStringSchema.required(requiredError),\n  date_of_action: yup.date().required(requiredError).default(null),\n  judge_id: optionsNumberSchema.required(requiredError),\n  file_id: yup.number().nullable().default(null),\n  id: yup.number().nullable().default(null),\n  action: yup.string().required(requiredError),\n  subject: yup.string().required(requiredError),\n  case_number: yup.string().required(requiredError),\n});\n\ntype DepositDispatchSchemaType = yup.InferType<typeof depositDispatchSchema>;\n\nconst DepositDispatchModal = ({open, onClose, data, refetch}: DepositDispatchModal) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const isNew = !data;\n\n  const {\n    navigation: {\n      location: {pathname},\n    },\n    fileService: {uploadFile},\n    currencies,\n    alert,\n  } = useAppContext();\n\n  const deposit_id = pathname.split('/').pop();\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    reset,\n    control,\n  } = useForm<DepositDispatchSchemaType>({resolver: yupResolver(depositDispatchSchema)});\n\n  const {insertDepositDispatch} = useInsertDepositDispatch();\n  const {judges} = useGetJudges({});\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: DepositDispatchSchemaType) => {\n    const payload = {\n      ...data,\n      amount: parseFloat(data.amount),\n      date_of_action: parseDateForBackend(data.date_of_action) as string,\n      file_id: data.file_id ? data.file_id : null,\n      currency: data.currency.id,\n      deposit_id: parseInt(deposit_id as string),\n      judge_id: data.judge_id.id,\n      id: isNew ? null : data.id,\n      case_number: data.case_number,\n    };\n\n    if (uploadedFiles?.length) {\n      console.log(uploadedFiles);\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertDepositDispatch(\n      payload,\n      () => {\n        alert.success(isNew ? 'Akcija uspješno kreirana!' : 'Akcija uspješno izmijenjena!');\n        refetch();\n        onClose();\n      },\n      () => {\n        alert.error(isNew ? 'Greška pri kreiranju akcije!' : 'Greška pri izmjeni akcije!');\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data) {\n      reset({\n        id: data.id,\n        file_id: data.file.id,\n        judge_id: data.judge,\n        date_of_action: new Date(data.date_of_action),\n        currency: currencies.find((currency: DropdownData<string>) => currency.id === data.currency),\n        amount: data.amount.toString(),\n        subject: data.subject,\n        case_number: data.case_number,\n      });\n    }\n  }, [data]);\n\n  return (\n    <Modal\n      open={open}\n      onClose={onClose}\n      title={isNew ? 'KREIRAJ AKCIJU' : 'UREDI AKCIJU'}\n      leftButtonOnClick={onClose}\n      rightButtonOnClick={handleSubmit(onSubmit)}\n      rightButtonText=\"Sačuvaj\"\n      leftButtonText=\"Otkaži\"\n      content={\n        <div>\n          <div style={{marginBottom: 15}}>\n            <Input {...register('action')} label=\"AKCIJA:\" error={errors.action?.message} />\n          </div>\n          <div style={{marginBottom: 15}}>\n            <Input {...register('amount')} label=\"KOLIČINA:\" error={errors.amount?.message} />\n          </div>\n          <div style={{marginBottom: 15}}>\n            <Controller\n              control={control}\n              name=\"currency\"\n              render={({field: {name, value, onChange}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  label=\"VALUTA:\"\n                  options={currencies}\n                  error={errors.currency?.message}\n                />\n              )}\n            />\n          </div>\n          <div style={{marginBottom: 15}}>\n            <Input {...register('subject')} label=\"PRIMALAC:\" error={errors.subject?.message} />\n          </div>\n          <Controller\n            name=\"date_of_action\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                onChange={onChange}\n                label=\"DATUM AKTA:\"\n                error={errors.date_of_action?.message}\n                style={{marginBottom: 15}}\n              />\n            )}\n          />\n          <div style={{marginBottom: 15}}>\n            <Input {...register('case_number')} label=\"BROJ AKTA:\" error={errors.case_number?.message} />\n          </div>\n          <div style={{marginBottom: 25}}>\n            <Controller\n              name=\"judge_id\"\n              control={control}\n              render={({field: {name, value, onChange}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  label=\"SUDIJA:\"\n                  options={judges}\n                  error={errors.judge_id?.message}\n                />\n              )}\n            />\n          </div>\n\n          <div>\n            <FileUpload\n              icon={null}\n              files={uploadedFiles}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n              buttonText=\"Učitaj\"\n            />\n            <FileList files={data?.file ? [data.file] : null} />\n          </div>\n        </div>\n      }\n    />\n  );\n};\n\nexport default DepositDispatchModal;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/externalReallocationModal/externalReallocationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/fileList/fileList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/fileList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/fileModalView/fileModalView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/fileModalView/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/financeDepositForm.tsx/financialDepositForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2869,2872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2869,2872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, Dropdown, FileUpload, Input, Typography} from 'client-library';\nimport {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport useGetCountOverview from '../../services/graphQL/counts/useGetCountOverview';\nimport useInsertFixedDeposit from '../../services/graphQL/fixedDeposits/useInsertFixedDeposit';\nimport {FlexColumn, FlexRow} from '../../shared/flex';\nimport Footer from '../../shared/footer';\nimport {FixedDeposit} from '../../types/graphQL/fixedDeposits';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport {optionsNumberSchema} from '../../utils/formSchemas';\nimport FileList from '../fileList/fileList';\n\nconst financialDepositSchema = yup.object({\n  case_number: yup.string().required(requiredError),\n  subject: yup.string().required(requiredError),\n  account_id: optionsNumberSchema,\n  date_of_recipiet: yup.date().required(requiredError).default(null),\n  date_of_case: yup.date().required(requiredError).default(null),\n  date_of_end: yup.date().nullable().default(null),\n  file_id: yup.number().nullable().default(null),\n});\n\ntype FinancialDepositForm = yup.InferType<typeof financialDepositSchema>;\n\nconst FinancialDepositForm = ({data}: {data?: FixedDeposit}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n    contextMain: {organization_unit_id},\n    fileService: {uploadFile},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n  const isNew = id === 'add-new';\n\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: {errors},\n    reset,\n  } = useForm<FinancialDepositForm>({\n    resolver: yupResolver(financialDepositSchema),\n  });\n\n  const {counts} = useGetCountOverview({});\n\n  const {insertFixedDeposit} = useInsertFixedDeposit();\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: FinancialDepositForm) => {\n    const payload = {\n      ...data,\n      account_id: data.account_id?.id,\n      date_of_recipiet: parseDateForBackend(data.date_of_recipiet) as string,\n      date_of_case: parseDateForBackend(data.date_of_case) as string,\n      date_of_end: parseDateForBackend(data.date_of_end) as string,\n      organization_unit_id,\n      type: 'financial',\n      id: id ? parseInt(id) : null,\n      file_id: data.file_id ? data.file_id : null,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertFixedDeposit(\n      payload,\n      (data: FixedDeposit) => {\n        alert.success(\n          isNew ? 'Uspešno ste dodali novi finansijski depozit' : 'Uspešno ste izmjenili finansijski depozit',\n        );\n        if (isNew) {\n          navigate(`/finance/deposit/fixed/financial/${data.id}`);\n        }\n      },\n      () => {\n        alert.error(\n          isNew\n            ? 'Greška prilikom dodavanja novog finansijskog depozita'\n            : 'Greška prilikom izmjene finansijskog depozita',\n        );\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data && !isNew) {\n      reset({\n        file_id: data?.file.id,\n        case_number: data?.case_number,\n        subject: data?.subject,\n        account_id: data?.account,\n        date_of_recipiet: new Date(data?.date_of_recipiet),\n        date_of_case: new Date(data?.date_of_case),\n        date_of_end: data?.date_of_end ? new Date(data?.date_of_end) : null,\n      });\n    }\n  }, [data]);\n\n  const disabled = data?.status === 'Zakljucen';\n\n  return (\n    <FlexColumn gap={20} style={{alignItems: 'stretch'}}>\n      <FlexRow gap={8}>\n        <Input\n          {...register('case_number')}\n          label=\"BROJ PREDMETA:\"\n          error={errors.case_number?.message}\n          disabled={disabled}\n        />\n        <Input\n          {...register('subject')}\n          label=\"IME I PREZIME STRANKE:\"\n          error={errors.subject?.message}\n          disabled={disabled}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"date_of_recipiet\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PRIJEMA AKTA\"\n              onChange={onChange}\n              error={errors.date_of_recipiet?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n        <Controller\n          name=\"date_of_case\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PREDMETA\"\n              onChange={onChange}\n              error={errors.date_of_case?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              value={value}\n              onChange={onChange}\n              name={name}\n              options={counts}\n              label=\"KONTO\"\n              error={errors.account_id?.message}\n              isDisabled={disabled}\n            />\n          )}\n        />\n        <div style={{width: '100%'}}>\n          <Controller\n            name=\"date_of_end\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM ZAKLJUČENJA\"\n                onChange={onChange}\n                error={errors.date_of_end?.message}\n                disabled={isNew || disabled}\n              />\n            )}\n          />\n        </div>\n      </FlexRow>\n      <div style={{marginBottom: 10}}>\n        <FileUpload\n          icon={null}\n          files={uploadedFiles}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n          disabled={disabled}\n        />\n        <FileList files={data?.file.id ? [data.file] : null} />\n      </div>\n\n      {!disabled && (\n        <Footer>\n          <Button\n            content=\"Odustani\"\n            variant=\"secondary\"\n            onClick={() => navigate('/finance/deposit/fixed/financial/overview')}\n          />\n          <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} />\n        </Footer>\n      )}\n    </FlexColumn>\n  );\n};\n\nexport default FinancialDepositForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/fundReleaseModal/fundReleaseModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/goalsModal/goalsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/goalsModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/goalsModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74,77],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74,77],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[89,92],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[89,92],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface GoalsModalProps {\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n  budgetProgramId: number;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/indicatorModal/indicatorModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/indicatorModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/indicatorModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[78,81],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[78,81],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[93,96],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[93,96],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface IndicatorModalProps {\n  open: boolean;\n  onClose: (refetch?: any, message?: any) => void;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/invoicesTabs/invoicesTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/landingPageContentBox/landingPageContentBox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/landingPageContentBox/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/landingPageContentBox/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/materialDepositForm/materialDepositForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2970,2973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2970,2973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Datepicker, FileUpload, Input, Typography} from 'client-library';\nimport {useEffect, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {requiredError} from '../../constants';\nimport useAppContext from '../../context/useAppContext';\nimport useInsertFixedDeposit from '../../services/graphQL/fixedDeposits/useInsertFixedDeposit';\nimport {FlexColumn, FlexRow} from '../../shared/flex';\nimport Footer from '../../shared/footer';\nimport {FixedDeposit} from '../../types/graphQL/fixedDeposits';\nimport {parseDateForBackend} from '../../utils/dateUtils';\nimport {optionsNumberSchema} from '../../utils/formSchemas';\nimport FileList from '../fileList/fileList';\n\nconst materialDepositSchema = yup.object({\n  case_number: yup.string().required(requiredError),\n  subject: yup.string().required(requiredError),\n  account_id: optionsNumberSchema,\n  date_of_recipiet: yup.date().required(requiredError).default(null),\n  date_of_case: yup.date().required(requiredError).default(null),\n  date_of_enforceability: yup.date().nullable().default(null),\n  date_of_finality: yup.date().nullable().default(null),\n  date_of_end: yup.date().nullable().default(null),\n  file_id: yup.number().nullable().default(null),\n});\n\ntype MaterialDepositForm = yup.InferType<typeof materialDepositSchema>;\n\nconst MaterialDepositForm = ({data}: {data?: FixedDeposit}) => {\n  const [uploadedFiles, setUploadedFiles] = useState<FileList>();\n\n  const {\n    navigation: {\n      navigate,\n      location: {pathname},\n    },\n    contextMain: {organization_unit_id},\n    fileService: {uploadFile},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n  const isNew = id === 'add-new';\n\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: {errors},\n    reset,\n  } = useForm<MaterialDepositForm>({\n    resolver: yupResolver(materialDepositSchema),\n  });\n\n  const {insertFixedDeposit} = useInsertFixedDeposit();\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFiles(files);\n  };\n\n  const onSubmit = async (data: MaterialDepositForm) => {\n    const payload = {\n      ...data,\n      date_of_recipiet: parseDateForBackend(data.date_of_recipiet) as string,\n      date_of_case: parseDateForBackend(data.date_of_case) as string,\n      date_of_end: parseDateForBackend(data.date_of_end) as string,\n      date_of_finality: parseDateForBackend(data.date_of_finality) as string,\n      date_of_enforceability: parseDateForBackend(data.date_of_enforceability) as string,\n      organization_unit_id,\n      type: 'material',\n      id: id ? parseInt(id) : null,\n      file_id: data.file_id ? data.file_id : null,\n    };\n\n    if (uploadedFiles?.length) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFiles);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFiles(undefined);\n          payload.file_id = res[0]?.id;\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n    }\n\n    await insertFixedDeposit(\n      payload,\n      (data: FixedDeposit) => {\n        alert.success(\n          isNew ? 'Uspešno ste dodali novi materijalni depozit' : 'Uspešno ste izmjenili materijalni depozit',\n        );\n        if (isNew) {\n          navigate(`/finance/deposit/fixed/material/${data.id}`);\n        }\n      },\n      () => {\n        alert.error(\n          isNew\n            ? 'Greška prilikom dodavanja novog materijalnog depozita'\n            : 'Greška prilikom izmjene materijalnog depozita',\n        );\n      },\n    );\n  };\n\n  useEffect(() => {\n    if (data && !isNew) {\n      reset({\n        file_id: data?.file.id,\n        case_number: data?.case_number,\n        subject: data?.subject,\n        date_of_recipiet: new Date(data?.date_of_recipiet),\n        date_of_case: new Date(data?.date_of_case),\n        date_of_enforceability: data?.date_of_enforceability ? new Date(data?.date_of_enforceability) : null,\n        date_of_finality: data?.date_of_finality ? new Date(data?.date_of_finality) : null,\n        date_of_end: data?.date_of_end ? new Date(data?.date_of_end) : null,\n      });\n    }\n  }, [data]);\n\n  const disabled = data?.status === 'Zakljucen';\n\n  return (\n    <FlexColumn gap={20} style={{alignItems: 'stretch'}}>\n      <FlexRow gap={8}>\n        <Input\n          {...register('case_number')}\n          label=\"BROJ PREDMETA:\"\n          error={errors.case_number?.message}\n          disabled={disabled}\n        />\n        <Input\n          {...register('subject')}\n          label=\"IME I PREZIME STRANKE:\"\n          error={errors.subject?.message}\n          disabled={disabled}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"date_of_recipiet\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PRIJEMA AKTA\"\n              onChange={onChange}\n              error={errors.date_of_recipiet?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n        <Controller\n          name=\"date_of_case\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PREDMETA\"\n              onChange={onChange}\n              error={errors.date_of_case?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n        <Controller\n          name=\"date_of_enforceability\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI\"\n              onChange={onChange}\n              error={errors.date_of_enforceability?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n      </FlexRow>\n      <FlexRow gap={8}>\n        <Controller\n          name=\"date_of_finality\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM PRAVOSNAŽNOSTI\"\n              onChange={onChange}\n              error={errors.date_of_finality?.message}\n              disabled={disabled}\n            />\n          )}\n        />\n        <Controller\n          name=\"date_of_end\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM ZAKLJUČENJA\"\n              onChange={onChange}\n              error={errors.date_of_end?.message}\n              disabled={isNew || disabled}\n            />\n          )}\n        />\n      </FlexRow>\n      <div style={{marginBottom: 10}}>\n        <FileUpload\n          icon={null}\n          files={uploadedFiles}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n          disabled={disabled}\n        />\n        <FileList files={data?.file.id ? [data.file] : null} />\n      </div>\n\n      {!disabled && (\n        <Footer>\n          <Button\n            content=\"Odustani\"\n            variant=\"secondary\"\n            onClick={() => navigate('/finance/deposit/fixed/material/overview')}\n          />\n          <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} />\n        </Footer>\n      )}\n    </FlexColumn>\n  );\n};\n\nexport default MaterialDepositForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/activitySection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/nonFinanceAccordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/programSection/programSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/programSection/programSectionPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/subprogramSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/components/nonFinanceAccordion/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/context/appContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/context/useAppContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/index.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":12,"column":3,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":12,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":18,"column":5,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":18,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":22,"column":3,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":22,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-ignore\" because it alters compilation errors.","line":25,"column":5,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":25,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/router.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/accounting/accounting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/accounting/accountingOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/accounting/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/accounting/currentAccountingTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/accounting/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetDetails/budgetDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetFO/budgetFO.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetFO/budgetOverviewFO/budgetOverviewFO.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetFO/budgetRequestsFO/budgetRequestsFO.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetFO/budgetRequestsFO/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetFO/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetNonFinancialOverview/budgetNonFinancialOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[441,444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[441,444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Input} from 'client-library';\nimport {Controller, useForm} from 'react-hook-form';\nimport {NonFinanceAccordion} from '../../../components/nonFinanceAccordion/nonFinanceAccordion.tsx';\nimport {budgetStatusModal} from '../planning/budgetList/constants.tsx';\nimport {ButtonsContainer, StatusUpdateContainer, StyledDropdown} from './styles.ts';\n\nconst initialValues = {\n  status: null,\n  comment: '',\n};\n\nconst onSubmit = (data: any) => {\n  // TODO add sumbit api call\n  console.log(data);\n};\n\nconst BudgetNonFinancialOverview = () => {\n  const {control, register, handleSubmit} = useForm({defaultValues: initialValues});\n  return (\n    <div>\n      <NonFinanceAccordion programNo={1} key={`acc-${1}`} isPreview />\n      <StatusUpdateContainer>\n        {/*TODO check if options should be budgetStatusModal or something else*/}\n        <Controller\n          name=\"status\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <StyledDropdown value={value} name={name} options={budgetStatusModal} onChange={onChange} />\n          )}\n        />\n        <Input {...register('comment')} textarea placeholder={'Dodaj komentar'} />\n      </StatusUpdateContainer>\n      <ButtonsContainer>\n        <Button content=\"Nazad\" variant=\"secondary\" />\n        <Button content=\"Izmijeni status\" variant=\"primary\" type={'submit'} onClick={handleSubmit(onSubmit)} />\n      </ButtonsContainer>\n    </div>\n  );\n};\n\nexport default BudgetNonFinancialOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetNonFinancialOverview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetSendDetails/budgetSendPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetSendDetails/budgetSendTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetSendDetails/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetSendDetails/requests.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[555,558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[555,558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, Table} from 'client-library';\nimport {useState} from 'react';\nimport useGetOrganizationUnits from '../../../services/graphQL/organizationUnits/useGetOrganizationUnits';\nimport {tableHeadsRequests} from './constants';\nimport {Column, DropdownWrapperRequests, Price, SubTitle, Totals} from './styles';\n\nexport const RequestsPage = () => {\n  const [organizationUnit, setOrganizationUnit] = useState({id: 0, title: 'Sve'});\n  const {organizationUnits} = useGetOrganizationUnits();\n\n  const handleOrganizationUnitChange = (value: any) => {\n    setOrganizationUnit(value);\n  };\n\n  return (\n    <div>\n      <DropdownWrapperRequests>\n        <Dropdown\n          name=\"organization_unit\"\n          options={organizationUnits}\n          value={organizationUnit}\n          onChange={handleOrganizationUnitChange}\n          label=\"ORGANIZACIONA JEDINICA:\"\n        />\n      </DropdownWrapperRequests>\n      <Table data={[]} tableHeads={tableHeadsRequests} />\n      <Totals>\n        <Column>\n          <SubTitle variant=\"bodySmall\" content=\"UKUPNA NETO VRIJEDNOST:\" />\n          <Price variant=\"bodySmall\" content={'€ '} />\n        </Column>\n        <Column>\n          <SubTitle variant=\"bodySmall\" content=\"UKUPNA BRUTO VRIJEDNOST:\" />\n          <Price variant=\"bodySmall\" content={'€ '} />\n        </Column>\n      </Totals>\n      <Column>\n        <Datepicker\n          name=\"date_of_closing\"\n          onChange={() => {\n            console.log('');\n          }}\n          disabled\n        />\n      </Column>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetSendDetails/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetTemplate/budgetTemplate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/budgetTemplate/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/currentBudget/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/currentBudget/currentBudgetPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/currentBudget/currentBudgetTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/currentBudget/requests.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[555,558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[555,558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Datepicker, Dropdown, Table} from 'client-library';\nimport {useState} from 'react';\nimport useGetOrganizationUnits from '../../../services/graphQL/organizationUnits/useGetOrganizationUnits';\nimport {tableHeadsRequests} from './constants';\nimport {Column, DropdownWrapperRequests, Price, SubTitle, Totals} from './styles';\n\nexport const RequestsPage = () => {\n  const [organizationUnit, setOrganizationUnit] = useState({id: 0, title: 'Sve'});\n  const {organizationUnits} = useGetOrganizationUnits();\n\n  const handleOrganizationUnitChange = (value: any) => {\n    setOrganizationUnit(value);\n  };\n\n  return (\n    <div>\n      <DropdownWrapperRequests>\n        <Dropdown\n          name=\"organization_unit\"\n          options={organizationUnits}\n          value={organizationUnit}\n          onChange={handleOrganizationUnitChange}\n          label=\"ORGANIZACIONA JEDINICA:\"\n        />\n      </DropdownWrapperRequests>\n      <Table data={[]} tableHeads={tableHeadsRequests} />\n      <Totals>\n        <Column>\n          <SubTitle variant=\"bodySmall\" content=\"UKUPNA NETO VRIJEDNOST:\" />\n          <Price variant=\"bodySmall\" content={'€ '} />\n        </Column>\n        <Column>\n          <SubTitle variant=\"bodySmall\" content=\"UKUPNA BRUTO VRIJEDNOST:\" />\n          <Price variant=\"bodySmall\" content={'€ '} />\n        </Column>\n      </Totals>\n      <Column>\n        <Datepicker\n          name=\"date_of_closing\"\n          onChange={() => {\n            console.log('');\n          }}\n          disabled\n        />\n      </Column>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/currentBudget/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/externalReallocation/externalReallocationOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/externalReallocation/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/fundRelease/fundReleaseOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/fundRelease/fundReleaseRequest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/fundRelease/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/internalReallocation/internalReallocationBudgetTemplate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/internalReallocation/internalReallocationOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/internalReallocation/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/landingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinance/nonFinance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinance/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinancePreview/nonFinancePreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinancePreview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinancialOverview/nonFinancialOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/nonFinancialOverview/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/OUBudgetSubmission.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/budgetFinancial/budgetFinancial.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/budgetNonFinancial/budgetNonFinancial.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/budgetSubmissionTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/budgetSummary.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[285,288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[285,288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":11,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Button, Table} from 'client-library';\nimport useAppContext from '../../../../context/useAppContext';\nimport {FooterWrapper} from '../budgetList/styles';\nimport {budgetSummaryTableHeads} from './constants';\n\nexport interface BudgetSummaryProps {\n  id?: number;\n  budgetDetails: any;\n}\n\nconst BudgetSummary = (_: BudgetSummaryProps) => {\n  const {navigation, breadcrumbs} = useAppContext();\n\n  return (\n    <>\n      <Table tableHeads={budgetSummaryTableHeads} data={[]} style={{marginBottom: 22}} />\n      <FooterWrapper>\n        <Button\n          content=\"Nazad\"\n          variant=\"secondary\"\n          onClick={() => {\n            navigation.navigate('/finance/budget/planning');\n            breadcrumbs.remove();\n          }}\n        />\n        <Button content=\"Pošalji\" variant=\"primary\" disabled onClick={() => console.log('send')} />\n      </FooterWrapper>\n    </>\n  );\n};\n\nexport default BudgetSummary;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/OUBudgetSubmission/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/SSSBudgetDetails/SSSBudgetDetails.styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/SSSBudgetDetails/SSSBudgetDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":108,"column":31,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":108,"endColumn":118}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {Button, Dropdown, Typography} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Controller, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport BudgetLimitModal from '../../../../components/budgetLimitModal/budgetLimitModal.tsx';\nimport {UserRole} from '../../../../constants.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useGetBudgets from '../../../../services/graphQL/getBudgets/useGetBudgets.ts';\nimport useInsertBudget from '../../../../services/graphQL/insertBudget/useInsertBudget.ts';\nimport BudgetTable from '../../../../shared/budgetTable/budgetTable.tsx';\nimport {BudgetTableStep} from '../../../../shared/budgetTable/types.ts';\nimport {FlexRow} from '../../../../shared/flex.ts';\nimport Footer from '../../../../shared/footer.ts';\nimport {optionsNumberSchema, optionsStringSchema} from '../../../../utils/formSchemas.ts';\nimport {getYearOptions} from '../../../../utils/getYearOptions.ts';\nimport {budgetTypeOptions} from '../budgetList/constants.tsx';\nimport {MainTitle, OverviewBox, ScreenWrapper} from '../budgetList/styles.ts';\nimport {BoldText, Box, Controls, TableGrid} from './SSSBudgetDetails.styles.ts';\n\nexport type LimitObject = {\n  organization_unit_id: number;\n  limit: number;\n};\n\nconst addBudgetSchema = yup.object().shape({\n  year: optionsStringSchema.required('Ovo polje je obavezno').default(null),\n  budget_type: optionsNumberSchema.required('Ovo polje je obavezno').default(null),\n  limits: yup\n    .array()\n    .of(\n      yup.object().shape({\n        limit: yup.number().required(),\n        organization_unit_id: yup.number().required(),\n      }),\n    )\n    .required()\n    .default(null),\n});\n\nexport type AddBudgetFormType = yup.InferType<typeof addBudgetSchema>;\n\nconst SSSBudgetDetails = () => {\n  const [limitModal, setLimitModal] = useState(false);\n\n  const {\n    navigation: {\n      location: {pathname},\n      navigate,\n    },\n    contextMain,\n    alert,\n  } = useAppContext();\n\n  const {\n    control,\n    formState: {errors},\n    handleSubmit,\n    watch,\n    setValue,\n  } = useForm<AddBudgetFormType>({resolver: yupResolver(addBudgetSchema), mode: 'onBlur'});\n\n  const budgetID = pathname.split('/').at(-1);\n  const isNew = budgetID === 'add-new';\n\n  const {insertBudget, loading: isSaving} = useInsertBudget();\n  const {budgets} = useGetBudgets({id: isNew ? null : parseInt(budgetID)});\n\n  //todo check if the same api endpoint is used when the OJ manager is filling the budget\n  const onSubmit = async (data: AddBudgetFormType) => {\n    if (isSaving) return;\n\n    const payload = {\n      id: isNew ? null : parseInt(budgetID),\n      year: data.year.id.toString(),\n      budget_type: data.budget_type.id,\n      limits: data.limits,\n    };\n\n    await insertBudget(\n      payload,\n      () => {\n        alert.success('Uspješno sačuvano.');\n        navigate('/finance/budget/planning');\n      },\n      () => alert?.error('Greška. Promjene nisu sačuvane.'),\n    );\n  };\n\n  const onLimitModalSubmit = (data: LimitObject[]) => {\n    setValue('limits', data, {shouldValidate: true});\n  };\n\n  const availableYearsForBudget = useMemo(() => {\n    if (!budgets) return [];\n\n    const years = getYearOptions(6, false, 5);\n\n    const existingBudgetYears = budgets.items?.map(budget => budget.year) || [];\n    const filteredYears = years.filter(year => !existingBudgetYears.includes(Number(year.id)));\n\n    return filteredYears;\n  }, [budgets]);\n\n  useEffect(() => {\n    if (budgets && budgets.items && budgets.items.length > 0 && !isNew) {\n      setValue('year', {id: budgets.items[0].year.toString(), title: budgets.items[0].year.toString()});\n      setValue('budget_type', budgetTypeOptions.find(option => option.id === parseInt(budgets.items[0].budget_type))!);\n      setValue('limits', budgets.items[0].limits);\n    }\n  }, [budgets, isNew]);\n\n  const year = watch('year')?.id;\n  console.log(errors);\n  return (\n    <ScreenWrapper>\n      <OverviewBox>\n        <MainTitle variant=\"bodyMedium\" content={isNew ? 'NOVI BUDŽET' : `BUDŽET ZA ${year} GODINU`} />\n        <hr />\n        <Box>\n          <Controls>\n            <TableGrid>\n              <BoldText variant=\"bodySmall\" content=\"NAZIV PREDLAGAČA:\" />\n              <Typography variant=\"bodySmall\" content={contextMain.organization_unit.title} />\n            </TableGrid>\n            <Button content=\"Limiti\" variant=\"secondary\" style={{width: 130}} onClick={() => setLimitModal(true)} />\n          </Controls>\n\n          <FlexRow gap=\"1rem\" style={{marginTop: '1rem'}}>\n            <Controller\n              control={control}\n              name=\"year\"\n              render={({field: {name, onChange, value}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  options={availableYearsForBudget}\n                  error={errors.year?.message}\n                  placeholder=\"Odaberite godinu\"\n                  isDisabled={!isNew}\n                />\n              )}\n            />\n            <Controller\n              control={control}\n              name=\"budget_type\"\n              render={({field: {name, onChange, value}}) => (\n                <Dropdown\n                  name={name}\n                  value={value}\n                  onChange={onChange}\n                  options={budgetTypeOptions}\n                  error={errors.budget_type?.message}\n                  placeholder=\"Odaberite tip\"\n                  isDisabled={!isNew}\n                />\n              )}\n            />\n          </FlexRow>\n        </Box>\n\n        {contextMain.role_id === UserRole.MANAGER_OJ && (\n          <Box>\n            <TableGrid>\n              <BoldText variant=\"bodySmall\" content=\"PROGRAM:\" />\n              <Typography variant=\"bodySmall\" content=\"SUDSKI SAVJET\" />\n              <BoldText variant=\"bodySmall\" content=\"POTPROGRAM:\" />\n              <Typography variant=\"bodySmall\" content=\"SUDSKI SAVJET\" />\n              <BoldText variant=\"bodySmall\" content=\"AKTIVNOSTI:\" />\n              <Typography variant=\"bodySmall\" content=\"SUDSKI SAVJET\" />\n              <BoldText variant=\"bodySmall\" content=\"IZVOR:\" />\n              <Typography variant=\"bodySmall\" content=\"SUDSKI SAVJET\" />\n            </TableGrid>\n          </Box>\n        )}\n\n        {year && <BudgetTable step={BudgetTableStep.CREATING} year={parseInt(year)} organizationUnitId={1} />}\n\n        <Footer>\n          <Button\n            content=\"Otkaži\"\n            variant=\"secondary\"\n            style={{width: 130}}\n            onClick={() => navigate('/finance/budget/planning')}\n          />\n          <Button\n            content=\"Sačuvaj\"\n            variant=\"primary\"\n            style={{width: 130}}\n            onClick={handleSubmit(onSubmit)}\n            // disabled={!isValid && isNew}\n          />\n        </Footer>\n      </OverviewBox>\n\n      <BudgetLimitModal open={limitModal} onClose={() => setLimitModal(false)} onSubmit={onLimitModalSubmit} />\n    </ScreenWrapper>\n  );\n};\n\nexport default SSSBudgetDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/budgetList/budgetList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/budgetList/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/planning/budgetList/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/requestDynamics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/spendingDynamicsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/spendingDynamicsRequests.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/spendingDynamicsTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/budget/spendingDynamics/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/demandDeposit/initialState/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/demandDeposit/initialState/initialStateNewEntry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/demandDeposit/initialState/initialStateOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/demandDeposit/initialState/initialStateTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/demandDeposit/initialState/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/demandDeposit/taxContributionCalculation/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/demandDeposit/taxContributionCalculation/taxContributionCalculationOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/financeDeposit/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/financeDeposit/financeDepositDetails.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":107,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":107,"endColumn":19,"fix":{"range":[4149,4167],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":108,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":108,"endColumn":21,"fix":{"range":[4169,4189],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":109,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":109,"endColumn":21,"fix":{"range":[4203,4223],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":110,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":110,"endColumn":23,"fix":{"range":[4241,4263],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":111,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":111,"endColumn":23,"fix":{"range":[4285,4307],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":112,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":112,"endColumn":21,"fix":{"range":[4335,4355],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":113,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":113,"endColumn":21,"fix":{"range":[4358,4378],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":114,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":114,"endColumn":19,"fix":{"range":[4431,4449],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":115,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":115,"endColumn":19,"fix":{"range":[4452,4470],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":116,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":116,"endColumn":21,"fix":{"range":[4472,4492],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":117,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":117,"endColumn":21,"fix":{"range":[4508,4528],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":118,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":118,"endColumn":21,"fix":{"range":[4569,4589],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":119,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":119,"endColumn":19,"fix":{"range":[4643,4661],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":120,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":120,"endColumn":17,"fix":{"range":[4664,4680],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":158,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":158,"endColumn":19,"fix":{"range":[5899,5917],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":159,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":159,"endColumn":21,"fix":{"range":[5919,5939],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":160,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":160,"endColumn":21,"fix":{"range":[5953,5973],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":161,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":161,"endColumn":23,"fix":{"range":[5991,6013],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":162,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":162,"endColumn":23,"fix":{"range":[6039,6061],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":163,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":163,"endColumn":21,"fix":{"range":[6089,6109],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":164,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":164,"endColumn":21,"fix":{"range":[6112,6132],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":165,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":165,"endColumn":19,"fix":{"range":[6185,6203],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":166,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":166,"endColumn":19,"fix":{"range":[6206,6224],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":167,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":167,"endColumn":21,"fix":{"range":[6226,6246],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":168,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":168,"endColumn":21,"fix":{"range":[6262,6282],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":169,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":169,"endColumn":21,"fix":{"range":[6323,6343],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":170,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":170,"endColumn":19,"fix":{"range":[6397,6415],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":171,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":171,"endColumn":17,"fix":{"range":[6418,6434],"text":"              "}}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":28,"fixableWarningCount":0,"source":"import {Divider} from '@oykos-development/devkit-react-ts-styled-components';\nimport {EditIcon, Table, Theme, TrashIcon, Typography} from 'client-library';\nimport {useState} from 'react';\nimport ConfiscationModal from '../../../../components/confiscationModal/FinancialConfiscationModal.tsx';\nimport FixedDepositForm from '../../../../components/financeDepositForm.tsx/financialDepositForm.tsx';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useDeleteFixedDepositItem from '../../../../services/graphQL/fixedDeposits/useDeleteFixedDepositItem.ts';\nimport useGetFixedDeposits from '../../../../services/graphQL/fixedDeposits/useGetFixedDeposits.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport PlusButton from '../../../../shared/plusButton.tsx';\nimport {TableTitle} from '../../../../shared/tableTitle.tsx';\nimport {DepositConfiscation, DepositDispatch} from '../../../../types/graphQL/fixedDeposits.ts';\nimport {fixedDepositDispatchTableHeads, fixedFinancialDepositItemTableHeads} from './constants.tsx';\nimport {MainTitle, PlusButtonWrapper, SectionBox} from './styles.tsx';\nimport DepositDispatchModal from '../../../../components/depositDispatchModal/depositDispatchModal.tsx';\nimport useDeleteDepositDispatch from '../../../../services/graphQL/fixedDeposits/useDeleteDepositDispatch.ts';\nimport ScreenWrapper from '../../../../shared/screenWrapper/screenWrapper.tsx';\n\nconst FinanceDepositDetails = () => {\n  const [confiscationModal, setConfiscationModal] = useState(false);\n  const [deleteItemId, setDeleteItemId] = useState<number | null>(null);\n  const [itemEditData, setItemEditData] = useState<DepositConfiscation | null>(null);\n\n  const [dispatchModal, setDispatchModal] = useState(false);\n  const [deleteDispatchId, setDeleteDispatchId] = useState<number | null>(null);\n  const [dispatchEditData, setDispatchEditData] = useState<DepositDispatch | null>(null);\n\n  const {\n    navigation: {\n      location: {pathname},\n    },\n    contextMain: {organization_unit_id},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n\n  const {\n    data: currentDeposit,\n    refetch,\n    loading,\n  } = useGetFixedDeposits({\n    id: id ? parseInt(id) : null,\n    organization_unit_id,\n    type: 'financial',\n  });\n\n  const {deleteFixedDepositItem} = useDeleteFixedDepositItem();\n  const {deleteDepositDispatch} = useDeleteDepositDispatch();\n\n  const handleDeleteItem = async () => {\n    if (!deleteItemId) return;\n\n    await deleteFixedDepositItem(\n      deleteItemId,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisan depozit.');\n      },\n      () => alert.error('Greška. Brisanje depozita nije uspjelo.'),\n    );\n\n    setDeleteItemId(null);\n  };\n\n  const handleDeleteDispatch = async () => {\n    if (!deleteDispatchId) return;\n\n    await deleteDepositDispatch(\n      deleteDispatchId,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisan povrat.');\n      },\n      () => alert.error('Greška. Brisanje povrata nije uspjelo.'),\n    );\n\n    setDeleteDispatchId(null);\n  };\n\n  const disabled = currentDeposit?.items[0]?.status === 'Zakljucen';\n\n  return (\n    <ScreenWrapper showBreadcrumbs={true}>\n      <SectionBox>\n        <MainTitle content={`STALNI FINANSKIJSKI DEPOZIT - ${currentDeposit?.items[0]?.case_number}`} />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" style={{marginBottom: 20}} />\n        <FixedDepositForm data={currentDeposit?.items[0]} />\n      </SectionBox>\n\n      <SectionBox>\n        {/* FIRST TABLE - CONFISCATIONS */}\n        <TableTitle>\n          <Typography variant=\"bodyLarge\" content=\"Dodavanje depozita\" style={{fontWeight: 'bold'}} />\n          <PlusButtonWrapper>\n            <PlusButton onClick={() => setConfiscationModal(true)} disabled={disabled} />\n          </PlusButtonWrapper>\n        </TableTitle>\n        <Table\n          tableHeads={fixedFinancialDepositItemTableHeads}\n          data={currentDeposit?.items[0]?.items || []}\n          isLoading={loading}\n          tableActions={\n            disabled\n              ? undefined\n              : [\n                  {\n                    name: 'edit',\n                    onClick: row => {\n                      setItemEditData(row);\n                      setConfiscationModal(true);\n                    },\n                    icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                  {\n                    name: 'delete',\n                    onClick: row => setDeleteItemId(row.id),\n                    icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                ]\n          }\n          style={{marginBottom: 22}}\n        />\n        {confiscationModal && (\n          <ConfiscationModal\n            data={itemEditData}\n            open={confiscationModal}\n            onClose={() => setConfiscationModal(false)}\n            refetch={refetch}\n          />\n        )}\n        {deleteItemId && (\n          <ConfirmationModal\n            open={true}\n            onClose={() => setDeleteItemId(null)}\n            onConfirm={handleDeleteItem}\n            subTitle=\"Da li ste sigurni da želite da izbrišete ovaj depozit?\"\n          />\n        )}\n      </SectionBox>\n\n      <SectionBox>\n        {/* SECOND TABLE - RETURNS (DISPATCHES IN BACKEND) */}\n        <TableTitle>\n          <Typography variant=\"bodyLarge\" content=\"Vraćanje depozita\" style={{fontWeight: 'bold'}} />\n          <PlusButtonWrapper>\n            <PlusButton onClick={() => setDispatchModal(true)} disabled={disabled} />\n          </PlusButtonWrapper>\n        </TableTitle>\n        <Table\n          tableHeads={fixedDepositDispatchTableHeads}\n          data={currentDeposit?.items[0]?.dispatches || []}\n          isLoading={loading}\n          tableActions={\n            disabled\n              ? undefined\n              : [\n                  {\n                    name: 'edit',\n                    onClick: row => {\n                      setDispatchEditData(row);\n                      setConfiscationModal(true);\n                    },\n                    icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                  {\n                    name: 'delete',\n                    onClick: row => setDeleteItemId(row.id),\n                    icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                ]\n          }\n          style={{marginBottom: 22}}\n        />\n        {dispatchModal && (\n          <DepositDispatchModal\n            data={dispatchEditData}\n            open={true}\n            onClose={() => setDispatchModal(false)}\n            refetch={refetch}\n          />\n        )}\n        {deleteDispatchId && (\n          <ConfirmationModal\n            open={true}\n            onClose={() => setDeleteDispatchId(null)}\n            onConfirm={handleDeleteDispatch}\n            subTitle=\"Da li ste sigurni da želite da izbrišete ovaj povrat?\"\n          />\n        )}\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default FinanceDepositDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/financeDeposit/financialDepositNewEntry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/financeDeposit/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/fixedDepositOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/fixedDepositTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/materialDeposit/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/materialDeposit/materialDepositDetails.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":108,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":108,"endColumn":19,"fix":{"range":[4196,4214],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":109,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":109,"endColumn":21,"fix":{"range":[4216,4236],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":110,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":110,"endColumn":21,"fix":{"range":[4250,4270],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":111,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":111,"endColumn":23,"fix":{"range":[4288,4310],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":112,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":112,"endColumn":23,"fix":{"range":[4332,4354],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":113,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":113,"endColumn":21,"fix":{"range":[4382,4402],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":114,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":114,"endColumn":21,"fix":{"range":[4405,4425],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":115,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":115,"endColumn":19,"fix":{"range":[4478,4496],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":116,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":116,"endColumn":19,"fix":{"range":[4499,4517],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":117,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":117,"endColumn":21,"fix":{"range":[4519,4539],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":118,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":118,"endColumn":21,"fix":{"range":[4555,4575],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":119,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":119,"endColumn":21,"fix":{"range":[4616,4636],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":120,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":120,"endColumn":19,"fix":{"range":[4690,4708],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":121,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":121,"endColumn":17,"fix":{"range":[4711,4727],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":159,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":159,"endColumn":19,"fix":{"range":[5946,5964],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":160,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":160,"endColumn":21,"fix":{"range":[5966,5986],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":161,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":161,"endColumn":21,"fix":{"range":[6000,6020],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":162,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":162,"endColumn":23,"fix":{"range":[6038,6060],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 20 spaces but found 22.","line":163,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":163,"endColumn":23,"fix":{"range":[6086,6108],"text":"                    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":164,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":164,"endColumn":21,"fix":{"range":[6136,6156],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":165,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":165,"endColumn":21,"fix":{"range":[6159,6179],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":166,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":166,"endColumn":19,"fix":{"range":[6232,6250],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":167,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":167,"endColumn":19,"fix":{"range":[6253,6271],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":168,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":168,"endColumn":21,"fix":{"range":[6273,6293],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":169,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":169,"endColumn":21,"fix":{"range":[6309,6329],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 18 spaces but found 20.","line":170,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":170,"endColumn":21,"fix":{"range":[6370,6390],"text":"                  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 18.","line":171,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":171,"endColumn":19,"fix":{"range":[6444,6462],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 16.","line":172,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":172,"endColumn":17,"fix":{"range":[6465,6481],"text":"              "}}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":28,"fixableWarningCount":0,"source":"import {Divider} from '@oykos-development/devkit-react-ts-styled-components';\nimport {EditIcon, Table, Theme, TrashIcon, Typography} from 'client-library';\nimport {useState} from 'react';\nimport ConfiscationModal from '../../../../components/confiscationModal/FinancialConfiscationModal.tsx';\nimport DepositDispatchModal from '../../../../components/depositDispatchModal/depositDispatchModal.tsx';\nimport MaterialDepositForm from '../../../../components/materialDepositForm/materialDepositForm.tsx';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useDeleteDepositDispatch from '../../../../services/graphQL/fixedDeposits/useDeleteDepositDispatch.ts';\nimport useDeleteFixedDepositItem from '../../../../services/graphQL/fixedDeposits/useDeleteFixedDepositItem.ts';\nimport useGetFixedDeposits from '../../../../services/graphQL/fixedDeposits/useGetFixedDeposits.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport PlusButton from '../../../../shared/plusButton.tsx';\nimport ScreenWrapper from '../../../../shared/screenWrapper/screenWrapper.tsx';\nimport {TableTitle} from '../../../../shared/tableTitle.tsx';\nimport {DepositConfiscation, DepositDispatch} from '../../../../types/graphQL/fixedDeposits.ts';\nimport {fixedDepositDispatchTableHeads} from '../financeDeposit/constants.tsx';\nimport {fixedMaterialDepositItemTableHeads} from './constants.tsx';\nimport {MainTitle, PlusButtonWrapper, SectionBox} from './styles.tsx';\n\nconst MaterialDepositDetails = () => {\n  const [confiscationModal, setConfiscationModal] = useState(false);\n  const [deleteItemId, setDeleteItemId] = useState<number | null>(null);\n  const [itemEditData, setItemEditData] = useState<DepositConfiscation | null>(null);\n\n  const [dispatchModal, setDispatchModal] = useState(false);\n  const [deleteDispatchId, setDeleteDispatchId] = useState<number | null>(null);\n  const [dispatchEditData, setDispatchEditData] = useState<DepositDispatch | null>(null);\n\n  const {\n    navigation: {\n      location: {pathname},\n    },\n    contextMain: {organization_unit_id},\n    alert,\n  } = useAppContext();\n\n  const id = pathname.split('/').pop();\n\n  const {\n    data: currentDeposit,\n    refetch,\n    loading,\n  } = useGetFixedDeposits({\n    id: id ? parseInt(id) : null,\n    organization_unit_id,\n    type: 'material',\n  });\n\n  const {deleteFixedDepositItem} = useDeleteFixedDepositItem();\n  const {deleteDepositDispatch} = useDeleteDepositDispatch();\n\n  const handleDeleteItem = async () => {\n    if (!deleteItemId) return;\n\n    await deleteFixedDepositItem(\n      deleteItemId,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisan depozit.');\n      },\n      () => alert.error('Greška. Brisanje depozita nije uspjelo.'),\n    );\n\n    setDeleteItemId(null);\n  };\n\n  const handleDeleteDispatch = async () => {\n    if (!deleteDispatchId) return;\n\n    await deleteDepositDispatch(\n      deleteDispatchId,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisan povrat.');\n      },\n      () => alert.error('Greška. Brisanje povrata nije uspjelo.'),\n    );\n\n    setDeleteDispatchId(null);\n  };\n\n  const disabled = currentDeposit?.items[0]?.status === 'Zakljucen';\n\n  return (\n    <ScreenWrapper showBreadcrumbs={true}>\n      <SectionBox>\n        <MainTitle content={`STALNI MATERIJALNI DEPOZIT - ${currentDeposit?.items[0]?.case_number}`} />\n        <Divider color={Theme?.palette?.gray200} height=\"1px\" style={{marginBottom: 20}} />\n        <MaterialDepositForm data={currentDeposit?.items[0]} />\n      </SectionBox>\n\n      <SectionBox>\n        {/* FIRST TABLE - CONFISCATIONS */}\n        <TableTitle>\n          <Typography variant=\"bodyLarge\" content=\"Dodavanje depozita\" style={{fontWeight: 'bold'}} />\n          <PlusButtonWrapper>\n            <PlusButton onClick={() => setConfiscationModal(true)} disabled={disabled} />\n          </PlusButtonWrapper>\n        </TableTitle>\n        <Table\n          tableHeads={fixedMaterialDepositItemTableHeads}\n          data={currentDeposit?.items[0]?.items || []}\n          isLoading={loading}\n          tableActions={\n            disabled\n              ? undefined\n              : [\n                  {\n                    name: 'edit',\n                    onClick: row => {\n                      setItemEditData(row);\n                      setConfiscationModal(true);\n                    },\n                    icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                  {\n                    name: 'delete',\n                    onClick: row => setDeleteItemId(row.id),\n                    icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                ]\n          }\n          style={{marginBottom: 22}}\n        />\n        {confiscationModal && (\n          <ConfiscationModal\n            data={itemEditData}\n            open={confiscationModal}\n            onClose={() => setConfiscationModal(false)}\n            refetch={refetch}\n          />\n        )}\n        {deleteItemId && (\n          <ConfirmationModal\n            open={true}\n            onClose={() => setDeleteItemId(null)}\n            onConfirm={handleDeleteItem}\n            subTitle=\"Da li ste sigurni da želite da izbrišete ovaj depozit?\"\n          />\n        )}\n      </SectionBox>\n\n      <SectionBox>\n        {/* SECOND TABLE - RETURNS (DISPATCHES IN BACKEND) */}\n        <TableTitle>\n          <Typography variant=\"bodyLarge\" content=\"Vraćanje depozita\" style={{fontWeight: 'bold'}} />\n          <PlusButtonWrapper>\n            <PlusButton onClick={() => setDispatchModal(true)} disabled={disabled} />\n          </PlusButtonWrapper>\n        </TableTitle>\n        <Table\n          tableHeads={fixedDepositDispatchTableHeads}\n          data={currentDeposit?.items[0]?.dispatches || []}\n          isLoading={loading}\n          tableActions={\n            disabled\n              ? undefined\n              : [\n                  {\n                    name: 'edit',\n                    onClick: row => {\n                      setDispatchEditData(row);\n                      setConfiscationModal(true);\n                    },\n                    icon: <EditIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                  {\n                    name: 'delete',\n                    onClick: row => setDeleteItemId(row.id),\n                    icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n                  },\n                ]\n          }\n          style={{marginBottom: 22}}\n        />\n        {dispatchModal && (\n          <DepositDispatchModal\n            data={dispatchEditData}\n            open={true}\n            onClose={() => setDispatchModal(false)}\n            refetch={refetch}\n          />\n        )}\n        {deleteDispatchId && (\n          <ConfirmationModal\n            open={true}\n            onClose={() => setDeleteDispatchId(null)}\n            onConfirm={handleDeleteDispatch}\n            subTitle=\"Da li ste sigurni da želite da izbrišete ovaj povrat?\"\n          />\n        )}\n      </SectionBox>\n    </ScreenWrapper>\n  );\n};\n\nexport default MaterialDepositDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/materialDeposit/materialDepositNewEntry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/materialDeposit/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/testament/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/testament/newTestamentEntry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/testament/styles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/testament/testamentOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/fixedDeposit/testament/testamentTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/landingPages/demandDepositLandingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/landingPages/depositLandingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/landingPages/fixedDepositLandingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/deposit/landingPages/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/addPropertyBenefitsConfiscation/addPropertyBenefitsConfiscation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/addPropertyBenefitsConfiscation/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/confiscation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/confiscationOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1993,1996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1993,1996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2894,2897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2894,2897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {PAGE_SIZE} from '../../../constants.ts';\nimport {tableHeadsConfiscationOverview} from './constants.tsx';\nimport {Header} from './styles.ts';\nimport {FilterInput} from '../../accounting/styles.tsx';\nimport {Filters, FilterDropdown} from '../../budget/planning/budgetList/styles.ts';\nimport {ConfirmationModal} from '../../../shared/confirmationModal/confirmationModal.tsx';\nimport {ProceduralCostOverviewItem} from '../../../types/graphQL/proceduralCosts.ts';\nimport {useState} from 'react';\nimport {defaultDropdownOption, TypeOfFines} from '../fines/constants.tsx';\nimport {useDebounce} from '../../../utils/useDebounce.ts';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport useGetPropertyBenefitsConfiscations from '../../../services/graphQL/propertyBenefitsConfiscation/useGetPropertyBenefitsConfiscation.ts';\nimport useDeletePropertyBenefitsConfiscation from '../../../services/graphQL/propertyBenefitsConfiscation/useDeletePropertyBenefitsConfiscation.ts';\n\nconst initialValues = {\n  property_benefits_confiscation_type_id: defaultDropdownOption.id,\n};\nconst ConfiscationOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [search, setSearch] = useState('');\n  const [showDeleteProceduralCostModal, setShowDeleteProceduralCostModal] = useState<number | null>(null);\n\n  const debouncedSearch = useDebounce(search, 500);\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n\n  const {propertyBenefitsConfiscations, total, refetch, loading} = useGetPropertyBenefitsConfiscations({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n    search: debouncedSearch,\n  });\n\n  const {deletePropertyBenefitsConfiscation} = useDeletePropertyBenefitsConfiscation();\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const filterDropdownOptions = [defaultDropdownOption, ...TypeOfFines] || [];\n\n  const handleDeleteProceduralCost = async () => {\n    if (!showDeleteProceduralCostModal) return;\n    await deletePropertyBenefitsConfiscation(\n      showDeleteProceduralCostModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeleteProceduralCostModal(null);\n  };\n\n  return (\n    <>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            name=\"property_benefits_confiscation_type_id\"\n            value={filterDropdownOptions.find(option => option.id === filters?.property_benefits_confiscation_type_id)}\n            onChange={(value: any) => onFilterChange(value, 'property_benefits_confiscation_type_id')}\n            label=\"VRSTA TROŠKOVA POSTUPKA:\"\n            options={filterDropdownOptions}\n          />\n\n          <FilterInput\n            label=\"PRETRAGA:\"\n            rightContent={<SearchIcon />}\n            name=\"search\"\n            onChange={onSearch}\n            value={search}\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={tableHeadsConfiscationOverview}\n        data={propertyBenefitsConfiscations}\n        isLoading={loading}\n        style={{marginBottom: 22}}\n        emptyMessage={'Još uvjek nema podataka o oduzimanju imovine'}\n        onRowClick={(row: ProceduralCostOverviewItem) => navigate(`/finance/fines-taxes/confiscation/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteProceduralCostModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteProceduralCostModal}\n        subTitle={'Ovo oduzimanje imovinske koristi će biti trajno izbrisano iz sistema.'}\n        onClose={() => setShowDeleteProceduralCostModal(null)}\n        onConfirm={() => handleDeleteProceduralCost()}\n      />\n    </>\n  );\n};\n\nexport default ConfiscationOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/form/propertyBenefitsConfiscationForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3763,3766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3763,3766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is assigned a value but never used.","line":89,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'court_account' is assigned a value but never used.","line":90,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":91,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":92,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":93,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":94,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'property_benefits_confiscation_details' is assigned a value but never used.","line":95,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4711,4714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4711,4714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Datepicker, Input, Typography, FileUpload, Button, Theme} from 'client-library';\nimport {Container, Row} from '../../taxes/addFee/styles.ts';\nimport {actTypeOptions, generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport Footer from '../../../../shared/footer.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList.tsx';\nimport {optionsNumberSchema} from '../../../../utils/formSchemas.ts';\nimport {\n  PropertyBenefitsConfiscationOverviewItem,\n  PropertyBenefitsConfiscationForm,\n} from '../../../../types/graphQL/propertyBenefitsConfiscation.ts';\nimport useInsertPropertyBenefitsConfiscation from '../../../../services/graphQL/propertyBenefitsConfiscation/useInsertPropertyBenefitsConfiscation.ts';\n\nconst propertyBenefitsConfiscationSchema = yup.object().shape({\n  property_benefits_confiscation_type: optionsNumberSchema.required(requiredError).default(null),\n  decision_number: yup.string().required(requiredError),\n  decision_date: yup.date().required(requiredError),\n  subject: yup.string().required(requiredError),\n  jmbg: yup\n    .string()\n    .matches(/^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])(\\d{3})(2[1-9]|29)\\d{3}\\d{1}$/, 'Neispravan JMBG format')\n    .length(13, 'JMBG mora da ima 13 cifara')\n    .required(requiredError),\n  account_id: optionsNumberSchema.required(requiredError).default(null),\n  residence: yup.string().required(requiredError),\n  amount: yup.number().typeError('Morate unijeti broj').required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  execution_date: yup.date().required(requiredError),\n  payment_deadline_date: yup.date().required(requiredError),\n  court_costs: yup.number().optional(),\n  description: yup.string(),\n  court_account_id: optionsNumberSchema.nullable().default(null),\n});\n\nconst defaultValues = {\n  property_benefits_confiscation_type: undefined,\n  decision_number: '',\n  decision_date: undefined,\n  subject: '',\n  jmbg: '',\n  account_id: undefined,\n  residence: '',\n  amount: 0,\n  payment_reference_number: '',\n  debit_reference_number: '',\n  execution_date: undefined,\n  payment_deadline_date: undefined,\n  court_costs: 0,\n  description: '',\n  court_account_id: undefined,\n};\n\ntype PropertyBenefitsConfiscationEntryForm = yup.InferType<typeof propertyBenefitsConfiscationSchema>;\ninterface PropertyBenefitsConfiscationFormProps {\n  property_benefits_confiscation?: PropertyBenefitsConfiscationOverviewItem;\n}\nconst PropertyBenefitsConfiscationForm = ({property_benefits_confiscation}: PropertyBenefitsConfiscationFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n  } = useForm<PropertyBenefitsConfiscationEntryForm>({\n    resolver: yupResolver(propertyBenefitsConfiscationSchema),\n    defaultValues: defaultValues,\n  });\n  const [uploadedFile, setUploadedFile] = useState<FileList>();\n  const {counts} = useGetCountOverview({});\n  const {insertPropertyBenefitsConfiscation, loading} = useInsertPropertyBenefitsConfiscation();\n  const {\n    alert,\n    fileService: {uploadFile},\n    navigation: {navigate},\n  } = useAppContext();\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n  const onSubmit = async (data: any) => {\n    const {\n      account,\n      court_account,\n      created_at,\n      updated_at,\n      file,\n      status,\n      property_benefits_confiscation_details,\n      ...rest\n    } = data;\n    let payload: PropertyBenefitsConfiscationForm = {\n      ...rest,\n      amount: Number(data.amount),\n      court_costs: Number(data.court_costs),\n      property_benefits_confiscation_type: data.property_benefits_confiscation_type.id,\n      account_id: data.account_id.id,\n      court_account_id: data.court_account_id?.id,\n      decision_date: parseDateForBackend(data.decision_date),\n      execution_date: parseDateForBackend(data.execution_date),\n      payment_deadline_date: parseDateForBackend(data.payment_deadline_date),\n    };\n\n    if (uploadedFile) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFile);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFile(undefined);\n          payload = {...payload, file: [res[0]?.id]};\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n\n      insertOrUpdatePropertyBenefitsConfiscation(payload);\n    } else {\n      insertOrUpdatePropertyBenefitsConfiscation(payload);\n    }\n  };\n\n  useEffect(() => {\n    if (property_benefits_confiscation) {\n      reset({\n        ...property_benefits_confiscation,\n        property_benefits_confiscation_type: actTypeOptions.find(\n          option => option?.id === property_benefits_confiscation.property_benefits_confiscation_type?.id,\n        ),\n        account_id: countsDropdownOptions?.find(count => count?.id === property_benefits_confiscation.account?.id),\n        court_account_id: countsDropdownOptions?.find(\n          count => count?.id === property_benefits_confiscation.court_account?.id,\n        ),\n        decision_date: new Date(property_benefits_confiscation.decision_date),\n        payment_deadline_date: new Date(property_benefits_confiscation.payment_deadline_date),\n        execution_date: new Date(property_benefits_confiscation.execution_date),\n      });\n    }\n  }, [property_benefits_confiscation]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n  };\n\n  const insertOrUpdatePropertyBenefitsConfiscation = async (payload: PropertyBenefitsConfiscationForm) => {\n    // update property benefits confiscation\n    if (property_benefits_confiscation && property_benefits_confiscation.id) {\n      const updatedPayload = {...payload, id: property_benefits_confiscation.id};\n\n      await insertPropertyBenefitsConfiscation(\n        updatedPayload,\n        () => {\n          alert.success('Oduzimanje imovinske koristi uspješno izmijenjeno');\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom izmjene oduzimanja imovinske koristi');\n        },\n      );\n      return;\n    }\n\n    // create procedural cost\n    await insertPropertyBenefitsConfiscation(\n      payload,\n      id => {\n        navigate(`/finance/fines-taxes/confiscation/${id}`);\n        alert.success('Oduzimanje imovinske koristi uspješno kreirano');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom kreiranja oduzimanja imovinske koristi');\n      },\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Controller\n          name=\"property_benefits_confiscation_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"VRSTA AKTA:\"\n              placeholder={'Odaberite vrstu oduzimanja imovinske koristi'}\n              options={actTypeOptions}\n              isRequired\n              error={errors.property_benefits_confiscation_type?.message}\n            />\n          )}\n        />\n        <Input {...register('subject')} label=\"SUBJEKAT:\" isRequired error={errors.subject?.message} />\n      </Row>\n      <Row>\n        <Input {...register('jmbg')} label=\"JMBG:\" isRequired error={errors.jmbg?.message} />\n        <Input {...register('residence')} label=\"PREBIVALIŠTE:\" isRequired error={errors.residence?.message} />\n      </Row>\n      <Row>\n        <Input\n          {...register('decision_number')}\n          label=\"BROJ RJEŠENJA / PRESUDE:\"\n          isRequired\n          error={errors.decision_number?.message}\n        />\n        <Controller\n          name={'decision_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM RJEŠENJA / PRESUDE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.decision_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('debit_reference_number')}\n          label=\"POZIV NA BROJ ZADUŽENJA:\"\n          isRequired\n          error={errors.debit_reference_number?.message}\n        />\n        <Input\n          {...register('payment_reference_number')}\n          label=\"POZIV NA BROJ ODOBRENJA:\"\n          isRequired\n          error={errors.payment_reference_number?.message}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('amount')}\n          label=\"VISINA KAZNE:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          isRequired\n          error={errors.amount?.message}\n        />\n        <Input\n          value={property_benefits_confiscation?.property_benefits_confiscation_details.amount_grace_period.toFixed(2)}\n          label={`2/3 KAZNE - UKOLIKO UPLATITE DO ${parseDate(\n            property_benefits_confiscation?.property_benefits_confiscation_details.amount_grace_period_due_date ?? null,\n          )}`}\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div style={{color: Theme.palette.gray300}}>€</div>}\n          disabled\n        />\n      </Row>\n      <Row>\n        <Controller\n          name=\"account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO:\"\n              placeholder={'Odaberite konto'}\n              options={countsDropdownOptions}\n              isRequired\n              error={errors.account_id?.message}\n            />\n          )}\n        />\n        <Input\n          {...register('court_costs')}\n          label=\"SUDSKI TROŠKOVI:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          style={{flexGrow: 1 / 2}}\n        />\n        <Controller\n          name=\"court_account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO ZA SUDSKE TROŠKOVE:\"\n              placeholder={'Odaberite konto za sudske troškove'}\n              options={countsDropdownOptions}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Controller\n          name={'payment_deadline_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"ROK ZA PLAĆANJE UKUPNOG TROŠKA POSTUPKA:\"\n              onChange={onChange}\n              isRequired\n              error={errors.payment_deadline_date?.message}\n            />\n          )}\n        />\n        <Controller\n          name={'execution_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI:\"\n              onChange={onChange}\n              isRequired\n              error={errors.execution_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input {...register('description')} label=\"OPIS:\" textarea />\n      </Row>\n\n      <Row>\n        <FileUpload\n          icon={null}\n          files={uploadedFile}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n        />\n        <FileList files={(property_benefits_confiscation?.file && property_benefits_confiscation?.file) ?? []} />\n      </Row>\n      <Footer>\n        <Button content=\"Odustani\" variant=\"secondary\" style={{width: 130}} onClick={() => reset()} />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={loading} />\n      </Footer>\n    </Container>\n  );\n};\n\nexport default PropertyBenefitsConfiscationForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/paymentDetails/paymentDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4867,4870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4867,4870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":153,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":153,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5830,5831],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalID' is assigned a value but never used.","line":154,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":154,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":154,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":154,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Typography,\n  Table,\n  TableHead,\n  Dropdown,\n  Input,\n  Datepicker,\n  EditIconTwo,\n  Theme,\n  TrashIcon,\n  CheckIcon,\n  CloseIcon,\n} from 'client-library';\nimport {Amount, FinePaymentDetailsWrapper, LabeledDivider} from './styles.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {useEffect, useState} from 'react';\nimport {requiredError} from '../../../../constants.ts';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport useInsertPropertyBenefitsConfiscationPayment from '../../../../services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useInsertPropertyBenefitsConfiscationPayment.ts';\nimport useDeletePropertyBenefitsConfiscationPayment from '../../../../services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useDeletePropertyBenefitsConfiscationPayment.ts';\nimport {\n  PropertyBenefitsConfiscationDetails,\n  PropertyBenefitsConfiscationOverviewItem,\n} from '../../../../types/graphQL/propertyBenefitsConfiscation.ts';\nimport {FinePaymentMethods} from '../../fines/constants.tsx';\nimport useGetPropertyBenefitsConfiscationPayments from '../../../../services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useGetPropertyBenefitsConfiscationPayments.ts';\n\nconst singlePaymentSchema = yup.object().shape({\n  id: yup.number().required(requiredError),\n  payment_method: yup.object().shape({\n    id: yup.number().required(),\n    title: yup.string().required(requiredError),\n  }),\n  amount: yup.number().required(requiredError).min(1, 'Iznos mora biti veći od 0'),\n  payment_date: yup.date().required(requiredError),\n  receipt_number: yup.string().required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  originalID: yup.number().required(requiredError),\n  property_benefits_confiscation_id: yup.number().required(),\n  created_at: yup.string().optional(),\n  updated_at: yup.string().optional(),\n  status: yup.object().shape({\n    id: yup.number().optional(),\n    title: yup.string().optional(),\n  }),\n});\n\nconst paymentsSchema = yup.object().shape({\n  payments: yup.array().of(singlePaymentSchema),\n});\n\ntype PaymentEntryForm = yup.InferType<typeof paymentsSchema>;\ntype PaymentRow = yup.InferType<typeof singlePaymentSchema>;\n\ninterface PaymentFormProps {\n  property_benefits_confiscation: PropertyBenefitsConfiscationOverviewItem;\n  refetchPropertyBenefitsConfiscation: () => Promise<void>;\n}\nconst PaymentDetails = ({property_benefits_confiscation, refetchPropertyBenefitsConfiscation}: PaymentFormProps) => {\n  const propBenConfDetails: PropertyBenefitsConfiscationDetails =\n    property_benefits_confiscation?.property_benefits_confiscation_details;\n  const {payments, refetch} = useGetPropertyBenefitsConfiscationPayments(property_benefits_confiscation?.id);\n  const {insertPropertyBenefitsConfiscationPayment} = useInsertPropertyBenefitsConfiscationPayment();\n  const {deletePropertyBenefitsConfiscationPayment} = useDeletePropertyBenefitsConfiscationPayment();\n  const {alert} = useAppContext();\n\n  const [editRowId, setEditRowId] = useState<number | null>(null);\n  const [showDeletePaymentModal, setShowDeletePaymentModal] = useState<number | null>(null);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    formState: {errors},\n    setError,\n  } = useForm<PaymentEntryForm>({});\n\n  const {fields, append, remove} = useFieldArray({name: 'payments', control});\n  const appendLastRow = () =>\n    append({\n      id: 0,\n      payment_method: {\n        id: 0,\n        title: '',\n      },\n      amount: 0,\n      payment_date: new Date(),\n      receipt_number: '',\n      payment_reference_number: '',\n      debit_reference_number: '',\n      originalID: 0,\n      property_benefits_confiscation_id: property_benefits_confiscation.id,\n      status: {\n        id: 0,\n        title: '',\n      },\n    });\n\n  useEffect(() => {\n    remove();\n    if (payments.length) {\n      payments.forEach(payment => {\n        append({\n          ...payment,\n          // need to save original id to be able to edit/delete the payment because useFieldArray will change it\n          originalID: payment.id,\n          payment_method: FinePaymentMethods.find(method => method.title === payment.payment_method.title) ?? {\n            id: 0,\n            title: '',\n          },\n          payment_date: new Date(payment?.payment_date),\n        });\n      });\n      appendLastRow();\n      return;\n    }\n\n    appendLastRow();\n  }, [payments]);\n\n  const isRowDisabled = (row: any) => {\n    return editRowId ? editRowId !== row.originalID : !!row.originalID;\n  };\n\n  const validateSingleRow = async (rowData: PaymentRow, id: number) => {\n    try {\n      // Validate using Yup directly\n      await singlePaymentSchema.validate(rowData, {abortEarly: false});\n      return true; // Validation passed\n    } catch (err) {\n      if (err instanceof yup.ValidationError) {\n        err.inner.forEach(error => {\n          setError(`payments.${id}.${error.path}` as never, {type: 'manual', message: error.message});\n        });\n      }\n    }\n  };\n\n  const handleSubmitPayment = async (data: PaymentEntryForm) => {\n    if (data.payments?.length) {\n      const test = data.payments?.findIndex(item => item.originalID === editRowId);\n      const selectedRow = test != -1 ? test : fields.length - 1;\n\n      const isValid = await validateSingleRow(data?.payments[selectedRow], selectedRow);\n\n      if (!isValid) return;\n\n      const payment = data.payments![selectedRow];\n      const {originalID, created_at, updated_at, status, ...updatedPayment} = payment;\n      const parsedPaymentDate = parseDateForBackend(payment.payment_date);\n      if (!parsedPaymentDate) return;\n\n      const payload = {\n        ...updatedPayment,\n        payment_method: payment.payment_method.id,\n        payment_date: parsedPaymentDate,\n      };\n      await insertPropertyBenefitsConfiscationPayment(\n        payload,\n        () => {\n          refetch();\n          refetchPropertyBenefitsConfiscation();\n          alert.success('Uspješno sačuvano.');\n          setEditRowId(null);\n        },\n        () => alert?.error('Greška. Promjene nisu sačuvane.'),\n      );\n    }\n  };\n\n  const handleDeletePayment = async () => {\n    const paymentIndex = payments.findIndex(payment => payment.id === showDeletePaymentModal);\n    if (!showDeletePaymentModal || paymentIndex === -1) return;\n    await deletePropertyBenefitsConfiscationPayment(\n      showDeletePaymentModal,\n      () => {\n        remove(paymentIndex);\n        refetchPropertyBenefitsConfiscation();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeletePaymentModal(null);\n  };\n\n  const tableHeadsPayments: TableHead[] = [\n    {\n      title: 'Način plaćanja',\n      accessor: 'payment_method',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_method`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Dropdown\n                style={{width: '180px'}}\n                name={name}\n                onChange={onChange}\n                value={value ?? FinePaymentMethods.find(method => method.title === value)}\n                options={FinePaymentMethods}\n                isDisabled={isRowDisabled(row)}\n                error={isRowDisabled(row) ? '' : errors?.payments?.[index]?.payment_method?.title?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.amount`)}\n            type=\"number\"\n            leftContent={\n              <div style={{color: isRowDisabled(row) ? Theme.palette.gray300 : Theme.palette.gray800}}>€</div>\n            }\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Datum uplate',\n      accessor: 'payment_date',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_date`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Datepicker\n                name={name}\n                onChange={onChange}\n                selected={value ? new Date(value) : ''}\n                disabled={isRowDisabled(row)}\n                error={errors?.payments?.[index]?.payment_date?.message}\n                popperProps={{\n                  strategy: 'fixed', // fixes datepicker going behind other elements\n                  placement: 'top',\n                }}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Broj izvoda',\n      accessor: 'receipt_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.receipt_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.receipt_number?.message}\n            key={`payments.${index}.receipt_number`}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj odobrenja',\n      accessor: 'payment_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.payment_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.payment_reference_number?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj zaduženja',\n      accessor: 'debit_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.debit_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.debit_reference_number?.message}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  return (\n    <>\n      <Amount style={{marginTop: 10}}>\n        <Typography style={{fontWeight: 600, marginBottom: 10}} variant={'bodySmall'} content={'Platiti do:'} />\n        <Typography variant=\"bodySmall\" content={parseDate(property_benefits_confiscation?.payment_deadline_date)} />\n      </Amount>\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"DETALJI PLAĆANJA:\" />\n      </LabeledDivider>\n      <Table\n        tableHeads={tableHeadsPayments}\n        data={fields}\n        tableActions={[\n          {\n            name: 'Otkaži',\n            onClick: () => setEditRowId(null),\n            icon: <CloseIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Plati',\n\n            onClick: handleSubmit(handleSubmitPayment),\n            icon: <CheckIcon stroke={Theme?.palette?.gray800} width={'20px'} height={'20px'} />,\n            shouldRender: row => !isRowDisabled(row) || !row.originalID,\n          },\n          {\n            name: 'Izmijeni',\n            onClick: row => setEditRowId(row.originalID),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Izbriši',\n            onClick: row => setShowDeletePaymentModal(row.originalID),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !!row.originalID && (!editRowId || editRowId !== row.originalID),\n          },\n        ]}\n      />\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPNO:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={`${propBenConfDetails?.all_payments_amount + propBenConfDetails?.court_costs_paid} €`}\n          />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      {/*<Amount>*/}\n      {/*  <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREMAŠEN IZNOS:\" />*/}\n      {/*  <Typography variant=\"bodySmall\" content={`${fine?.amount} €`} />*/}\n      {/*</Amount>*/}\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREGLED PLAĆANJA:\" />\n      </LabeledDivider>\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${property_benefits_confiscation?.amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${propBenConfDetails?.all_payments_amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UMANJENJE KAZNE:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={\n              propBenConfDetails?.amount_grace_period_available\n                ? roundCurrency(property_benefits_confiscation?.amount - propBenConfDetails?.amount_grace_period)\n                : '0.00 €'\n            }\n          />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(propBenConfDetails?.left_to_pay_amount)} />\n        </Amount>\n        <Amount style={{marginTop: 20}}>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${property_benefits_confiscation?.court_costs} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${propBenConfDetails?.court_costs_paid} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(propBenConfDetails?.court_costs_left_to_pay_amount)} />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      <ConfirmationModal\n        open={!!showDeletePaymentModal}\n        subTitle={'Ova uplata će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeletePaymentModal(null)}\n        onConfirm={() => handleDeletePayment()}\n      />\n    </>\n  );\n};\n\nexport default PaymentDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/paymentDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/paymentDetails/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/propertyBenefitsConfiscationDetails/propertyBenefitsConfiscationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/confiscation/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/addFine/addFine.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/addFine/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/fineDetails/fineDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/fines.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/finesOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1933,1936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1933,1936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2395,2398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2395,2398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {useState} from 'react';\nimport {FilterDropdown, FilterInput, Filters} from '../../../screens/budget/planning/budgetList/styles.ts';\nimport {PAGE_SIZE} from '../../../constants.ts';\nimport useGetFines from '../../../services/graphQL/fines/useGetFines.ts';\nimport {useDebounce} from '../../../utils/useDebounce.ts';\nimport {Header} from './styles.ts';\nimport {TypeOfFines, tableHeadsFinesOverview, defaultDropdownOption} from './constants.tsx';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport {FinesOverviewItem} from '../../../types/graphQL/finesOverview.ts';\nimport useDeleteFine from '../../../services/graphQL/fines/useDeleteFine.ts';\nimport {ConfirmationModal} from '../../../shared/confirmationModal/confirmationModal.tsx';\n\nconst initialValues = {\n  act_type_id: defaultDropdownOption.id,\n};\n\nconst FinesOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [search, setSearch] = useState('');\n  const [showDeleteFineModal, setShowDeleteFineModal] = useState<number | null>(null);\n\n  const debouncedSearch = useDebounce(search, 500);\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n\n  const {fines, total, refetch, loading} = useGetFines({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n    search: debouncedSearch,\n  });\n  const {deleteFine} = useDeleteFine();\n\n  const handleDeleteFine = async () => {\n    if (!showDeleteFineModal) return;\n    await deleteFine(\n      showDeleteFineModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeleteFineModal(null);\n  };\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const filterDropdownOptions = [defaultDropdownOption, ...TypeOfFines] || [];\n\n  return (\n    <>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            name=\"act_type_id\"\n            value={filterDropdownOptions.find(option => option.id === filters?.act_type_id)}\n            onChange={(value: any) => onFilterChange(value, 'act_type_id')}\n            label=\"VRSTA KAZNE:\"\n            options={filterDropdownOptions}\n          />\n\n          <FilterInput\n            label=\"PRETRAGA:\"\n            rightContent={<SearchIcon />}\n            name=\"search\"\n            onChange={onSearch}\n            value={search}\n          />\n        </Filters>\n      </Header>\n      <Table\n        isLoading={loading}\n        tableHeads={tableHeadsFinesOverview}\n        data={fines}\n        style={{marginBottom: 22}}\n        emptyMessage={'Još uvjek nema kazni'}\n        onRowClick={(row: FinesOverviewItem) => navigate(`/finance/fines-taxes/fines/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteFineModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteFineModal}\n        subTitle={'Ova kazna će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeleteFineModal(null)}\n        onConfirm={() => handleDeleteFine()}\n      />\n    </>\n  );\n};\n\nexport default FinesOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/form/fineForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3295,3298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3295,3298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is assigned a value but never used.","line":83,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'court_account' is assigned a value but never used.","line":83,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":83,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":83,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":83,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":83,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fine_fee_details' is assigned a value but never used.","line":83,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":90},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4089,4092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4089,4092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Datepicker, Input, Typography, FileUpload, Button, Theme} from 'client-library';\nimport {Container, Row} from '../../taxes/addFee/styles.ts';\nimport {actTypeOptions, generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport Footer from '../../../../shared/footer.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useInsertFine from '../../../../services/graphQL/fines/useInsertFine.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {FineForm} from '../../../../types/graphQL/fineForm.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList.tsx';\nimport {FinesOverviewItem} from '../../../../types/graphQL/finesOverview.ts';\nimport {optionsNumberSchema} from '../../../../utils/formSchemas.ts';\n\nconst fineSchema = yup.object().shape({\n  act_type: optionsNumberSchema.required(requiredError).default(null),\n  decision_number: yup.string().required(requiredError),\n  decision_date: yup.date().required(requiredError),\n  subject: yup.string().required(requiredError),\n  jmbg: yup\n    .string()\n    .matches(/^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])(\\d{3})(2[1-9]|29)\\d{3}\\d{1}$/, 'Neispravan JMBG format')\n    .length(13, 'JMBG mora da ima 13 cifara')\n    .required(requiredError),\n  account_id: optionsNumberSchema.required(requiredError).default(null),\n  residence: yup.string().required(requiredError),\n  amount: yup.number().typeError('Morate unijeti broj').required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  execution_date: yup.date().required(requiredError),\n  payment_deadline_date: yup.date().required(requiredError),\n  court_costs: yup.number().optional(),\n  description: yup.string(),\n  court_account_id: optionsNumberSchema.nullable().default(null),\n});\n\nconst defaultValues = {\n  act_type: undefined,\n  decision_number: '',\n  decision_date: undefined,\n  subject: '',\n  jmbg: '',\n  account_id: undefined,\n  residence: '',\n  amount: 0,\n  payment_reference_number: '',\n  debit_reference_number: '',\n  execution_date: undefined,\n  payment_deadline_date: undefined,\n  court_costs: 0,\n  description: '',\n  court_account_id: undefined,\n};\n\ntype FineEntryForm = yup.InferType<typeof fineSchema>;\ninterface FineFormProps {\n  fine?: FinesOverviewItem;\n}\nconst FineForm = ({fine}: FineFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n  } = useForm<FineEntryForm>({resolver: yupResolver(fineSchema), defaultValues: defaultValues});\n  const [uploadedFile, setUploadedFile] = useState<FileList>();\n  const {counts} = useGetCountOverview({});\n  const {insertFine, loading} = useInsertFine();\n  const {\n    alert,\n    fileService: {uploadFile},\n    navigation: {navigate},\n  } = useAppContext();\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n  const onSubmit = async (data: any) => {\n    const {account, court_account, created_at, updated_at, file, status, fine_fee_details, ...rest} = data;\n    let payload: FineForm = {\n      ...rest,\n      amount: Number(data.amount),\n      court_costs: Number(data.court_costs),\n      act_type: data.act_type.id,\n      account_id: data.account_id.id,\n      court_account_id: data.court_account_id?.id,\n      decision_date: parseDateForBackend(data.decision_date),\n      execution_date: parseDateForBackend(data.execution_date),\n      payment_deadline_date: parseDateForBackend(data.payment_deadline_date),\n    };\n\n    if (uploadedFile) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFile);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFile(undefined);\n          payload = {...payload, file: [res[0]?.id]};\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n\n      insertOrUpdateFine(payload);\n    } else {\n      insertOrUpdateFine(payload);\n    }\n  };\n\n  useEffect(() => {\n    if (fine) {\n      reset({\n        ...fine,\n        act_type: actTypeOptions.find(option => option?.id === fine.act_type?.id),\n        account_id: countsDropdownOptions?.find(count => count?.id === fine.account?.id),\n        court_account_id: countsDropdownOptions?.find(count => count?.id === fine.court_account?.id),\n        decision_date: new Date(fine.decision_date),\n        payment_deadline_date: new Date(fine.payment_deadline_date),\n        execution_date: new Date(fine.execution_date),\n      });\n    }\n  }, [fine]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n  };\n\n  const insertOrUpdateFine = async (payload: FineForm) => {\n    // update fine\n    if (fine && fine.id) {\n      const updatedPayload = {...payload, id: fine.id};\n\n      await insertFine(\n        updatedPayload,\n        () => {\n          alert.success('Kazna uspješno izmijenjena');\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom izmjene kazne');\n        },\n      );\n      return;\n    }\n\n    // create fine\n    await insertFine(\n      payload,\n      id => {\n        navigate(`/finance/fines-taxes/fines/${id}`);\n        alert.success('Kazna uspješno kreirana');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom kreiranja kazne');\n      },\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Controller\n          name=\"act_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"VRSTA AKTA:\"\n              placeholder={'Odaberite vrstu akta'}\n              options={actTypeOptions}\n              isRequired\n              error={errors.act_type?.message}\n            />\n          )}\n        />\n        <Input {...register('subject')} label=\"SUBJEKAT:\" isRequired error={errors.subject?.message} />\n      </Row>\n      <Row>\n        <Input {...register('jmbg')} label=\"JMBG:\" isRequired error={errors.jmbg?.message} />\n        <Input {...register('residence')} label=\"PREBIVALIŠTE:\" isRequired error={errors.residence?.message} />\n      </Row>\n      <Row>\n        <Input\n          {...register('decision_number')}\n          label=\"BROJ RJEŠENJA / PRESUDE:\"\n          isRequired\n          error={errors.decision_number?.message}\n        />\n        <Controller\n          name={'decision_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM RJEŠENJA / PRESUDE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.decision_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('debit_reference_number')}\n          label=\"POZIV NA BROJ ZADUŽENJA:\"\n          isRequired\n          error={errors.debit_reference_number?.message}\n        />\n        <Input\n          {...register('payment_reference_number')}\n          label=\"POZIV NA BROJ ODOBRENJA:\"\n          isRequired\n          error={errors.payment_reference_number?.message}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('amount')}\n          label=\"VISINA KAZNE:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          isRequired\n          error={errors.amount?.message}\n        />\n        <Input\n          value={fine?.fine_fee_details.fee_amount_grace_period.toFixed(2)}\n          label={`2/3 KAZNE - UKOLIKO UPLATITE DO ${parseDate(\n            fine?.fine_fee_details.fee_amount_grace_period_due_date ?? null,\n          )}`}\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div style={{color: Theme.palette.gray300}}>€</div>}\n          disabled\n        />\n      </Row>\n      <Row>\n        <Controller\n          name=\"account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO:\"\n              placeholder={'Odaberite konto'}\n              options={countsDropdownOptions}\n              isRequired\n              error={errors.account_id?.message}\n            />\n          )}\n        />\n        <Input\n          {...register('court_costs')}\n          label=\"SUDSKI TROŠKOVI:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          style={{flexGrow: 1 / 2}}\n        />\n        <Controller\n          name=\"court_account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO ZA SUDSKE TROŠKOVE:\"\n              placeholder={'Odaberite konto za sudske troškove'}\n              options={countsDropdownOptions}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Controller\n          name={'payment_deadline_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"ROK ZA PLAĆANJE UKUPNE KAZNE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.payment_deadline_date?.message}\n            />\n          )}\n        />\n        <Controller\n          name={'execution_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI:\"\n              onChange={onChange}\n              isRequired\n              error={errors.execution_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input {...register('description')} label=\"OPIS:\" textarea />\n      </Row>\n\n      <Row>\n        <FileUpload\n          icon={null}\n          files={uploadedFile}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n        />\n        <FileList files={(fine?.file && fine?.file) ?? []} />\n      </Row>\n      <Footer>\n        <Button content=\"Odustani\" variant=\"secondary\" style={{width: 130}} onClick={() => reset()} />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={loading} />\n      </Footer>\n    </Container>\n  );\n};\n\nexport default FineForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/paymentDetails/paymentDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4083,4086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4083,4086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5046,5047],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalID' is assigned a value but never used.","line":150,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":150,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":150,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":150,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Typography,\n  Table,\n  TableHead,\n  Dropdown,\n  Input,\n  Datepicker,\n  EditIconTwo,\n  Theme,\n  TrashIcon,\n  CheckIcon,\n  CloseIcon,\n} from 'client-library';\nimport {Amount, FinePaymentDetailsWrapper, LabeledDivider} from './styles.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {FineFeeDetails, FinesOverviewItem} from '../../../../types/graphQL/finesOverview.ts';\nimport useGetFinePayments from '../../../../services/graphQL/fines/finePayments/useGetFinePayments.ts';\nimport {useEffect, useState} from 'react';\nimport {requiredError} from '../../../../constants.ts';\nimport {FinePaymentMethods} from '../constants.tsx';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport useInsertFinePayment from '../../../../services/graphQL/fines/finePayments/useInsertFinePayment.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport useDeleteFinePayment from '../../../../services/graphQL/fines/finePayments/useDeleteFinePayment.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\n\nconst singlePaymentSchema = yup.object().shape({\n  id: yup.number().required(requiredError),\n  payment_method: yup.object().shape({\n    id: yup.number().required(),\n    title: yup.string().required(requiredError),\n  }),\n  amount: yup.number().required(requiredError).min(1, 'Iznos mora biti veći od 0'),\n  payment_date: yup.date().required(requiredError),\n  receipt_number: yup.string().required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  originalID: yup.number().required(requiredError),\n  fine_id: yup.number().required(),\n  created_at: yup.string().optional(),\n  updated_at: yup.string().optional(),\n  status: yup.object().shape({\n    id: yup.number().optional(),\n    title: yup.string().optional(),\n  }),\n});\n\nconst paymentsSchema = yup.object().shape({\n  payments: yup.array().of(singlePaymentSchema),\n});\n\ntype PaymentEntryForm = yup.InferType<typeof paymentsSchema>;\ntype PaymentRow = yup.InferType<typeof singlePaymentSchema>;\n\ninterface PaymentFormProps {\n  fine: FinesOverviewItem;\n  refetchFine: () => Promise<void>;\n}\nconst PaymentDetails = ({fine, refetchFine}: PaymentFormProps) => {\n  const fineFeeDetails: FineFeeDetails = fine?.fine_fee_details;\n  const {payments, refetch} = useGetFinePayments(fine?.id);\n  const {insertFinePayment} = useInsertFinePayment();\n  const {deleteFinePayment} = useDeleteFinePayment();\n  const {alert} = useAppContext();\n\n  const [editRowId, setEditRowId] = useState<number | null>(null);\n  const [showDeletePaymentModal, setShowDeletePaymentModal] = useState<number | null>(null);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    formState: {errors},\n    setError,\n  } = useForm<PaymentEntryForm>({});\n\n  const {fields, append, remove} = useFieldArray({name: 'payments', control});\n  const appendLastRow = () =>\n    append({\n      id: 0,\n      payment_method: {\n        id: 0,\n        title: '',\n      },\n      amount: 0,\n      payment_date: new Date(),\n      receipt_number: '',\n      payment_reference_number: '',\n      debit_reference_number: '',\n      originalID: 0,\n      fine_id: fine.id,\n      status: {\n        id: 0,\n        title: '',\n      },\n    });\n\n  useEffect(() => {\n    remove();\n    if (payments.length) {\n      payments.forEach(payment => {\n        append({\n          ...payment,\n          // need to save original id to be able to edit/delete the payment because useFieldArray will change it\n          originalID: payment.id,\n          payment_method: FinePaymentMethods.find(method => method.title === payment.payment_method.title) ?? {\n            id: 0,\n            title: '',\n          },\n          payment_date: new Date(payment?.payment_date),\n        });\n      });\n      appendLastRow();\n      return;\n    }\n\n    appendLastRow();\n  }, [payments]);\n\n  const isRowDisabled = (row: any) => {\n    return editRowId ? editRowId !== row.originalID : !!row.originalID;\n  };\n\n  const validateSingleRow = async (rowData: PaymentRow, id: number) => {\n    try {\n      // Validate using Yup directly\n      await singlePaymentSchema.validate(rowData, {abortEarly: false});\n      return true; // Validation passed\n    } catch (err) {\n      if (err instanceof yup.ValidationError) {\n        err.inner.forEach(error => {\n          setError(`payments.${id}.${error.path}` as never, {type: 'manual', message: error.message});\n        });\n      }\n    }\n  };\n\n  const handleSubmitPayment = async (data: PaymentEntryForm) => {\n    if (data.payments?.length) {\n      const test = data.payments?.findIndex(item => item.originalID === editRowId);\n      const selectedRow = test != -1 ? test : fields.length - 1;\n\n      const isValid = await validateSingleRow(data?.payments[selectedRow], selectedRow);\n\n      if (!isValid) return;\n\n      const payment = data.payments![selectedRow];\n      const {originalID, created_at, updated_at, status, ...updatedPayment} = payment;\n      const parsedPaymentDate = parseDateForBackend(payment.payment_date);\n      if (!parsedPaymentDate) return;\n\n      const payload = {\n        ...updatedPayment,\n        payment_method: payment.payment_method.id,\n        payment_date: parsedPaymentDate,\n      };\n      await insertFinePayment(\n        payload,\n        () => {\n          refetch();\n          refetchFine();\n          alert.success('Uspješno sačuvano.');\n          setEditRowId(null);\n        },\n        () => alert?.error('Greška. Promjene nisu sačuvane.'),\n      );\n    }\n  };\n\n  const handleDeletePayment = async () => {\n    const paymentIndex = payments.findIndex(payment => payment.id === showDeletePaymentModal);\n    if (!showDeletePaymentModal || paymentIndex === -1) return;\n    await deleteFinePayment(\n      showDeletePaymentModal,\n      () => {\n        remove(paymentIndex);\n        refetchFine();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeletePaymentModal(null);\n  };\n\n  const tableHeadsPayments: TableHead[] = [\n    {\n      title: 'Način plaćanja',\n      accessor: 'payment_method',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_method`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Dropdown\n                style={{width: '180px'}}\n                name={name}\n                onChange={onChange}\n                value={value ?? FinePaymentMethods.find(method => method.title === value)}\n                options={FinePaymentMethods}\n                isDisabled={isRowDisabled(row)}\n                error={isRowDisabled(row) ? '' : errors?.payments?.[index]?.payment_method?.title?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.amount`)}\n            type=\"number\"\n            leftContent={\n              <div style={{color: isRowDisabled(row) ? Theme.palette.gray300 : Theme.palette.gray800}}>€</div>\n            }\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Datum uplate',\n      accessor: 'payment_date',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_date`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Datepicker\n                name={name}\n                onChange={onChange}\n                selected={value ? new Date(value) : ''}\n                disabled={isRowDisabled(row)}\n                error={errors?.payments?.[index]?.payment_date?.message}\n                popperProps={{\n                  strategy: 'fixed', // fixes datepicker going behind other elements\n                  placement: 'top',\n                }}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Broj izvoda',\n      accessor: 'receipt_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.receipt_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.receipt_number?.message}\n            key={`payments.${index}.receipt_number`}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj odobrenja',\n      accessor: 'payment_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.payment_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.payment_reference_number?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj zaduženja',\n      accessor: 'debit_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.debit_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.debit_reference_number?.message}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  return (\n    <>\n      <Amount style={{marginTop: 10}}>\n        <Typography style={{fontWeight: 600, marginBottom: 10}} variant={'bodySmall'} content={'Platiti do:'} />\n        <Typography variant=\"bodySmall\" content={parseDate(fine?.payment_deadline_date)} />\n      </Amount>\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"DETALJI PLAĆANJA:\" />\n      </LabeledDivider>\n      <Table\n        tableHeads={tableHeadsPayments}\n        data={fields}\n        tableActions={[\n          {\n            name: 'Otkaži',\n            onClick: () => setEditRowId(null),\n            icon: <CloseIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Plati',\n\n            onClick: handleSubmit(handleSubmitPayment),\n            icon: <CheckIcon stroke={Theme?.palette?.gray800} width={'20px'} height={'20px'} />,\n            shouldRender: row => !isRowDisabled(row) || !row.originalID,\n          },\n          {\n            name: 'Izmijeni',\n            onClick: row => setEditRowId(row.originalID),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Izbriši',\n            onClick: row => setShowDeletePaymentModal(row.originalID),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !!row.originalID && (!editRowId || editRowId !== row.originalID),\n          },\n        ]}\n      />\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPNO:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={`${fineFeeDetails?.fee_all_payments_amount + fineFeeDetails?.fee_court_costs_paid} €`}\n          />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      {/*<Amount>*/}\n      {/*  <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREMAŠEN IZNOS:\" />*/}\n      {/*  <Typography variant=\"bodySmall\" content={`${fine?.amount} €`} />*/}\n      {/*</Amount>*/}\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREGLED PLAĆANJA:\" />\n      </LabeledDivider>\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${fine?.amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${fineFeeDetails?.fee_all_payments_amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UMANJENJE KAZNE:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={\n              fineFeeDetails?.fee_amount_grace_period_available\n                ? roundCurrency(fine?.amount - fineFeeDetails?.fee_amount_grace_period)\n                : '0.00 €'\n            }\n          />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(fineFeeDetails?.fee_left_to_pay_amount)} />\n        </Amount>\n        <Amount style={{marginTop: 20}}>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${fine?.court_costs} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${fineFeeDetails?.fee_court_costs_paid} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(fineFeeDetails?.fee_court_costs_left_to_pay_amount)} />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      <ConfirmationModal\n        open={!!showDeletePaymentModal}\n        subTitle={'Ova uplata će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeletePaymentModal(null)}\n        onConfirm={() => handleDeletePayment()}\n      />\n    </>\n  );\n};\n\nexport default PaymentDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/paymentDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/paymentDetails/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/fines/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/addFlatRate/addFlatRate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/addFlatRate/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/flatRate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/flatRateDetails/flatRateDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/flatRateOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2078,2081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2078,2081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2552,2555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2552,2555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {PAGE_SIZE} from '../../../constants.ts';\nimport {FilterInput} from '../../accounting/styles.tsx';\nimport {FilterDropdown, Filters} from '../../budget/planning/budgetList/styles.ts';\nimport {tableHeadsFlatRateOverview} from './constants.tsx';\nimport {Header} from './styles.ts';\nimport {defaultDropdownOption, TypeOfFines} from '../fines/constants.tsx';\nimport {useState} from 'react';\nimport {useDebounce} from '../../../utils/useDebounce.ts';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport useGetFlatRate from '../../../services/graphQL/flatRate/useGetFlatRate.ts';\nimport useDeleteFlatRate from '../../../services/graphQL/flatRate/useDeleteFlatRate.ts';\nimport {FlatRateOverviewItem} from '../../../types/graphQL/flatRate.ts';\nimport {ConfirmationModal} from '../../../shared/confirmationModal/confirmationModal.tsx';\n\nconst initialValues = {\n  flat_rate_type_id: defaultDropdownOption.id,\n};\n\nconst FlatRateOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [search, setSearch] = useState('');\n  const [showDeleteFlatRateModal, setShowDeleteFlatRateModal] = useState<number | null>(null);\n\n  const debouncedSearch = useDebounce(search, 500);\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n\n  const {flatRates, total, refetch, loading} = useGetFlatRate({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n    search: debouncedSearch,\n  });\n  const {deleteFlatRate} = useDeleteFlatRate();\n\n  const handleDeleteFlatRate = async () => {\n    if (!showDeleteFlatRateModal) return;\n    await deleteFlatRate(\n      showDeleteFlatRateModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeleteFlatRateModal(null);\n  };\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const filterDropdownOptions = [defaultDropdownOption, ...TypeOfFines] || [];\n\n  return (\n    <>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            name=\"flat_rate_type_id\"\n            value={filterDropdownOptions.find(option => option.id === filters?.flat_rate_type_id)}\n            onChange={(value: any) => onFilterChange(value, 'flat_rate_type_id')}\n            label=\"VRSTA PAUŠALA:\"\n            options={filterDropdownOptions}\n          />\n\n          <FilterInput\n            label=\"PRETRAGA:\"\n            rightContent={<SearchIcon />}\n            name=\"search\"\n            onChange={onSearch}\n            value={search}\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={tableHeadsFlatRateOverview}\n        data={flatRates}\n        isLoading={loading}\n        style={{marginBottom: 22}}\n        emptyMessage={'Još uvjek nema paušala'}\n        onRowClick={(row: FlatRateOverviewItem) => navigate(`/finance/fines-taxes/flat-rate/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteFlatRateModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteFlatRateModal}\n        subTitle={'Ovaj trošak postupka će biti trajno izbrisan iz sistema.'}\n        onClose={() => setShowDeleteFlatRateModal(null)}\n        onConfirm={() => handleDeleteFlatRate()}\n      />\n    </>\n  );\n};\n\nexport default FlatRateOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/form/flatRateForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3319,3322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3319,3322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is assigned a value but never used.","line":82,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'court_account' is assigned a value but never used.","line":82,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":82,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":82,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":82,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":82,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'flat_rate_details' is assigned a value but never used.","line":82,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":91},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4130,4133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4130,4133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Datepicker, Input, Typography, FileUpload, Button, Theme} from 'client-library';\nimport {Container, Row} from '../../taxes/addFee/styles.ts';\nimport {actTypeOptions, generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport Footer from '../../../../shared/footer.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList.tsx';\nimport {optionsNumberSchema} from '../../../../utils/formSchemas.ts';\nimport {FlatRateOverviewItem, FlatRateForm} from '../../../../types/graphQL/flatRate.ts';\nimport useInsertFlatRate from '../../../../services/graphQL/flatRate/useInsertFlatRate.ts';\n\nconst flatRateSchema = yup.object().shape({\n  flat_rate_type: optionsNumberSchema.required(requiredError).default(null),\n  decision_number: yup.string().required(requiredError),\n  decision_date: yup.date().required(requiredError),\n  subject: yup.string().required(requiredError),\n  jmbg: yup\n    .string()\n    .matches(/^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])(\\d{3})(2[1-9]|29)\\d{3}\\d{1}$/, 'Neispravan JMBG format')\n    .length(13, 'JMBG mora da ima 13 cifara')\n    .required(requiredError),\n  account_id: optionsNumberSchema.required(requiredError).default(null),\n  residence: yup.string().required(requiredError),\n  amount: yup.number().typeError('Morate unijeti broj').required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  execution_date: yup.date().required(requiredError),\n  payment_deadline_date: yup.date().required(requiredError),\n  court_costs: yup.number().optional(),\n  description: yup.string(),\n  court_account_id: optionsNumberSchema.nullable().default(null),\n});\n\nconst defaultValues = {\n  flat_rate_type: undefined,\n  decision_number: '',\n  decision_date: undefined,\n  subject: '',\n  jmbg: '',\n  account_id: undefined,\n  residence: '',\n  amount: 0,\n  payment_reference_number: '',\n  debit_reference_number: '',\n  execution_date: undefined,\n  payment_deadline_date: undefined,\n  court_costs: 0,\n  description: '',\n  court_account_id: undefined,\n};\n\ntype FlatRateEntryForm = yup.InferType<typeof flatRateSchema>;\ninterface FlatRateFormProps {\n  flat_rate?: FlatRateOverviewItem;\n}\nconst FlatRateForm = ({flat_rate}: FlatRateFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n  } = useForm<FlatRateEntryForm>({resolver: yupResolver(flatRateSchema), defaultValues: defaultValues});\n  const [uploadedFile, setUploadedFile] = useState<FileList>();\n  const {counts} = useGetCountOverview({});\n  const {insertFlatRate, loading} = useInsertFlatRate();\n  const {\n    alert,\n    fileService: {uploadFile},\n    navigation: {navigate},\n  } = useAppContext();\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n  const onSubmit = async (data: any) => {\n    const {account, court_account, created_at, updated_at, file, status, flat_rate_details, ...rest} = data;\n    let payload: FlatRateForm = {\n      ...rest,\n      amount: Number(data.amount),\n      court_costs: Number(data.court_costs),\n      flat_rate_type: data.flat_rate_type.id,\n      account_id: data.account_id.id,\n      court_account_id: data.court_account_id?.id,\n      decision_date: parseDateForBackend(data.decision_date),\n      execution_date: parseDateForBackend(data.execution_date),\n      payment_deadline_date: parseDateForBackend(data.payment_deadline_date),\n    };\n\n    if (uploadedFile) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFile);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFile(undefined);\n          payload = {...payload, file: [res[0]?.id]};\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n\n      insertOrUpdateFlatRate(payload);\n    } else {\n      insertOrUpdateFlatRate(payload);\n    }\n  };\n\n  useEffect(() => {\n    if (flat_rate) {\n      reset({\n        ...flat_rate,\n        flat_rate_type: actTypeOptions.find(option => option?.id === flat_rate.flat_rate_type?.id),\n        account_id: countsDropdownOptions?.find(count => count?.id === flat_rate.account?.id),\n        court_account_id: countsDropdownOptions?.find(count => count?.id === flat_rate.court_account?.id),\n        decision_date: new Date(flat_rate.decision_date),\n        payment_deadline_date: new Date(flat_rate.payment_deadline_date),\n        execution_date: new Date(flat_rate.execution_date),\n      });\n    }\n  }, [flat_rate]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n  };\n\n  const insertOrUpdateFlatRate = async (payload: FlatRateForm) => {\n    // update flat rate\n    if (flat_rate && flat_rate.id) {\n      const updatedPayload = {...payload, id: flat_rate.id};\n\n      await insertFlatRate(\n        updatedPayload,\n        () => {\n          alert.success('Paušal uspješno izmijenjen');\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom izmjene paušala');\n        },\n      );\n      return;\n    }\n\n    // create flat rate\n    await insertFlatRate(\n      payload,\n      id => {\n        navigate(`/finance/fines-taxes/flat-rate/${id}`);\n        alert.success('Paušal uspješno kreiran');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom kreiranja paušala');\n      },\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Controller\n          name=\"flat_rate_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"VRSTA AKTA:\"\n              placeholder={'Odaberite vrstu akta'}\n              options={actTypeOptions}\n              isRequired\n              error={errors.flat_rate_type?.message}\n            />\n          )}\n        />\n        <Input {...register('subject')} label=\"SUBJEKAT:\" isRequired error={errors.subject?.message} />\n      </Row>\n      <Row>\n        <Input {...register('jmbg')} label=\"JMBG:\" isRequired error={errors.jmbg?.message} />\n        <Input {...register('residence')} label=\"PREBIVALIŠTE:\" isRequired error={errors.residence?.message} />\n      </Row>\n      <Row>\n        <Input\n          {...register('decision_number')}\n          label=\"BROJ RJEŠENJA / PRESUDE:\"\n          isRequired\n          error={errors.decision_number?.message}\n        />\n        <Controller\n          name={'decision_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM RJEŠENJA / PRESUDE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.decision_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('debit_reference_number')}\n          label=\"POZIV NA BROJ ZADUŽENJA:\"\n          isRequired\n          error={errors.debit_reference_number?.message}\n        />\n        <Input\n          {...register('payment_reference_number')}\n          label=\"POZIV NA BROJ ODOBRENJA:\"\n          isRequired\n          error={errors.payment_reference_number?.message}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('amount')}\n          label=\"VISINA PAUŠALA:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          isRequired\n          error={errors.amount?.message}\n        />\n        <Input\n          value={flat_rate?.flat_rate_details.amount_grace_period.toFixed(2)}\n          label={`2/3 PAUŠALA - UKOLIKO UPLATITE DO ${parseDate(\n            flat_rate?.flat_rate_details.amount_grace_period_due_date ?? null,\n          )}`}\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div style={{color: Theme.palette.gray300}}>€</div>}\n          disabled\n        />\n      </Row>\n      <Row>\n        <Controller\n          name=\"account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO:\"\n              placeholder={'Odaberite konto'}\n              options={countsDropdownOptions}\n              isRequired\n              error={errors.account_id?.message}\n            />\n          )}\n        />\n        <Input\n          {...register('court_costs')}\n          label=\"SUDSKI TROŠKOVI:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          style={{flexGrow: 1 / 2}}\n        />\n        <Controller\n          name=\"court_account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO ZA SUDSKE TROŠKOVE:\"\n              placeholder={'Odaberite konto za sudske troškove'}\n              options={countsDropdownOptions}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Controller\n          name={'payment_deadline_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"ROK ZA PLAĆANJE UKUPNOG TROŠKA POSTUPKA:\"\n              onChange={onChange}\n              isRequired\n              error={errors.payment_deadline_date?.message}\n            />\n          )}\n        />\n        <Controller\n          name={'execution_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI:\"\n              onChange={onChange}\n              isRequired\n              error={errors.execution_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input {...register('description')} label=\"OPIS:\" textarea />\n      </Row>\n\n      <Row>\n        <FileUpload\n          icon={null}\n          files={uploadedFile}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n        />\n        <FileList files={(flat_rate?.file && flat_rate?.file) ?? []} />\n      </Row>\n      <Footer>\n        <Button content=\"Odustani\" variant=\"secondary\" style={{width: 130}} onClick={() => reset()} />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={loading} />\n      </Footer>\n    </Container>\n  );\n};\n\nexport default FlatRateForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/paymentDetails/paymentDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4205,4208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4205,4208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5168,5169],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalID' is assigned a value but never used.","line":150,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":150,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":150,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":150,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Typography,\n  Table,\n  TableHead,\n  Dropdown,\n  Input,\n  Datepicker,\n  EditIconTwo,\n  Theme,\n  TrashIcon,\n  CheckIcon,\n  CloseIcon,\n} from 'client-library';\nimport {Amount, FinePaymentDetailsWrapper, LabeledDivider} from './styles.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {useEffect, useState} from 'react';\nimport {requiredError} from '../../../../constants.ts';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport useInsertFlatRatePayment from '../../../../services/graphQL/flatRate/flatRatePayments/useInsertFlatRatePayment.ts';\nimport useDeleteFlatRatePayment from '../../../../services/graphQL/flatRate/flatRatePayments/useDeleteFlatRatePayment.ts';\nimport {FlatRateDetails, FlatRateOverviewItem} from '../../../../types/graphQL/flatRate.ts';\nimport {FinePaymentMethods} from '../../fines/constants.tsx';\nimport useGetFlatRatePayments from '../../../../services/graphQL/flatRate/flatRatePayments/useGetFlatRatePayments.ts';\n\nconst singlePaymentSchema = yup.object().shape({\n  id: yup.number().required(requiredError),\n  payment_method: yup.object().shape({\n    id: yup.number().required(),\n    title: yup.string().required(requiredError),\n  }),\n  amount: yup.number().required(requiredError).min(1, 'Iznos mora biti veći od 0'),\n  payment_date: yup.date().required(requiredError),\n  receipt_number: yup.string().required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  originalID: yup.number().required(requiredError),\n  flat_rate_id: yup.number().required(),\n  created_at: yup.string().optional(),\n  updated_at: yup.string().optional(),\n  status: yup.object().shape({\n    id: yup.number().optional(),\n    title: yup.string().optional(),\n  }),\n});\n\nconst paymentsSchema = yup.object().shape({\n  payments: yup.array().of(singlePaymentSchema),\n});\n\ntype PaymentEntryForm = yup.InferType<typeof paymentsSchema>;\ntype PaymentRow = yup.InferType<typeof singlePaymentSchema>;\n\ninterface PaymentFormProps {\n  flat_rate: FlatRateOverviewItem;\n  refetchFlatRate: () => Promise<void>;\n}\nconst PaymentDetails = ({flat_rate, refetchFlatRate}: PaymentFormProps) => {\n  const flatRateDetails: FlatRateDetails = flat_rate?.flat_rate_details;\n  const {payments, refetch} = useGetFlatRatePayments(flat_rate?.id);\n  const {insertFlatRatePayment} = useInsertFlatRatePayment();\n  const {deleteFlatRatePayment} = useDeleteFlatRatePayment();\n  const {alert} = useAppContext();\n\n  const [editRowId, setEditRowId] = useState<number | null>(null);\n  const [showDeletePaymentModal, setShowDeletePaymentModal] = useState<number | null>(null);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    formState: {errors},\n    setError,\n  } = useForm<PaymentEntryForm>({});\n\n  const {fields, append, remove} = useFieldArray({name: 'payments', control});\n  const appendLastRow = () =>\n    append({\n      id: 0,\n      payment_method: {\n        id: 0,\n        title: '',\n      },\n      amount: 0,\n      payment_date: new Date(),\n      receipt_number: '',\n      payment_reference_number: '',\n      debit_reference_number: '',\n      originalID: 0,\n      flat_rate_id: flat_rate.id,\n      status: {\n        id: 0,\n        title: '',\n      },\n    });\n\n  useEffect(() => {\n    remove();\n    if (payments.length) {\n      payments.forEach(payment => {\n        append({\n          ...payment,\n          // need to save original id to be able to edit/delete the payment because useFieldArray will change it\n          originalID: payment.id,\n          payment_method: FinePaymentMethods.find(method => method.title === payment.payment_method.title) ?? {\n            id: 0,\n            title: '',\n          },\n          payment_date: new Date(payment?.payment_date),\n        });\n      });\n      appendLastRow();\n      return;\n    }\n\n    appendLastRow();\n  }, [payments]);\n\n  const isRowDisabled = (row: any) => {\n    return editRowId ? editRowId !== row.originalID : !!row.originalID;\n  };\n\n  const validateSingleRow = async (rowData: PaymentRow, id: number) => {\n    try {\n      // Validate using Yup directly\n      await singlePaymentSchema.validate(rowData, {abortEarly: false});\n      return true; // Validation passed\n    } catch (err) {\n      if (err instanceof yup.ValidationError) {\n        err.inner.forEach(error => {\n          setError(`payments.${id}.${error.path}` as never, {type: 'manual', message: error.message});\n        });\n      }\n    }\n  };\n\n  const handleSubmitPayment = async (data: PaymentEntryForm) => {\n    if (data.payments?.length) {\n      const test = data.payments?.findIndex(item => item.originalID === editRowId);\n      const selectedRow = test != -1 ? test : fields.length - 1;\n\n      const isValid = await validateSingleRow(data?.payments[selectedRow], selectedRow);\n\n      if (!isValid) return;\n\n      const payment = data.payments![selectedRow];\n      const {originalID, created_at, updated_at, status, ...updatedPayment} = payment;\n      const parsedPaymentDate = parseDateForBackend(payment.payment_date);\n      if (!parsedPaymentDate) return;\n\n      const payload = {\n        ...updatedPayment,\n        payment_method: payment.payment_method.id,\n        payment_date: parsedPaymentDate,\n      };\n      await insertFlatRatePayment(\n        payload,\n        () => {\n          refetch();\n          refetchFlatRate();\n          alert.success('Uspješno sačuvano.');\n          setEditRowId(null);\n        },\n        () => alert?.error('Greška. Promjene nisu sačuvane.'),\n      );\n    }\n  };\n\n  const handleDeletePayment = async () => {\n    const paymentIndex = payments.findIndex(payment => payment.id === showDeletePaymentModal);\n    if (!showDeletePaymentModal || paymentIndex === -1) return;\n    await deleteFlatRatePayment(\n      showDeletePaymentModal,\n      () => {\n        remove(paymentIndex);\n        refetchFlatRate();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeletePaymentModal(null);\n  };\n\n  const tableHeadsPayments: TableHead[] = [\n    {\n      title: 'Način plaćanja',\n      accessor: 'payment_method',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_method`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Dropdown\n                style={{width: '180px'}}\n                name={name}\n                onChange={onChange}\n                value={value ?? FinePaymentMethods.find(method => method.title === value)}\n                options={FinePaymentMethods}\n                isDisabled={isRowDisabled(row)}\n                error={isRowDisabled(row) ? '' : errors?.payments?.[index]?.payment_method?.title?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.amount`)}\n            type=\"number\"\n            leftContent={\n              <div style={{color: isRowDisabled(row) ? Theme.palette.gray300 : Theme.palette.gray800}}>€</div>\n            }\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Datum uplate',\n      accessor: 'payment_date',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_date`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Datepicker\n                name={name}\n                onChange={onChange}\n                selected={value ? new Date(value) : ''}\n                disabled={isRowDisabled(row)}\n                error={errors?.payments?.[index]?.payment_date?.message}\n                popperProps={{\n                  strategy: 'fixed', // fixes datepicker going behind other elements\n                  placement: 'top',\n                }}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Broj izvoda',\n      accessor: 'receipt_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.receipt_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.receipt_number?.message}\n            key={`payments.${index}.receipt_number`}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj odobrenja',\n      accessor: 'payment_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.payment_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.payment_reference_number?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj zaduženja',\n      accessor: 'debit_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.debit_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.debit_reference_number?.message}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  return (\n    <>\n      <Amount style={{marginTop: 10}}>\n        <Typography style={{fontWeight: 600, marginBottom: 10}} variant={'bodySmall'} content={'Platiti do:'} />\n        <Typography variant=\"bodySmall\" content={parseDate(flat_rate?.payment_deadline_date)} />\n      </Amount>\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"DETALJI PLAĆANJA:\" />\n      </LabeledDivider>\n      <Table\n        tableHeads={tableHeadsPayments}\n        data={fields}\n        tableActions={[\n          {\n            name: 'Otkaži',\n            onClick: () => setEditRowId(null),\n            icon: <CloseIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Plati',\n\n            onClick: handleSubmit(handleSubmitPayment),\n            icon: <CheckIcon stroke={Theme?.palette?.gray800} width={'20px'} height={'20px'} />,\n            shouldRender: row => !isRowDisabled(row) || !row.originalID,\n          },\n          {\n            name: 'Izmijeni',\n            onClick: row => setEditRowId(row.originalID),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Izbriši',\n            onClick: row => setShowDeletePaymentModal(row.originalID),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !!row.originalID && (!editRowId || editRowId !== row.originalID),\n          },\n        ]}\n      />\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPNO:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={`${flatRateDetails?.all_payments_amount + flatRateDetails?.court_costs_paid} €`}\n          />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      {/*<Amount>*/}\n      {/*  <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREMAŠEN IZNOS:\" />*/}\n      {/*  <Typography variant=\"bodySmall\" content={`${fine?.amount} €`} />*/}\n      {/*</Amount>*/}\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREGLED PLAĆANJA:\" />\n      </LabeledDivider>\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${flat_rate?.amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${flatRateDetails?.all_payments_amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UMANJENJE KAZNE:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={\n              flatRateDetails?.amount_grace_period_available\n                ? roundCurrency(flat_rate?.amount - flatRateDetails?.amount_grace_period)\n                : '0.00 €'\n            }\n          />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(flatRateDetails?.left_to_pay_amount)} />\n        </Amount>\n        <Amount style={{marginTop: 20}}>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${flat_rate?.court_costs} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${flatRateDetails?.court_costs_paid} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(flatRateDetails?.court_costs_left_to_pay_amount)} />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      <ConfirmationModal\n        open={!!showDeletePaymentModal}\n        subTitle={'Ova uplata će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeletePaymentModal(null)}\n        onConfirm={() => handleDeletePayment()}\n      />\n    </>\n  );\n};\n\nexport default PaymentDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/paymentDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/paymentDetails/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/flatRate/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/landingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/addProceduralCosts/addProceduralCosts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/addProceduralCosts/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/form/proceduralCostForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3446,3449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3446,3449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is assigned a value but never used.","line":82,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'court_account' is assigned a value but never used.","line":82,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":82,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":82,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":82,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":82,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'procedure_cost_details' is assigned a value but never used.","line":82,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":96},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4279,4282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4279,4282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Datepicker, Input, Typography, FileUpload, Button, Theme} from 'client-library';\nimport {Container, Row} from '../../taxes/addFee/styles.ts';\nimport {actTypeOptions, generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport Footer from '../../../../shared/footer.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList.tsx';\nimport {optionsNumberSchema} from '../../../../utils/formSchemas.ts';\nimport {ProceduralCostOverviewItem, ProceduralCostsForm} from '../../../../types/graphQL/proceduralCosts.ts';\nimport useInsertProceduralCost from '../../../../services/graphQL/proceduralCosts/useInsertProceduralCost.ts';\n\nconst proceduralCostSchema = yup.object().shape({\n  procedure_cost_type: optionsNumberSchema.required(requiredError).default(null),\n  decision_number: yup.string().required(requiredError),\n  decision_date: yup.date().required(requiredError),\n  subject: yup.string().required(requiredError),\n  jmbg: yup\n    .string()\n    .matches(/^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])(\\d{3})(2[1-9]|29)\\d{3}\\d{1}$/, 'Neispravan JMBG format')\n    .length(13, 'JMBG mora da ima 13 cifara')\n    .required(requiredError),\n  account_id: optionsNumberSchema.required(requiredError).default(null),\n  residence: yup.string().required(requiredError),\n  amount: yup.number().typeError('Morate unijeti broj').required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  execution_date: yup.date().required(requiredError),\n  payment_deadline_date: yup.date().required(requiredError),\n  court_costs: yup.number().optional(),\n  description: yup.string(),\n  court_account_id: optionsNumberSchema.nullable().default(null),\n});\n\nconst defaultValues = {\n  procedure_cost_type: undefined,\n  decision_number: '',\n  decision_date: undefined,\n  subject: '',\n  jmbg: '',\n  account_id: undefined,\n  residence: '',\n  amount: 0,\n  payment_reference_number: '',\n  debit_reference_number: '',\n  execution_date: undefined,\n  payment_deadline_date: undefined,\n  court_costs: 0,\n  description: '',\n  court_account_id: undefined,\n};\n\ntype ProceduralCostEntryForm = yup.InferType<typeof proceduralCostSchema>;\ninterface ProceduralCostFormProps {\n  procedural_cost?: ProceduralCostOverviewItem;\n}\nconst ProceduralCostForm = ({procedural_cost}: ProceduralCostFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n  } = useForm<ProceduralCostEntryForm>({resolver: yupResolver(proceduralCostSchema), defaultValues: defaultValues});\n  const [uploadedFile, setUploadedFile] = useState<FileList>();\n  const {counts} = useGetCountOverview({});\n  const {insertProceduralCost, loading} = useInsertProceduralCost();\n  const {\n    alert,\n    fileService: {uploadFile},\n    navigation: {navigate},\n  } = useAppContext();\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n  const onSubmit = async (data: any) => {\n    const {account, court_account, created_at, updated_at, file, status, procedure_cost_details, ...rest} = data;\n    let payload: ProceduralCostsForm = {\n      ...rest,\n      amount: Number(data.amount),\n      court_costs: Number(data.court_costs),\n      procedure_cost_type: data.procedure_cost_type.id,\n      account_id: data.account_id.id,\n      court_account_id: data.court_account_id?.id,\n      decision_date: parseDateForBackend(data.decision_date),\n      execution_date: parseDateForBackend(data.execution_date),\n      payment_deadline_date: parseDateForBackend(data.payment_deadline_date),\n    };\n\n    if (uploadedFile) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFile);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFile(undefined);\n          payload = {...payload, file: [res[0]?.id]};\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n\n      insertOrUpdateProceduralCost(payload);\n    } else {\n      insertOrUpdateProceduralCost(payload);\n    }\n  };\n\n  useEffect(() => {\n    if (procedural_cost) {\n      reset({\n        ...procedural_cost,\n        procedure_cost_type: actTypeOptions.find(option => option?.id === procedural_cost.procedure_cost_type?.id),\n        account_id: countsDropdownOptions?.find(count => count?.id === procedural_cost.account?.id),\n        court_account_id: countsDropdownOptions?.find(count => count?.id === procedural_cost.court_account?.id),\n        decision_date: new Date(procedural_cost.decision_date),\n        payment_deadline_date: new Date(procedural_cost.payment_deadline_date),\n        execution_date: new Date(procedural_cost.execution_date),\n      });\n    }\n  }, [procedural_cost]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n  };\n\n  const insertOrUpdateProceduralCost = async (payload: ProceduralCostsForm) => {\n    // update procedural cost\n    if (procedural_cost && procedural_cost.id) {\n      const updatedPayload = {...payload, id: procedural_cost.id};\n\n      await insertProceduralCost(\n        updatedPayload,\n        () => {\n          alert.success('Trošak postupka uspješno izmijenjen');\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom izmjene troška postupka');\n        },\n      );\n      return;\n    }\n\n    // create procedural cost\n    await insertProceduralCost(\n      payload,\n      id => {\n        navigate(`/finance/fines-taxes/procedural-costs/${id}`);\n        alert.success('Trošak postupka uspješno kreiran');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom kreiranja troška postupka');\n      },\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Controller\n          name=\"procedure_cost_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"VRSTA AKTA:\"\n              placeholder={'Odaberite vrstu akta'}\n              options={actTypeOptions}\n              isRequired\n              error={errors.procedure_cost_type?.message}\n            />\n          )}\n        />\n        <Input {...register('subject')} label=\"SUBJEKAT:\" isRequired error={errors.subject?.message} />\n      </Row>\n      <Row>\n        <Input {...register('jmbg')} label=\"JMBG:\" isRequired error={errors.jmbg?.message} />\n        <Input {...register('residence')} label=\"PREBIVALIŠTE:\" isRequired error={errors.residence?.message} />\n      </Row>\n      <Row>\n        <Input\n          {...register('decision_number')}\n          label=\"BROJ RJEŠENJA / PRESUDE:\"\n          isRequired\n          error={errors.decision_number?.message}\n        />\n        <Controller\n          name={'decision_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM RJEŠENJA / PRESUDE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.decision_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('debit_reference_number')}\n          label=\"POZIV NA BROJ ZADUŽENJA:\"\n          isRequired\n          error={errors.debit_reference_number?.message}\n        />\n        <Input\n          {...register('payment_reference_number')}\n          label=\"POZIV NA BROJ ODOBRENJA:\"\n          isRequired\n          error={errors.payment_reference_number?.message}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('amount')}\n          label=\"VISINA TROŠKA POSTUPKA:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          isRequired\n          error={errors.amount?.message}\n        />\n        <Input\n          value={procedural_cost?.procedure_cost_details.amount_grace_period.toFixed(2)}\n          label={`2/3 TROŠKA POSTUPKA - UKOLIKO UPLATITE DO ${parseDate(\n            procedural_cost?.procedure_cost_details.amount_grace_period_due_date ?? null,\n          )}`}\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div style={{color: Theme.palette.gray300}}>€</div>}\n          disabled\n        />\n      </Row>\n      <Row>\n        <Controller\n          name=\"account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO:\"\n              placeholder={'Odaberite konto'}\n              options={countsDropdownOptions}\n              isRequired\n              error={errors.account_id?.message}\n            />\n          )}\n        />\n        <Input\n          {...register('court_costs')}\n          label=\"SUDSKI TROŠKOVI:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          style={{flexGrow: 1 / 2}}\n        />\n        <Controller\n          name=\"court_account_id\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO ZA SUDSKE TROŠKOVE:\"\n              placeholder={'Odaberite konto za sudske troškove'}\n              options={countsDropdownOptions}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Controller\n          name={'payment_deadline_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"ROK ZA PLAĆANJE UKUPNOG TROŠKA POSTUPKA:\"\n              onChange={onChange}\n              isRequired\n              error={errors.payment_deadline_date?.message}\n            />\n          )}\n        />\n        <Controller\n          name={'execution_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI:\"\n              onChange={onChange}\n              isRequired\n              error={errors.execution_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input {...register('description')} label=\"OPIS:\" textarea />\n      </Row>\n\n      <Row>\n        <FileUpload\n          icon={null}\n          files={uploadedFile}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n        />\n        <FileList files={(procedural_cost?.file && procedural_cost?.file) ?? []} />\n      </Row>\n      <Footer>\n        <Button content=\"Odustani\" variant=\"secondary\" style={{width: 130}} onClick={() => reset()} />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={loading} />\n      </Footer>\n    </Container>\n  );\n};\n\nexport default ProceduralCostForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/paymentDetails/paymentDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4407,4410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4407,4410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5370,5371],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalID' is assigned a value but never used.","line":150,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":150,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":150,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":150,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Typography,\n  Table,\n  TableHead,\n  Dropdown,\n  Input,\n  Datepicker,\n  EditIconTwo,\n  Theme,\n  TrashIcon,\n  CheckIcon,\n  CloseIcon,\n} from 'client-library';\nimport {Amount, FinePaymentDetailsWrapper, LabeledDivider} from './styles.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {useEffect, useState} from 'react';\nimport {requiredError} from '../../../../constants.ts';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport useInsertProceduralCostPayment from '../../../../services/graphQL/proceduralCosts/proceduralCostsPayments/useInsertProceduralCostPayment.ts';\nimport useDeleteProceduralCostPayment from '../../../../services/graphQL/proceduralCosts/proceduralCostsPayments/useDeleteProceduralCostPayment.ts';\nimport {ProceduralCostDetails, ProceduralCostOverviewItem} from '../../../../types/graphQL/proceduralCosts.ts';\nimport {FinePaymentMethods} from '../../fines/constants.tsx';\nimport useGetProceduralCostPayments from '../../../../services/graphQL/proceduralCosts/proceduralCostsPayments/useGetProceduralCostPayments.ts';\n\nconst singlePaymentSchema = yup.object().shape({\n  id: yup.number().required(requiredError),\n  payment_method: yup.object().shape({\n    id: yup.number().required(),\n    title: yup.string().required(requiredError),\n  }),\n  amount: yup.number().required(requiredError).min(1, 'Iznos mora biti veći od 0'),\n  payment_date: yup.date().required(requiredError),\n  receipt_number: yup.string().required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  originalID: yup.number().required(requiredError),\n  procedure_cost_id: yup.number().required(),\n  created_at: yup.string().optional(),\n  updated_at: yup.string().optional(),\n  status: yup.object().shape({\n    id: yup.number().optional(),\n    title: yup.string().optional(),\n  }),\n});\n\nconst paymentsSchema = yup.object().shape({\n  payments: yup.array().of(singlePaymentSchema),\n});\n\ntype PaymentEntryForm = yup.InferType<typeof paymentsSchema>;\ntype PaymentRow = yup.InferType<typeof singlePaymentSchema>;\n\ninterface PaymentFormProps {\n  procedural_cost: ProceduralCostOverviewItem;\n  refetchProceduralCost: () => Promise<void>;\n}\nconst PaymentDetails = ({procedural_cost, refetchProceduralCost}: PaymentFormProps) => {\n  const proceduralCostDetails: ProceduralCostDetails = procedural_cost?.procedure_cost_details;\n  const {payments, refetch} = useGetProceduralCostPayments(procedural_cost?.id);\n  const {insertProceduralCostPayment} = useInsertProceduralCostPayment();\n  const {deleteProceduralCostPayment} = useDeleteProceduralCostPayment();\n  const {alert} = useAppContext();\n\n  const [editRowId, setEditRowId] = useState<number | null>(null);\n  const [showDeletePaymentModal, setShowDeletePaymentModal] = useState<number | null>(null);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    formState: {errors},\n    setError,\n  } = useForm<PaymentEntryForm>({});\n\n  const {fields, append, remove} = useFieldArray({name: 'payments', control});\n  const appendLastRow = () =>\n    append({\n      id: 0,\n      payment_method: {\n        id: 0,\n        title: '',\n      },\n      amount: 0,\n      payment_date: new Date(),\n      receipt_number: '',\n      payment_reference_number: '',\n      debit_reference_number: '',\n      originalID: 0,\n      procedure_cost_id: procedural_cost.id,\n      status: {\n        id: 0,\n        title: '',\n      },\n    });\n\n  useEffect(() => {\n    remove();\n    if (payments.length) {\n      payments.forEach(payment => {\n        append({\n          ...payment,\n          // need to save original id to be able to edit/delete the payment because useFieldArray will change it\n          originalID: payment.id,\n          payment_method: FinePaymentMethods.find(method => method.title === payment.payment_method.title) ?? {\n            id: 0,\n            title: '',\n          },\n          payment_date: new Date(payment?.payment_date),\n        });\n      });\n      appendLastRow();\n      return;\n    }\n\n    appendLastRow();\n  }, [payments]);\n\n  const isRowDisabled = (row: any) => {\n    return editRowId ? editRowId !== row.originalID : !!row.originalID;\n  };\n\n  const validateSingleRow = async (rowData: PaymentRow, id: number) => {\n    try {\n      // Validate using Yup directly\n      await singlePaymentSchema.validate(rowData, {abortEarly: false});\n      return true; // Validation passed\n    } catch (err) {\n      if (err instanceof yup.ValidationError) {\n        err.inner.forEach(error => {\n          setError(`payments.${id}.${error.path}` as never, {type: 'manual', message: error.message});\n        });\n      }\n    }\n  };\n\n  const handleSubmitPayment = async (data: PaymentEntryForm) => {\n    if (data.payments?.length) {\n      const test = data.payments?.findIndex(item => item.originalID === editRowId);\n      const selectedRow = test != -1 ? test : fields.length - 1;\n\n      const isValid = await validateSingleRow(data?.payments[selectedRow], selectedRow);\n\n      if (!isValid) return;\n\n      const payment = data.payments![selectedRow];\n      const {originalID, created_at, updated_at, status, ...updatedPayment} = payment;\n      const parsedPaymentDate = parseDateForBackend(payment.payment_date);\n      if (!parsedPaymentDate) return;\n\n      const payload = {\n        ...updatedPayment,\n        payment_method: payment.payment_method.id,\n        payment_date: parsedPaymentDate,\n      };\n      await insertProceduralCostPayment(\n        payload,\n        () => {\n          refetch();\n          refetchProceduralCost();\n          alert.success('Uspješno sačuvano.');\n          setEditRowId(null);\n        },\n        () => alert?.error('Greška. Promjene nisu sačuvane.'),\n      );\n    }\n  };\n\n  const handleDeletePayment = async () => {\n    const paymentIndex = payments.findIndex(payment => payment.id === showDeletePaymentModal);\n    if (!showDeletePaymentModal || paymentIndex === -1) return;\n    await deleteProceduralCostPayment(\n      showDeletePaymentModal,\n      () => {\n        remove(paymentIndex);\n        refetchProceduralCost();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeletePaymentModal(null);\n  };\n\n  const tableHeadsPayments: TableHead[] = [\n    {\n      title: 'Način plaćanja',\n      accessor: 'payment_method',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_method`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Dropdown\n                style={{width: '180px'}}\n                name={name}\n                onChange={onChange}\n                value={value ?? FinePaymentMethods.find(method => method.title === value)}\n                options={FinePaymentMethods}\n                isDisabled={isRowDisabled(row)}\n                error={isRowDisabled(row) ? '' : errors?.payments?.[index]?.payment_method?.title?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.amount`)}\n            type=\"number\"\n            leftContent={\n              <div style={{color: isRowDisabled(row) ? Theme.palette.gray300 : Theme.palette.gray800}}>€</div>\n            }\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Datum uplate',\n      accessor: 'payment_date',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_date`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Datepicker\n                name={name}\n                onChange={onChange}\n                selected={value ? new Date(value) : ''}\n                disabled={isRowDisabled(row)}\n                error={errors?.payments?.[index]?.payment_date?.message}\n                popperProps={{\n                  strategy: 'fixed', // fixes datepicker going behind other elements\n                  placement: 'top',\n                }}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Broj izvoda',\n      accessor: 'receipt_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.receipt_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.receipt_number?.message}\n            key={`payments.${index}.receipt_number`}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj odobrenja',\n      accessor: 'payment_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.payment_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.payment_reference_number?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj zaduženja',\n      accessor: 'debit_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.debit_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.debit_reference_number?.message}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  return (\n    <>\n      <Amount style={{marginTop: 10}}>\n        <Typography style={{fontWeight: 600, marginBottom: 10}} variant={'bodySmall'} content={'Platiti do:'} />\n        <Typography variant=\"bodySmall\" content={parseDate(procedural_cost?.payment_deadline_date)} />\n      </Amount>\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"DETALJI PLAĆANJA:\" />\n      </LabeledDivider>\n      <Table\n        tableHeads={tableHeadsPayments}\n        data={fields}\n        tableActions={[\n          {\n            name: 'Otkaži',\n            onClick: () => setEditRowId(null),\n            icon: <CloseIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Plati',\n\n            onClick: handleSubmit(handleSubmitPayment),\n            icon: <CheckIcon stroke={Theme?.palette?.gray800} width={'20px'} height={'20px'} />,\n            shouldRender: row => !isRowDisabled(row) || !row.originalID,\n          },\n          {\n            name: 'Izmijeni',\n            onClick: row => setEditRowId(row.originalID),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Izbriši',\n            onClick: row => setShowDeletePaymentModal(row.originalID),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !!row.originalID && (!editRowId || editRowId !== row.originalID),\n          },\n        ]}\n      />\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPNO:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={`${proceduralCostDetails?.all_payments_amount + proceduralCostDetails?.court_costs_paid} €`}\n          />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      {/*<Amount>*/}\n      {/*  <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREMAŠEN IZNOS:\" />*/}\n      {/*  <Typography variant=\"bodySmall\" content={`${fine?.amount} €`} />*/}\n      {/*</Amount>*/}\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREGLED PLAĆANJA:\" />\n      </LabeledDivider>\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${procedural_cost?.amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENA KAZNA:\" />\n          <Typography variant=\"bodySmall\" content={`${proceduralCostDetails?.all_payments_amount} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UMANJENJE KAZNE:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={\n              proceduralCostDetails?.amount_grace_period_available\n                ? roundCurrency(procedural_cost?.amount - proceduralCostDetails?.amount_grace_period)\n                : '0.00 €'\n            }\n          />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(proceduralCostDetails?.left_to_pay_amount)} />\n        </Amount>\n        <Amount style={{marginTop: 20}}>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"IZREČENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${procedural_cost?.court_costs} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UPLAĆENI SUDSKI TROŠKOVI:\" />\n          <Typography variant=\"bodySmall\" content={`${proceduralCostDetails?.court_costs_paid} €`} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography\n            variant=\"bodySmall\"\n            content={roundCurrency(proceduralCostDetails?.court_costs_left_to_pay_amount)}\n          />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      <ConfirmationModal\n        open={!!showDeletePaymentModal}\n        subTitle={'Ova uplata će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeletePaymentModal(null)}\n        onConfirm={() => handleDeletePayment()}\n      />\n    </>\n  );\n};\n\nexport default PaymentDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/paymentDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/paymentDetails/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/proceduralCostDetails/proceduralCostDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/proceduralCosts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/proceduralCostsOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2217,2220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2217,2220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2701,2704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2701,2704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {PAGE_SIZE} from '../../../constants.ts';\nimport {FilterInput} from '../../accounting/styles.tsx';\nimport {FilterDropdown, Filters} from '../../budget/planning/budgetList/styles.ts';\nimport {tableHeadsProceduralCostsOverview} from './constants.tsx';\nimport {Header} from './styles.ts';\nimport {useState} from 'react';\nimport {useDebounce} from '../../../utils/useDebounce.ts';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport useGetProceduralCosts from '../../../services/graphQL/proceduralCosts/useGetProceduralCosts.ts';\nimport useDeleteProceduralCost from '../../../services/graphQL/proceduralCosts/useDeleteProceduralCost.ts';\nimport {defaultDropdownOption, TypeOfFines} from '../fines/constants.tsx';\nimport {ConfirmationModal} from '../../../shared/confirmationModal/confirmationModal.tsx';\nimport {ProceduralCostOverviewItem} from '../../../types/graphQL/proceduralCosts.ts';\n\nconst initialValues = {\n  procedure_cost_type_id: defaultDropdownOption.id,\n};\n\nconst ProceduralCostsOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [search, setSearch] = useState('');\n  const [showDeleteProceduralCostModal, setShowDeleteProceduralCostModal] = useState<number | null>(null);\n\n  const debouncedSearch = useDebounce(search, 500);\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n\n  const {proceduralCosts, total, refetch, loading} = useGetProceduralCosts({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n    search: debouncedSearch,\n  });\n  const {deleteProceduralCost} = useDeleteProceduralCost();\n\n  const handleDeleteProceduralCost = async () => {\n    if (!showDeleteProceduralCostModal) return;\n    await deleteProceduralCost(\n      showDeleteProceduralCostModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeleteProceduralCostModal(null);\n  };\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const filterDropdownOptions = [defaultDropdownOption, ...TypeOfFines] || [];\n\n  return (\n    <>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            name=\"procedure_cost_type_id\"\n            value={filterDropdownOptions.find(option => option.id === filters?.procedure_cost_type_id)}\n            onChange={(value: any) => onFilterChange(value, 'procedure_cost_type_id')}\n            label=\"VRSTA TROŠKOVA POSTUPKA:\"\n            options={filterDropdownOptions}\n          />\n\n          <FilterInput\n            label=\"PRETRAGA:\"\n            rightContent={<SearchIcon />}\n            name=\"search\"\n            onChange={onSearch}\n            value={search}\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={tableHeadsProceduralCostsOverview}\n        data={proceduralCosts}\n        isLoading={loading}\n        style={{marginBottom: 22}}\n        emptyMessage={'Još uvjek nema troškova postupka.'}\n        onRowClick={(row: ProceduralCostOverviewItem) => navigate(`/finance/fines-taxes/procedural-costs/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteProceduralCostModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteProceduralCostModal}\n        subTitle={'Ovaj trošak postupka će biti trajno izbrisan iz sistema.'}\n        onClose={() => setShowDeleteProceduralCostModal(null)}\n        onConfirm={() => handleDeleteProceduralCost()}\n      />\n    </>\n  );\n};\n\nexport default ProceduralCostsOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/proceduralCosts/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/addFee/addFee.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/addFee/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/feeDetails/feeDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/form/feeForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3195,3198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3195,3198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is assigned a value but never used.","line":82,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'court_account' is assigned a value but never used.","line":82,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":82,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":82,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is assigned a value but never used.","line":82,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":82,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fee_details' is assigned a value but never used.","line":82,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":85},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3951,3954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3951,3954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Controller, useForm} from 'react-hook-form';\nimport {Dropdown, Datepicker, Input, Typography, FileUpload, Button} from 'client-library';\nimport {Container, Row} from './styles.ts';\nimport {feeSubcategoryOptions, feeTypeOptions, generateDropdownOptions, requiredError} from '../../../../constants.ts';\nimport {useEffect, useMemo, useState} from 'react';\nimport Footer from '../../../../shared/footer.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport FileList from '../../../../components/fileList/fileList.tsx';\nimport {optionsNumberSchema} from '../../../../utils/formSchemas.ts';\nimport {FeeInsertParams} from '../../../../types/graphQL/fees.ts';\nimport useInsertFee from '../../../../services/graphQL/fees/useInsertFee.ts';\nimport {Fee} from '../constants.tsx';\n\nconst feeSchema = yup.object().shape({\n  fee_type: optionsNumberSchema.required(requiredError).default(null),\n  fee_subcategory: optionsNumberSchema.required(requiredError).default(null),\n  decision_number: yup.string().required(requiredError),\n  decision_date: yup.date().required(requiredError),\n  subject: yup.string().required(requiredError),\n  jmbg: yup\n    .string()\n    .matches(/^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])(\\d{3})(2[1-9]|29)\\d{3}\\d{1}$/, 'Neispravan JMBG format')\n    .length(13, 'JMBG mora da ima 13 cifara')\n    .required(requiredError),\n  residence: yup.string().required(requiredError),\n  amount: yup.number().typeError('Morate unijeti broj').required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  execution_date: yup.date().required(requiredError),\n  payment_deadline_date: yup.date().required(requiredError),\n  description: yup.string(),\n  court_account: optionsNumberSchema.nullable().default(null),\n});\n\nconst defaultValues = {\n  fee_type: undefined,\n  fee_subcategory: undefined,\n  decision_number: '',\n  decision_date: undefined,\n  subject: '',\n  jmbg: '',\n  account_id: undefined,\n  residence: '',\n  amount: 0,\n  payment_reference_number: '',\n  debit_reference_number: '',\n  execution_date: undefined,\n  payment_deadline_date: undefined,\n  description: '',\n  court_account: undefined,\n};\n\ntype FeeEntryForm = yup.InferType<typeof feeSchema>;\nexport interface FeeFormProps {\n  fee?: Fee;\n}\nconst FeeForm = ({fee}: FeeFormProps) => {\n  const {\n    control,\n    register,\n    handleSubmit,\n    reset,\n    formState: {errors},\n  } = useForm<FeeEntryForm>({resolver: yupResolver(feeSchema), defaultValues: defaultValues});\n  const [uploadedFile, setUploadedFile] = useState<FileList>();\n  const {counts} = useGetCountOverview({});\n  const {insertFee, loading} = useInsertFee();\n  const {\n    alert,\n    fileService: {uploadFile},\n    navigation: {navigate},\n  } = useAppContext();\n\n  const countsDropdownOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n  const onSubmit = async (data: any) => {\n    const {account, court_account, created_at, updated_at, file, status, fee_details, ...rest} = data;\n    let payload: FeeInsertParams = {\n      ...rest,\n      amount: Number(data.amount),\n      fee_type: data.fee_type.id,\n      court_account: data.court_account?.id,\n      fee_subcategory: data.fee_subcategory?.id,\n      decision_date: parseDateForBackend(data.decision_date),\n      execution_date: parseDateForBackend(data.execution_date),\n      payment_deadline_date: parseDateForBackend(data.payment_deadline_date),\n    };\n\n    if (uploadedFile) {\n      const formData = new FormData();\n      const fileArray = Array.from(uploadedFile);\n\n      formData.append('file', fileArray[0]);\n\n      await uploadFile(\n        formData,\n        (res: any) => {\n          setUploadedFile(undefined);\n          payload = {...payload, file: [res[0]?.id]};\n        },\n        () => {\n          alert.error('Greška pri čuvanju! Fajlovi nisu učitani.');\n          return;\n        },\n      );\n\n      insertOrUpdateFee(payload);\n    } else {\n      insertOrUpdateFee(payload);\n    }\n  };\n\n  useEffect(() => {\n    if (fee) {\n      reset({\n        ...fee,\n        fee_type: feeTypeOptions.find(option => option?.id === fee.fee_type?.id),\n        fee_subcategory: feeSubcategoryOptions.find(option => option?.id === fee.fee_type?.id),\n        court_account: countsDropdownOptions?.find(count => count?.id === fee.court_account?.id),\n        decision_date: new Date(fee.decision_date),\n        payment_deadline_date: new Date(fee.payment_deadline_date),\n        execution_date: new Date(fee.execution_date),\n      });\n    }\n  }, [fee]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n  };\n\n  const insertOrUpdateFee = async (payload: FeeInsertParams) => {\n    // update fee\n    if (fee && fee.id) {\n      const updatedPayload = {...payload, id: fee.id};\n\n      await insertFee(\n        updatedPayload,\n        () => {\n          alert.success('Taksa uspješno izmijenjena');\n        },\n        () => {\n          alert.error('Došlo je do greške prilikom izmjene takse');\n        },\n      );\n      return;\n    }\n\n    // create fee\n    await insertFee(\n      payload,\n      id => {\n        navigate(`/finance/fines-taxes/fines/${id}`);\n        alert.success('Taksa uspješno kreirana');\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom kreiranja takse');\n      },\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Controller\n          name=\"fee_type\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"VRSTA TAKSE:\"\n              placeholder={'Odaberite vrstu takse'}\n              options={feeTypeOptions}\n              isRequired\n              error={errors.fee_type?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"fee_subcategory\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"POTKATEGORIJA TAKSE:\"\n              placeholder={'Odaberite potkategoriju takse'}\n              options={feeSubcategoryOptions}\n              isRequired\n              error={errors.fee_subcategory?.message}\n            />\n          )}\n        />\n        <Input {...register('subject')} label=\"SUBJEKAT:\" isRequired error={errors.subject?.message} />\n      </Row>\n      <Row>\n        <Input {...register('jmbg')} label=\"JMBG:\" isRequired error={errors.jmbg?.message} />\n        <Input {...register('residence')} label=\"PREBIVALIŠTE:\" isRequired error={errors.residence?.message} />\n      </Row>\n      <Row>\n        <Input\n          {...register('decision_number')}\n          label=\"BROJ RJEŠENJA / PRESUDE:\"\n          isRequired\n          error={errors.decision_number?.message}\n        />\n        <Controller\n          name={'decision_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM RJEŠENJA / PRESUDE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.decision_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('debit_reference_number')}\n          label=\"POZIV NA BROJ ZADUŽENJA:\"\n          isRequired\n          error={errors.debit_reference_number?.message}\n        />\n        <Input\n          {...register('payment_reference_number')}\n          label=\"POZIV NA BROJ ODOBRENJA:\"\n          isRequired\n          error={errors.payment_reference_number?.message}\n        />\n      </Row>\n      <Row>\n        <Input\n          {...register('amount')}\n          label=\"VISINA TAKSE:\"\n          type={'number'}\n          inputMode={'decimal'}\n          leftContent={<div>€</div>}\n          isRequired\n          error={errors.amount?.message}\n        />\n        <Controller\n          name=\"court_account\"\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Dropdown\n              name={name}\n              value={value}\n              onChange={onChange}\n              label=\"KONTO:\"\n              placeholder={'Odaberite konto'}\n              options={countsDropdownOptions}\n              isRequired\n              error={errors.court_account?.message}\n            />\n          )}\n        />\n        {/*<Input*/}\n        {/*  value={fine?.fine_fee_details.fee_amount_grace_period.toFixed(2)}*/}\n        {/*  label={`2/3 KAZNE - UKOLIKO UPLATITE DO ${parseDate(*/}\n        {/*    fine?.fine_fee_details.fee_amount_grace_period_due_date ?? null,*/}\n        {/*  )}`}*/}\n        {/*  type={'number'}*/}\n        {/*  inputMode={'decimal'}*/}\n        {/*  leftContent={<div style={{color: Theme.palette.gray300}}>€</div>}*/}\n        {/*  disabled*/}\n        {/*/>*/}\n      </Row>\n      <Row>\n        <Controller\n          name={'payment_deadline_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"ROK ZA PLAĆANJE UKUPNE TAKSE:\"\n              onChange={onChange}\n              isRequired\n              error={errors.payment_deadline_date?.message}\n            />\n          )}\n        />\n        <Controller\n          name={'execution_date'}\n          control={control}\n          render={({field: {name, value, onChange}}) => (\n            <Datepicker\n              name={name}\n              selected={value ? new Date(value) : ''}\n              label=\"DATUM IZVRŠNOSTI:\"\n              onChange={onChange}\n              isRequired\n              error={errors.execution_date?.message}\n            />\n          )}\n        />\n      </Row>\n      <Row>\n        <Input {...register('description')} label=\"OPIS:\" textarea />\n      </Row>\n\n      <Row>\n        <FileUpload\n          icon={null}\n          files={uploadedFile}\n          variant=\"secondary\"\n          onUpload={handleUpload}\n          note={<Typography variant=\"bodySmall\" content=\"Dodaj fajl\" />}\n          buttonText=\"Učitaj\"\n        />\n        <FileList files={(fee?.file && fee?.file) ?? []} />\n      </Row>\n      <Footer>\n        <Button content=\"Odustani\" variant=\"secondary\" style={{width: 130}} onClick={() => reset()} />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} isLoading={loading} />\n      </Footer>\n    </Container>\n  );\n};\n\nexport default FeeForm;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/form/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/paymentDetails/paymentDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4011,4014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4011,4014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4974,4975],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'originalID' is assigned a value but never used.","line":150,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'created_at' is assigned a value but never used.","line":150,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updated_at' is assigned a value but never used.","line":150,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":150,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Typography,\n  Table,\n  TableHead,\n  Dropdown,\n  Input,\n  Datepicker,\n  EditIconTwo,\n  Theme,\n  TrashIcon,\n  CheckIcon,\n  CloseIcon,\n} from 'client-library';\nimport {Amount, FinePaymentDetailsWrapper, LabeledDivider} from './styles.ts';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport {useEffect, useState} from 'react';\nimport {requiredError} from '../../../../constants.ts';\nimport {roundCurrency} from '../../../../utils/roundCurrency.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {parseDate, parseDateForBackend} from '../../../../utils/dateUtils.ts';\nimport {ConfirmationModal} from '../../../../shared/confirmationModal/confirmationModal.tsx';\nimport {Fee, FeeDetails} from '../constants.tsx';\nimport useGetFeesPayments from '../../../../services/graphQL/fees/feesPayments/useGetFeesPayments.ts';\nimport useInsertFeesPayment from '../../../../services/graphQL/fees/feesPayments/useInsertFeesPayment.ts';\nimport useDeleteFeesPayment from '../../../../services/graphQL/fees/feesPayments/useDeleteFeesPayment.ts';\nimport {FinePaymentMethods} from '../../fines/constants.tsx';\n\nconst singlePaymentSchema = yup.object().shape({\n  id: yup.number().required(requiredError),\n  payment_method: yup.object().shape({\n    id: yup.number().required(),\n    title: yup.string().required(requiredError),\n  }),\n  amount: yup.number().required(requiredError).min(1, 'Iznos mora biti veći od 0'),\n  payment_date: yup.date().required(requiredError),\n  receipt_number: yup.string().required(requiredError),\n  payment_reference_number: yup.string().required(requiredError),\n  debit_reference_number: yup.string().required(requiredError),\n  originalID: yup.number().required(requiredError),\n  fee_id: yup.number().required(),\n  created_at: yup.string().optional(),\n  updated_at: yup.string().optional(),\n  status: yup.object().shape({\n    id: yup.number().optional(),\n    title: yup.string().optional(),\n  }),\n});\n\nconst paymentsSchema = yup.object().shape({\n  payments: yup.array().of(singlePaymentSchema),\n});\n\ntype PaymentEntryForm = yup.InferType<typeof paymentsSchema>;\ntype PaymentRow = yup.InferType<typeof singlePaymentSchema>;\n\ninterface PaymentFormProps {\n  fee: Fee;\n  refetchFee: () => Promise<void>;\n}\nconst PaymentDetails = ({fee, refetchFee}: PaymentFormProps) => {\n  const fineFeeDetails: FeeDetails = fee?.fee_details;\n  const {payments, refetch} = useGetFeesPayments(fee?.id);\n  const {insertFeePayment} = useInsertFeesPayment();\n  const {deleteFeePayment} = useDeleteFeesPayment();\n  const {alert} = useAppContext();\n\n  const [editRowId, setEditRowId] = useState<number | null>(null);\n  const [showDeletePaymentModal, setShowDeletePaymentModal] = useState<number | null>(null);\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    formState: {errors},\n    setError,\n  } = useForm<PaymentEntryForm>({});\n\n  const {fields, append, remove} = useFieldArray({name: 'payments', control});\n  const appendLastRow = () =>\n    append({\n      id: 0,\n      payment_method: {\n        id: 0,\n        title: '',\n      },\n      amount: 0,\n      payment_date: new Date(),\n      receipt_number: '',\n      payment_reference_number: '',\n      debit_reference_number: '',\n      originalID: 0,\n      fee_id: fee.id,\n      status: {\n        id: 0,\n        title: '',\n      },\n    });\n\n  useEffect(() => {\n    remove();\n    if (payments.length) {\n      payments.forEach(payment => {\n        append({\n          ...payment,\n          // need to save original id to be able to edit/delete the payment because useFieldArray will change it\n          originalID: payment.id,\n          payment_method: FinePaymentMethods.find(method => method.title === payment.payment_method.title) ?? {\n            id: 0,\n            title: '',\n          },\n          payment_date: new Date(payment?.payment_date),\n        });\n      });\n      appendLastRow();\n      return;\n    }\n\n    appendLastRow();\n  }, [payments]);\n\n  const isRowDisabled = (row: any) => {\n    return editRowId ? editRowId !== row.originalID : !!row.originalID;\n  };\n\n  const validateSingleRow = async (rowData: PaymentRow, id: number) => {\n    try {\n      // Validate using Yup directly\n      await singlePaymentSchema.validate(rowData, {abortEarly: false});\n      return true; // Validation passed\n    } catch (err) {\n      if (err instanceof yup.ValidationError) {\n        err.inner.forEach(error => {\n          setError(`payments.${id}.${error.path}` as never, {type: 'manual', message: error.message});\n        });\n      }\n    }\n  };\n\n  const handleSubmitPayment = async (data: PaymentEntryForm) => {\n    if (data.payments?.length) {\n      const test = data.payments?.findIndex(item => item.originalID === editRowId);\n      const selectedRow = test != -1 ? test : fields.length - 1;\n\n      const isValid = await validateSingleRow(data?.payments[selectedRow], selectedRow);\n\n      if (!isValid) return;\n\n      const payment = data.payments![selectedRow];\n      const {originalID, created_at, updated_at, status, ...updatedPayment} = payment;\n      const parsedPaymentDate = parseDateForBackend(payment.payment_date);\n      if (!parsedPaymentDate) return;\n\n      const payload = {\n        ...updatedPayment,\n        payment_method: payment.payment_method.id,\n        payment_date: parsedPaymentDate,\n      };\n      await insertFeePayment(\n        payload,\n        () => {\n          refetch();\n          refetchFee();\n          alert.success('Uspješno sačuvano.');\n          setEditRowId(null);\n        },\n        () => alert?.error('Greška. Promjene nisu sačuvane.'),\n      );\n    }\n  };\n\n  const handleDeletePayment = async () => {\n    const paymentIndex = payments.findIndex(payment => payment.id === showDeletePaymentModal);\n    if (!showDeletePaymentModal || paymentIndex === -1) return;\n    await deleteFeePayment(\n      showDeletePaymentModal,\n      () => {\n        remove(paymentIndex);\n        refetchFee();\n        alert.success('Uspješno obrisano.');\n      },\n      () => alert.error('Greška. Brisanje nije uspjelo.'),\n    );\n    setShowDeletePaymentModal(null);\n  };\n\n  const tableHeadsPayments: TableHead[] = [\n    {\n      title: 'Način plaćanja',\n      accessor: 'payment_method',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_method`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Dropdown\n                style={{width: '180px'}}\n                name={name}\n                onChange={onChange}\n                value={value ?? FinePaymentMethods.find(method => method.title === value)}\n                options={FinePaymentMethods}\n                isDisabled={isRowDisabled(row)}\n                error={isRowDisabled(row) ? '' : errors?.payments?.[index]?.payment_method?.title?.message}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Iznos',\n      accessor: 'amount',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.amount`)}\n            type=\"number\"\n            leftContent={\n              <div style={{color: isRowDisabled(row) ? Theme.palette.gray300 : Theme.palette.gray800}}>€</div>\n            }\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.amount?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Datum uplate',\n      accessor: 'payment_date',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Controller\n            name={`payments.${index}.payment_date`}\n            control={control}\n            render={({field: {name, onChange, value}}) => (\n              <Datepicker\n                name={name}\n                onChange={onChange}\n                selected={value ? new Date(value) : ''}\n                disabled={isRowDisabled(row)}\n                error={errors?.payments?.[index]?.payment_date?.message}\n                popperProps={{\n                  strategy: 'fixed', // fixes datepicker going behind other elements\n                  placement: 'top',\n                }}\n              />\n            )}\n          />\n        );\n      },\n    },\n    {\n      title: 'Broj izvoda',\n      accessor: 'receipt_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.receipt_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.receipt_number?.message}\n            key={`payments.${index}.receipt_number`}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj odobrenja',\n      accessor: 'payment_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.payment_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.payment_reference_number?.message}\n          />\n        );\n      },\n    },\n    {\n      title: 'Poziv na broj zaduženja',\n      accessor: 'debit_reference_number',\n      type: 'custom',\n      renderContents: (_item, row, index) => {\n        return (\n          <Input\n            {...register(`payments.${index}.debit_reference_number`)}\n            disabled={isRowDisabled(row)}\n            error={errors?.payments?.[index]?.debit_reference_number?.message}\n          />\n        );\n      },\n    },\n    {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n  ];\n\n  return (\n    <>\n      <Amount style={{marginTop: 10}}>\n        <Typography style={{fontWeight: 600, marginBottom: 10}} variant={'bodySmall'} content={'Platiti do:'} />\n        <Typography variant=\"bodySmall\" content={parseDate(fee?.payment_deadline_date)} />\n      </Amount>\n      <LabeledDivider>\n        <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"DETALJI PLAĆANJA:\" />\n      </LabeledDivider>\n      <Table\n        tableHeads={tableHeadsPayments}\n        data={fields}\n        tableActions={[\n          {\n            name: 'Otkaži',\n            onClick: () => setEditRowId(null),\n            icon: <CloseIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Plati',\n\n            onClick: handleSubmit(handleSubmitPayment),\n            icon: <CheckIcon stroke={Theme?.palette?.gray800} width={'20px'} height={'20px'} />,\n            shouldRender: row => !isRowDisabled(row) || !row.originalID,\n          },\n          {\n            name: 'Izmijeni',\n            onClick: row => setEditRowId(row.originalID),\n            icon: <EditIconTwo stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => isRowDisabled(row) && !!row.originalID,\n          },\n          {\n            name: 'Izbriši',\n            onClick: row => setShowDeletePaymentModal(row.originalID),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => !!row.originalID && (!editRowId || editRowId !== row.originalID),\n          },\n        ]}\n      />\n      <FinePaymentDetailsWrapper>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPNO:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(fineFeeDetails?.fee_all_payments_amount)} />\n        </Amount>\n        <Amount>\n          <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PREOSTALO ZA UPLATU:\" />\n          <Typography variant=\"bodySmall\" content={roundCurrency(fineFeeDetails?.fee_left_to_pay_amount)} />\n        </Amount>\n      </FinePaymentDetailsWrapper>\n      <ConfirmationModal\n        open={!!showDeletePaymentModal}\n        subTitle={'Ova uplata će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeletePaymentModal(null)}\n        onConfirm={() => handleDeletePayment()}\n      />\n    </>\n  );\n};\n\nexport default PaymentDetails;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/paymentDetails/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/paymentDetails/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/taxes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/finesAndTaxes/taxes/taxesOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2069,2072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2069,2072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2642,2645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2642,2645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2987,2990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2987,2990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {feeSubcategoryOptions, feeTypeOptions, PAGE_SIZE} from '../../../constants.ts';\nimport useGetFees from '../../../services/graphQL/fees/useGetFees.ts';\nimport {FilterInput} from '../../accounting/styles.tsx';\nimport {FilterDropdown, Filters} from '../../budget/planning/budgetList/styles.ts';\nimport {tableHeadsTaxesOverview} from './constants.tsx';\nimport {Header} from './styles.ts';\nimport {FinesOverviewItem} from '../../../types/graphQL/finesOverview.ts';\nimport {ConfirmationModal} from '../../../shared/confirmationModal/confirmationModal.tsx';\nimport {useState} from 'react';\nimport useAppContext from '../../../context/useAppContext.ts';\nimport useDeleteFee from '../../../services/graphQL/fees/useDeleteFee.ts';\nimport {useDebounce} from '../../../utils/useDebounce.ts';\nimport {defaultDropdownOption} from '../fines/constants.tsx';\n\nconst initialValues = {\n  fee_type_id: undefined,\n  fee_subcategory_id: undefined,\n};\nconst TaxesOverview = () => {\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState(initialValues);\n  const [search, setSearch] = useState('');\n  const debouncedSearch = useDebounce(search, 500);\n\n  const {fees, refetch, total, loading} = useGetFees({\n    page: page,\n    size: PAGE_SIZE,\n    ...filters,\n    search: debouncedSearch,\n  });\n  const [showDeleteFeeModal, setShowDeleteFeeModal] = useState<number | null>(null);\n\n  const {\n    navigation: {navigate},\n    alert,\n  } = useAppContext();\n  // TO DO implement the logic when the BE is done\n  const {deleteFee} = useDeleteFee();\n\n  const handleDeleteFee = async () => {\n    if (!showDeleteFeeModal) return;\n\n    await deleteFee(\n      showDeleteFeeModal,\n      () => {\n        refetch();\n        alert.success('Uspješno obrisano.');\n      },\n      () => {\n        alert.error('Greška. Brisanje nije uspjelo.');\n      },\n    );\n  };\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onFilterChange = (value: any, name: string) => {\n    setFilters({...filters, [name]: value?.id});\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const filterDropdownOptionsType = [defaultDropdownOption, ...feeTypeOptions] || [];\n  const filterDropdownOptionsSubcategory = [defaultDropdownOption, ...feeSubcategoryOptions] || [];\n\n  return (\n    <>\n      <Header>\n        <Filters>\n          <FilterDropdown\n            name=\"fee_type_id\"\n            value={filterDropdownOptionsType.find(option => option.id === filters?.fee_type_id)}\n            onChange={(value: any) => onFilterChange(value, 'fee_type_id')}\n            label=\"VRSTA TAKSE:\"\n            options={filterDropdownOptionsType}\n          />\n          <FilterDropdown\n            name=\"fee_subcategory_id\"\n            value={filterDropdownOptionsSubcategory.find(option => option.id === filters?.fee_subcategory_id)}\n            onChange={(value: any) => onFilterChange(value, 'fee_subcategory_id')}\n            label=\"POTKATEGORIJA TAKSE:\"\n            options={filterDropdownOptionsSubcategory}\n          />\n\n          <FilterInput\n            label=\"PRETRAGA:\"\n            rightContent={<SearchIcon />}\n            name=\"search\"\n            onChange={onSearch}\n            value={search}\n          />\n        </Filters>\n      </Header>\n      <Table\n        tableHeads={tableHeadsTaxesOverview}\n        data={fees}\n        isLoading={loading}\n        style={{marginBottom: 22}}\n        emptyMessage={'Još uvjek nema taksi'}\n        onRowClick={(row: FinesOverviewItem) => navigate(`/finance/fines-taxes/taxes/${row.id}`)}\n        tableActions={[\n          {\n            name: 'delete',\n            onClick: row => setShowDeleteFeeModal(row.id),\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n          },\n        ]}\n      />\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 1}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n      <ConfirmationModal\n        open={!!showDeleteFeeModal}\n        subTitle={'Ova taksa će biti trajno izbrisana iz sistema.'}\n        onClose={() => setShowDeleteFeeModal(null)}\n        onConfirm={() => handleDeleteFee()}\n      />\n    </>\n  );\n};\n\nexport default TaxesOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/landingPage/landingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/landingPage/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contracts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contractsEntry/contractsEntry.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[891,894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[891,894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {ContractsFormContainer, HalfWidthContainer, Row} from './styles.ts';\nimport Footer from '../../../../shared/footer.ts';\nimport {Dropdown, Datepicker, Input, Button} from 'client-library';\nimport {mockDropdownOptions} from '../../../../constants.ts';\nimport {Controller, useForm} from 'react-hook-form';\n\nconst initialValues = {\n  subject: null,\n  djelovodni_broj: null,\n  vrsta_ugovora: null,\n  sifarnik_poreske_uprave: null,\n  subjekt_koji_je_izdao_rjesenje: null,\n  aktivnost: null,\n  trajanje_ugovora: null,\n  datum_ugovora: null,\n  datum_valute: null,\n  datum_prijema_racunovodstva: null,\n  datum_prijema_racunovodstva_sss: null,\n  opis: '',\n  iznos_za_uplatu: null,\n  prethodna_primanja_u_mjesecu: null,\n  neto_iznos: null,\n};\n\nconst ContractsEntry = () => {\n  const {control, register, handleSubmit, reset} = useForm({defaultValues: initialValues});\n\n  const onSubmit = (data: any) => {\n    // TODO add sumbit api call\n    console.log(data);\n  };\n\n  return (\n    <ContractsFormContainer>\n      <>\n        <Row>\n          <Controller\n            name=\"subject\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"SUBJEKT:\"\n                placeholder={'Odaberite ime subjekta'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n          <Controller\n            name=\"djelovodni_broj\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"DJELOVODNI BROJ:\"\n                placeholder={'Odaberite djelovodni broj'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'vrsta_ugovora'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"VRSTA UGOVORA:\"\n                placeholder={'Odaberite vrstu ugovora'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n\n          <Controller\n            name={'sifarnik_poreske_uprave'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"ŠIFARNIK PORESKE UPRAVE:\"\n                placeholder={'Odaberite šifarnik'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'subjekt_koji_je_izdao_rjesenje'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label={'SUBJEKT KOJI JE IZDAO RJESENJE:'}\n                placeholder={'Odaberite subjekt'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'aktivnost'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"AKTIVNOST:\"\n                placeholder={'Odaberite aktivnost'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n          <Controller\n            name={'trajanje_ugovora'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"TRAJANJE UGOVORA:\"\n                placeholder={'Odaberite trajanje ugovora'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'datum_ugovora'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM UGOVORA:\"\n                onChange={onChange}\n              />\n            )}\n          />\n          <Controller\n            name={'datum_valute'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM VALUTE:\"\n                onChange={onChange}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'datum_prijema_racunovodstva'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA RAČUNOVODSTVA:\"\n                onChange={onChange}\n              />\n            )}\n          />\n          <Controller\n            name={'datum_prijema_racunovodstva_sss'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA RAČUNOVODSTVA SSS:\"\n                onChange={onChange}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Input {...register('opis')} label=\"OPIS:\" textarea placeholder=\"Unesite opis\" />\n        </Row>\n        <HalfWidthContainer>\n          <Row>\n            <Input\n              {...register('iznos_za_uplatu')}\n              label=\"IZNOS ZA UPLATU:\"\n              placeholder=\"Unesite iznos\"\n              type={'number'}\n              inputMode={'decimal'}\n              leftContent={<div>€</div>}\n            />\n            <Input\n              {...register('prethodna_primanja_u_mjesecu')}\n              label=\"PRETHODNA PRIMANJA U MJESECU:\"\n              placeholder=\"Unesite prethodna primanja\"\n              type={'number'}\n              inputMode={'decimal'}\n              leftContent={<div>€</div>}\n            />\n          </Row>\n          <HalfWidthContainer>\n            <Row>\n              <Input\n                {...register('neto_iznos')}\n                label={'NETO IZNOS:'}\n                placeholder={'Unesite neto iznos'}\n                type={'number'}\n                inputMode={'decimal'}\n                leftContent={<div>€</div>}\n              />\n            </Row>\n          </HalfWidthContainer>\n          <Button content=\"Obračunaj\" variant={'primary'} onClick={handleSubmit(onSubmit)} />\n        </HalfWidthContainer>\n        <Footer>\n          <Button content=\"Obriši\" variant=\"secondary\" onClick={() => reset()} />\n        </Footer>\n      </>\n    </ContractsFormContainer>\n  );\n};\n\nexport default ContractsEntry;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contractsEntry/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contractsOverview/contractsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/contracts/contractsOverview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisionsEntry/decisionsEntry.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[883,886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[883,886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DecisionsFormContainer, HalfWidthContainer, Row} from './styles.ts';\nimport {Dropdown, Datepicker, Input, Button} from 'client-library';\nimport Footer from '../../../../shared/footer.ts';\nimport {Controller, useForm} from 'react-hook-form';\nimport {mockDropdownOptions} from '../../../../constants.ts';\n\nconst initialValues = {\n  subject: null,\n  broj_predmeta: null,\n  vrsta_rjesenja: null,\n  sifarnik_poreske_uprave: null,\n  subjekt_koji_je_izdao_rjesenje: null,\n  aktivnost: null,\n  izvor_finansiranja: null,\n  datum_rjesenja: null,\n  datum_valute: null,\n  datum_prijema_rjesenja: null,\n  datum_prijema_rjesenja_sss: null,\n  opis: '',\n  iznos_za_uplatu: null,\n  prethodna_primanja_u_mjesecu: null,\n  neto_iznos: null,\n};\n\nconst DecisionsEntry = () => {\n  const {control, register, handleSubmit, reset} = useForm({defaultValues: initialValues});\n\n  const onSubmit = (data: any) => {\n    // TODO add sumbit api call\n    console.log(data);\n  };\n\n  return (\n    <DecisionsFormContainer>\n      <>\n        <Row>\n          <Controller\n            name=\"subject\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"SUBJEKT:\"\n                placeholder={'Odaberite ime subjekta'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n          <Controller\n            name=\"broj_predmeta\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"BROJ PREDMETA:\"\n                placeholder={'Odaberite broj predmeta'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'vrsta_rjesenja'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"VRSTA RJEŠENJA:\"\n                placeholder={'Odaberite vrstu rešenja'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n          <Controller\n            name={'sifarnik_poreske_uprave'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"ŠIFARNIK PORESKE UPRAVE:\"\n                placeholder={'Odaberite šifarnik'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'subjekt_koji_je_izdao_rjesenje'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label={'SUBJEKT KOJI JE IZDAO RJEŠENJE:'}\n                placeholder={'Odaberite subjekt'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'aktivnost'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"AKTIVNOST:\"\n                placeholder={'Odaberite aktivnost'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n          <Controller\n            name={'izvor_finansiranja'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"IZVOR FINANSIRANJA:\"\n                placeholder={'Odaberite izvor finansiranja'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'datum_rjesenja'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM RJEŠENJA:\"\n                onChange={onChange}\n              />\n            )}\n          />\n          <Controller\n            name={'datum_valute'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM VALUTE:\"\n                onChange={onChange}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'datum_prijema_rjesenja'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA RJEŠENJA:\"\n                onChange={onChange}\n              />\n            )}\n          />\n          <Controller\n            name={'datum_prijema_rjesenja_sss'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA RJEŠENJA SSS:\"\n                onChange={onChange}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Input {...register('opis')} label=\"OPIS:\" textarea placeholder=\"Unesite opis\" />\n        </Row>\n        <HalfWidthContainer>\n          <Row>\n            <Input\n              {...register('iznos_za_uplatu')}\n              label=\"IZNOS ZA UPLATU:\"\n              placeholder=\"Unesite iznos\"\n              type={'number'}\n              inputMode={'decimal'}\n              leftContent={<div>€</div>}\n            />\n            <Input\n              {...register('prethodna_primanja_u_mjesecu')}\n              label=\"PRETHODNA PRIMANJA U MJESECU:\"\n              placeholder=\"Unesite prethodna primanja\"\n              type={'number'}\n              inputMode={'decimal'}\n              leftContent={<div>€</div>}\n            />\n          </Row>\n          <HalfWidthContainer>\n            <Row>\n              <Input\n                {...register('neto_iznos')}\n                label={'NETO IZNOS:'}\n                placeholder={'Unesite neto iznos'}\n                type={'number'}\n                inputMode={'decimal'}\n                leftContent={<div>€</div>}\n              />\n            </Row>\n          </HalfWidthContainer>\n          <Button content=\"Obračunaj\" variant={'primary'} onClick={handleSubmit(onSubmit)} />\n        </HalfWidthContainer>\n        <Footer>\n          <Button content=\"Obriši\" variant=\"secondary\" onClick={() => reset()} />\n        </Footer>\n      </>\n    </DecisionsFormContainer>\n  );\n};\n\nexport default DecisionsEntry;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisionsEntry/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisionsOverview/decisionsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/decisions/decisionsOverview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoiceDetails/invoiceDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoiceEntry/InvoiceEntry.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5077,5080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5077,5080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6893,6896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6893,6896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":264,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8658,8661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8658,8661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":370,"column":29,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":370,"endColumn":84},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 12.","line":436,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":436,"endColumn":13,"fix":{"range":[15358,15370],"text":"              "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 14 spaces but found 12.","line":437,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":437,"endColumn":13,"fix":{"range":[15427,15439],"text":"              "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":724,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":724,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26430,26433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26430,26433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":749,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":749,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27291,27294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27291,27294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import {yupResolver} from '@hookform/resolvers/yup';\nimport {\n  Button,\n  Datepicker,\n  Dropdown,\n  FileUpload,\n  Input,\n  Table,\n  TableHead,\n  Theme,\n  Typography,\n  XIcon,\n} from 'client-library';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Controller, useFieldArray, useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport FileListComponent from '../../../../components/fileList/fileList.tsx';\nimport {generateDropdownOptions} from '../../../../constants.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useGetCountOverview from '../../../../services/graphQL/counts/useGetCountOverview.ts';\nimport useInsertInvoice from '../../../../services/graphQL/invoice/useInsertInvoice.ts';\nimport useGetOrderList from '../../../../services/graphQL/orders/useGetOrders.ts';\nimport useGetSuppliers from '../../../../services/graphQL/suppliers/useGetSuppliers.ts';\nimport {FileUploadWrapper} from '../../../../shared/FileUploadWrapper.ts';\nimport {FlexRow} from '../../../../shared/flex.ts';\nimport Footer from '../../../../shared/footer.ts';\nimport PlusButton from '../../../../shared/plusButton.tsx';\nimport {FileItem, FileResponseItem} from '../../../../types/fileUploadType.ts';\nimport {pdvOptions} from '../constants';\nimport {FileListWrapper} from '../invoicesOverview/styles.ts';\nimport {invoiceSchema} from './constants.tsx';\nimport {InvoiceEntryForm, PlusButtonWrapper, Row, StyledSwitch} from './styles';\nimport {TypeOptions, invoiceTypeOptions} from './types.ts';\nimport {InvoiceItem} from '../../../../types/graphQL/invoice.ts';\nimport {parseDateForBackend} from '../../../../utils/dateUtils.ts';\n\ntype InvoiceEntryForm = yup.InferType<typeof invoiceSchema>;\n\ninterface InvoiceFormProps {\n  invoice?: InvoiceItem;\n}\n\nconst InvoiceEntry = ({invoice}: InvoiceFormProps) => {\n  const [uploadedFile, setUploadedFile] = useState<FileList | null>(null);\n  const [showFileUploadError, setShowFileUploadError] = useState<boolean>(false);\n  const [accountingInvoiceFile, setAccountingInvoiceFile] = useState<FileItem | null>(null);\n  const [accountingProFormaInvoiceFile, setAccountingProFormaInvoiceFile] = useState<FileItem | null>(null);\n\n  const {\n    navigation: {navigate},\n    alert,\n    fileService: {uploadFile},\n    contextMain,\n  } = useAppContext();\n\n  const {\n    control,\n    register,\n    handleSubmit,\n    watch,\n    formState: {errors},\n    setValue,\n    reset,\n  } = useForm<InvoiceEntryForm>({\n    resolver: yupResolver(invoiceSchema),\n  });\n\n  const selectedOrderOption = watch('order_id')?.id;\n\n  const [invoiceType, invoice_number, date_of_invoice, receipt_date, pro_forma_invoice_date] = watch([\n    'invoice_type',\n    'invoice_number',\n    'date_of_invoice',\n    'receipt_date',\n    'pro_forma_invoice_date',\n  ]);\n\n  const {fields, append, remove} = useFieldArray({name: 'articles', control});\n\n  const isManual = invoiceType?.id === 'manual';\n\n  const {suppliers} = useGetSuppliers({});\n  const {orders} = useGetOrderList({\n    supplier_id: watch('supplier_id')?.id,\n    finance_overview: true,\n    page: 1,\n    size: 1000,\n  });\n\n  const {counts} = useGetCountOverview({level: 3});\n  const {insertInvoice, loading} = useInsertInvoice();\n\n  const supplierBankAccounts = suppliers.find(supplier => supplier.id === watch('supplier_id')?.id)?.bank_accounts;\n\n  const dropdowncountsOptions = useMemo(() => {\n    return generateDropdownOptions(counts);\n  }, [counts]);\n\n  const handleUpload = (files: FileList) => {\n    setUploadedFile(files);\n    setShowFileUploadError(false);\n  };\n\n  const invoiceTableHeads: TableHead[] = useMemo(() => {\n    return [\n      {\n        title: 'Naziv stavke',\n        accessor: 'title',\n        type: 'custom',\n        renderContents: (title: string, _, index) => {\n          if (isManual) {\n            return (\n              <Input\n                {...register(`articles.${index}.title`)}\n                style={{minWidth: '100px'}}\n                error={errors.articles?.[index]?.title?.message}\n              />\n            );\n          } else {\n            return <Input value={title} disabled />;\n          }\n        },\n      },\n      {\n        title: 'Neto iznos',\n        accessor: 'net_price',\n        type: 'custom',\n        renderContents: (_item, _row, index) => {\n          return (\n            <Input\n              {...register(`articles.${index}.net_price`)}\n              style={{minWidth: '100px'}}\n              leftContent={<>Є</>}\n              error={errors.articles?.[index]?.net_price?.message}\n              disabled={!isManual}\n            />\n          );\n        },\n      },\n      {\n        title: 'Stopa PDV-a',\n        accessor: 'vat_percentage',\n        type: 'custom',\n        renderContents: (_item, _row, index) => {\n          return (\n            <Controller\n              name={`articles.${index}.vat_percentage`}\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <div style={{minWidth: '100px'}}>\n                  <Dropdown options={pdvOptions} name={name} value={value as any} onChange={onChange} />\n                </div>\n              )}\n            />\n          );\n        },\n      },\n      {\n        title: 'PDV',\n        accessor: 'vat_price',\n        type: 'custom',\n        renderContents: (_item, _row, index) => {\n          const vatPercentage = watch(`articles.${index}.vat_percentage`);\n          const vatPrice = vatPercentage?.id !== 0 ? calculateVatPrice(index) : 0.0;\n\n          return <Input value={vatPrice?.toFixed(2)} disabled leftContent={<>Є</>} />;\n        },\n      },\n      {\n        title: 'Količina',\n        accessor: 'amount',\n        type: 'custom',\n        renderContents: (_item, _row, index) => {\n          return (\n            <Input\n              {...register(`articles.${index}.amount`)}\n              style={{minWidth: '100px'}}\n              error={errors.articles?.[index]?.amount?.message}\n              disabled={!isManual}\n            />\n          );\n        },\n      },\n      {\n        title: 'Ukupan iznos',\n        accessor: '',\n        type: 'custom',\n        renderContents: (_item, _row, index) => {\n          const vatPercentage = watch(`articles.${index}.vat_percentage`);\n          const total = vatPercentage ? calculateTotalPrice(index) : 0;\n\n          return <Input value={Number(total)?.toFixed(2)} disabled leftContent={<>Є</>} />;\n        },\n      },\n      {\n        title: 'Konto',\n        accessor: 'account',\n        type: 'custom',\n        renderContents: (_item, _row, index) => (\n          <Controller\n            name={`articles.${index}.account`}\n            control={control}\n            render={({field: {onChange, name, value}}) => (\n              <div style={{minWidth: '200px'}}>\n                <Dropdown\n                  options={dropdowncountsOptions}\n                  name={name}\n                  value={value as any}\n                  onChange={onChange}\n                  error={errors.articles?.[index]?.account?.message}\n                />\n              </div>\n            )}\n          />\n        ),\n      },\n      {\n        title: 'Opis',\n        accessor: 'description',\n        type: 'custom',\n        renderContents: (description: string, _, index) => {\n          if (isManual) {\n            return <Input {...register(`articles.${index}.description`)} style={{minWidth: '200px'}} />;\n          } else {\n            return <Input value={description} disabled textarea />;\n          }\n        },\n      },\n      {title: '', accessor: 'TABLE_ACTIONS', type: 'tableActions'},\n    ];\n  }, [invoiceType, register, control, dropdowncountsOptions]);\n\n  const calculateTotalPrice = (index: number) => {\n    const net_price = watch('articles')?.[index].net_price;\n    const amount = watch('articles')?.[index].amount;\n    const vat_percentage = watch('articles')?.[index]?.vat_percentage?.id;\n    const totalPrice =\n      amount && net_price && vat_percentage && vat_percentage !== 0\n        ? net_price * (1 + vat_percentage / 100) * amount\n        : net_price && amount && net_price * amount;\n    return totalPrice;\n  };\n\n  const calculateVatPrice = (index: number) => {\n    const net_price = watch('articles')?.[index]?.net_price;\n    const vat_percentage = watch('articles')?.[index]?.vat_percentage;\n    const vatPrice = net_price && vat_percentage?.id ? net_price * (vat_percentage?.id / 100) : 0;\n    return vatPrice;\n  };\n\n  const handleAddRow = () => {\n    append({\n      id: 0,\n      title: '',\n      net_price: 0,\n      vat_price: 0,\n      description: '',\n      account: null,\n      vat_percentage: null,\n      amount: 1,\n    });\n  };\n\n  const onSubmit = async (data: any) => {\n    if (loading) return;\n\n    if (uploadedFile) {\n      setShowFileUploadError(false);\n\n      const formData = new FormData();\n      formData.append('file', uploadedFile[0]);\n\n      await uploadFile(formData, (files: FileResponseItem[]) => {\n        setUploadedFile(null);\n        const payload = {\n          id: data?.id,\n          supplier_id: data?.supplier_id?.id,\n          order_id: selectedOrderOption,\n          is_invoice: data.is_invoice.id,\n          file_id: type.id === true ? files[0].id : null,\n          pro_forma_invoice_file_id: type.id === false ? files[0].id : null,\n          invoice_number: invoice_number,\n          date_of_invoice: date_of_invoice ? parseDateForBackend(date_of_invoice) : null,\n          receipt_date: receipt_date ? parseDateForBackend(receipt_date) : null,\n          sss_invoice_receipt_date: parseDateForBackend(data?.sss_invoice_receipt_date),\n          bank_account: data?.bank_account?.id,\n          date_of_payment: parseDateForBackend(data?.date_of_payment),\n          description: data?.description,\n          passed_to_accounting: data?.passed_to_accounting,\n          passed_to_inventory: data?.passed_to_inventory,\n          type: 'invoice',\n          organization_unit_id: contextMain?.organization_unit?.id,\n          pro_forma_invoice_number: data?.pro_forma_invoice_number,\n          pro_forma_invoice_date: pro_forma_invoice_date ? parseDateForBackend(pro_forma_invoice_date) : null,\n          articles: fields.map((_, index) => ({\n            title: data.articles[index]?.title,\n            net_price: data.articles[index]?.net_price,\n            description: data.articles[index]?.description,\n            account_id: data.articles[index]?.account?.id,\n            vat_percentage: data.articles[index]?.vat_percentage?.id,\n            amount: data.articles[index]?.amount,\n          })),\n        };\n        insertInvoice(\n          payload,\n          () => {\n            alert.success('Uspješno dodavanje računa.');\n            navigate('/finance/liabilities-receivables/liabilities/invoices');\n          },\n          () => alert.error('Neuspješno dodavanje računa.'),\n        );\n      });\n\n      return;\n    } else if (isManual && !uploadedFile) {\n      setShowFileUploadError(true);\n    } else {\n      const payload = {\n        id: data?.id,\n        is_invoice: data.is_invoice?.id,\n        supplier_id: data?.supplier_id?.id,\n        order_id: selectedOrderOption,\n        file_id: invoice?.file?.id || null,\n        pro_forma_invoice_file_id: invoice?.pro_forma_invoice_file?.id,\n        invoice_number: invoice_number,\n        date_of_invoice: date_of_invoice ? parseDateForBackend(date_of_invoice) : null,\n        receipt_date: receipt_date ? parseDateForBackend(receipt_date) : null,\n        sss_invoice_receipt_date: parseDateForBackend(data?.sss_invoice_receipt_date),\n        bank_account: data?.bank_account?.id,\n        date_of_payment: parseDateForBackend(data?.date_of_payment),\n        organization_unit_id: contextMain?.organization_unit?.id,\n        description: data?.description,\n        type: 'invoice',\n        pro_forma_invoice_number: data?.pro_forma_invoice_number,\n        pro_forma_invoice_date: pro_forma_invoice_date ? parseDateForBackend(pro_forma_invoice_date) : null,\n        passed_to_accounting: data?.passed_to_accounting,\n        passed_to_inventory: data?.passed_to_inventory,\n        articles: fields.map((_, index) => ({\n          title: data.articles[index]?.title,\n          net_price: data.articles[index]?.net_price,\n          description: data.articles[index]?.description,\n          account_id: data.articles[index]?.account?.id,\n          vat_percentage: data.articles[index]?.vat_percentage?.id,\n          amount: data.articles[index]?.amount,\n        })),\n      };\n      insertInvoice(\n        payload,\n        () => {\n          alert.success('Uspješno dodavanje računa.');\n          navigate('/finance/liabilities-receivables/liabilities/invoices');\n        },\n        () => alert.error('Neuspješno dodavanje računa.'),\n      );\n    }\n\n    return;\n  };\n\n  const removeRow = (idToRemove: number) => {\n    const indexToRemove = fields.findIndex(field => field.id === idToRemove);\n    if (indexToRemove !== -1) {\n      remove(indexToRemove);\n    }\n  };\n\n  useEffect(() => {\n    // * When order is selected, invoice number, date of invoice, receipt date and articles are set from its values\n    if (selectedOrderOption) {\n      const selectedOrder = orders.find(order => order.id === selectedOrderOption)!;\n\n      if (!selectedOrder) return;\n\n      if (selectedOrder.receive_file) setAccountingInvoiceFile(selectedOrder.receive_file);\n      if (selectedOrder.order_file) setAccountingProFormaInvoiceFile(selectedOrder.order_file);\n\n      if (selectedOrder.invoice_number) setValue('invoice_number', selectedOrder.invoice_number);\n      if (selectedOrder.invoice_date) setValue('date_of_invoice', new Date(selectedOrder.invoice_date));\n      if (selectedOrder.pro_forma_invoice_date)\n        setValue('pro_forma_invoice_date', new Date(selectedOrder.pro_forma_invoice_date));\n      if (selectedOrder.pro_forma_invoice_number)\n        setValue('pro_forma_invoice_number', selectedOrder.pro_forma_invoice_number);\n      if (selectedOrder.date_system) setValue('receipt_date', new Date(selectedOrder.date_system));\n\n      if (selectedOrder.articles && selectedOrder.articles.length) {\n        for (const article of selectedOrder.articles) {\n          append({\n            id: article.id,\n            title: article.title,\n            net_price: article.net_price,\n            vat_price: 0,\n            description: article.description,\n            account: null,\n            vat_percentage: null,\n            amount: article.amount,\n          });\n        }\n      }\n    }\n  }, [selectedOrderOption]);\n\n  const dropdownOrderOptions = useMemo(() => {\n    return orders?.map(item => {\n      return {\n        id: item.id,\n        title: item.invoice_number,\n      };\n    });\n  }, [orders]);\n\n  const resetFormValues = () => {\n    setValue('order_id', {id: 0, title: ''});\n    setValue('invoice_number', '');\n    setValue('articles', []);\n    setValue('invoice_type', {id: '', title: ''});\n  };\n\n  useEffect(() => {\n    !invoice && resetFormValues();\n  }, [watch('is_invoice')]);\n\n  const type = watch('is_invoice');\n\n  const passedToInventory = watch('passed_to_inventory');\n  const passedToAccounting = watch('passed_to_accounting');\n\n  useEffect(() => {\n    if (invoice) {\n      reset({\n        ...invoice,\n        id: invoice.id,\n        invoice_type:\n          type?.id === false\n            ? {id: 'manual', title: 'Ručni unos'}\n            : type?.id === true && invoice.order_id !== null\n            ? {id: 'accounting', title: 'Materijalno knjigovodstvo'}\n            : {id: 'manual', title: 'Ručni unos'},\n        supplier_id: {id: invoice.supplier.id, title: invoice.supplier.title},\n        order_id: {id: invoice.order?.id, title: invoice.order?.title},\n        file_id: invoice.file.id,\n        is_invoice: invoice.is_invoice === false ? {id: false, title: 'Predračun'} : {id: true, title: 'Račun'},\n        invoice_number: invoice.invoice_number,\n        date_of_invoice: invoice.date_of_invoice !== null ? new Date(invoice.date_of_invoice) : undefined,\n        receipt_date: invoice.receipt_date !== null ? new Date(invoice.receipt_date) : undefined,\n        date_of_payment: invoice.date_of_payment !== null ? new Date(invoice.date_of_payment) : undefined,\n        bank_account: {id: invoice.bank_account, title: invoice.bank_account},\n        description: invoice?.description,\n        passed_to_inventory: invoice?.passed_to_inventory,\n        passed_to_accounting: invoice?.passed_to_accounting,\n        pro_forma_invoice_date:\n          invoice?.pro_forma_invoice_date !== null ? new Date(invoice?.pro_forma_invoice_date) : undefined,\n        pro_forma_invoice_number: invoice?.pro_forma_invoice_number,\n        articles: invoice.articles.map((_, index) => ({\n          title: invoice.articles[index]?.title,\n          amount: invoice.articles[index]?.amount,\n          net_price: invoice.articles[index]?.net_price,\n          description: invoice.articles[index]?.description,\n          account: {id: invoice.articles[index]?.account?.id, title: invoice.articles[index]?.account?.title},\n          vat_percentage: {\n            id: invoice.articles[index]?.vat_percentage,\n            title: ` ${invoice.articles[index]?.vat_percentage}`,\n          },\n        })),\n      });\n    }\n  }, [invoice]);\n\n  return (\n    <InvoiceEntryForm>\n      <>\n        <Row>\n          <Controller\n            name=\"is_invoice\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"TIP:\"\n                placeholder=\"Odaberite tip\"\n                options={TypeOptions}\n                error={errors?.type_for_invoice?.message}\n                isRequired\n                isDisabled={invoice !== undefined}\n              />\n            )}\n          />\n          <Controller\n            name=\"invoice_type\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"TIP RAČUNA:\"\n                placeholder=\"Odaberite tip računa\"\n                options={type?.id === false ? [invoiceTypeOptions[0]] : invoiceTypeOptions}\n                error={errors?.invoice_type?.message}\n                isRequired\n                isDisabled={type === undefined || invoice !== undefined}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name=\"supplier_id\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"DOBAVLJAČ:\"\n                placeholder=\"Odaberite ime dobavljača\"\n                options={suppliers}\n                isDisabled={type === undefined}\n                error={errors?.supplier_id?.message}\n                isRequired\n              />\n            )}\n          />\n          <Controller\n            name=\"order_id\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"NARUDŽBENICA:\"\n                placeholder=\"Odaberite narudžbenicu\"\n                options={dropdownOrderOptions}\n                isDisabled={isManual || isManual === undefined}\n                error={errors?.order_id?.message}\n              />\n            )}\n          />\n\n          <Input\n            {...register('pro_forma_invoice_number')}\n            label=\"BROJ PREDRAČUNA:\"\n            placeholder=\"Unesite broj računa\"\n            error={errors?.invoice_number?.message}\n            isRequired\n            disabled={type?.id === true || Boolean(selectedOrderOption)}\n          />\n\n          <Input\n            {...register('invoice_number')}\n            label=\"BROJ RAČUNA:\"\n            placeholder=\"Unesite broj računa\"\n            disabled={\n              (type?.id === true && !isManual) ||\n              type?.id === false ||\n              (Boolean(selectedOrderOption) && Boolean(invoice_number))\n            }\n            error={errors?.invoice_number?.message}\n            isRequired\n          />\n        </Row>\n        {/* TODO: This date is being added by the accountant of SSS */}\n        {/* Flex row shared flex component is being tested here */}\n        <FlexRow gap=\"0.5rem\" justify=\"between\" style={{marginBottom: 25}} stretchChildren>\n          <Controller\n            name=\"pro_forma_invoice_date\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PREDRAČUNA:\"\n                onChange={onChange}\n                disabled={type?.id === true || (Boolean(selectedOrderOption) && pro_forma_invoice_date)}\n                error={errors?.date_of_invoice?.message}\n                isRequired\n              />\n            )}\n          />\n\n          <Controller\n            name=\"date_of_invoice\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM RAČUNA:\"\n                onChange={onChange}\n                disabled={\n                  (type?.id === true && !isManual) ||\n                  type?.id === false ||\n                  (Boolean(selectedOrderOption) && Boolean(invoice_number))\n                }\n                error={errors?.date_of_invoice?.message}\n                isRequired\n              />\n            )}\n          />\n          <Controller\n            name=\"receipt_date\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA ROBE:\"\n                onChange={onChange}\n                disabled={Boolean(selectedOrderOption) && receipt_date}\n              />\n            )}\n          />\n          <Controller\n            name=\"sss_invoice_receipt_date\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM PRIJEMA RAČUNA SSS:\"\n                onChange={onChange}\n                error={errors?.sss_invoice_receipt_date?.message}\n                isRequired\n              />\n            )}\n          />\n        </FlexRow>\n        {isManual && (\n          <FileUploadWrapper>\n            <FileUpload\n              icon={null}\n              files={uploadedFile}\n              variant=\"secondary\"\n              onUpload={handleUpload}\n              note={<Typography variant=\"bodySmall\" content={type.id === false ? 'Predračun' : 'Račun'} />}\n              hint={\n                type.id === false\n                  ? 'Fajlovi neće biti učitani dok ne sačuvate predračun.'\n                  : 'Fajlovi neće biti učitani dok ne sačuvate račun.'\n              }\n              buttonText=\"Učitaj\"\n              error={showFileUploadError ? 'Morate učitati fajl' : undefined}\n            />\n          </FileUploadWrapper>\n        )}\n        {invoice?.file && (\n          <FileListWrapper>\n            <Typography variant=\"bodySmall\" style={{fontWeight: 600}} content={'RAČUN:'} />\n            <FileListComponent files={(invoice?.file && [invoice.file]) ?? []} />\n          </FileListWrapper>\n        )}\n\n        {invoice?.pro_forma_invoice_file && (\n          <FileListWrapper>\n            <Typography variant=\"bodySmall\" style={{fontWeight: 600}} content={'PREDRAČUN:'} />\n            <FileListComponent files={invoice?.pro_forma_invoice_file ? [invoice?.pro_forma_invoice_file] : []} />\n          </FileListWrapper>\n        )}\n\n        {accountingInvoiceFile?.id !== 0 && !isManual && !invoice?.file && (\n          <FileListWrapper>\n            <Typography variant=\"bodySmall\" style={{fontWeight: 600}} content={'RAČUN:'} />\n            <FileListComponent files={(accountingInvoiceFile && [accountingInvoiceFile]) ?? []} />\n          </FileListWrapper>\n        )}\n\n        {accountingProFormaInvoiceFile?.id !== 0 && !isManual && !invoice?.pro_forma_invoice_file && (\n          <FileListWrapper>\n            <Typography variant=\"bodySmall\" style={{fontWeight: 600}} content={'PREDRAČUN:'} />\n            <FileListComponent files={(accountingProFormaInvoiceFile && [accountingProFormaInvoiceFile]) ?? []} />\n          </FileListWrapper>\n        )}\n\n        <Row>\n          <Controller\n            name=\"bank_account\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"ŽIRO RAČUN:\"\n                placeholder=\"Odaberite broj računa\"\n                options={\n                  supplierBankAccounts\n                    ? supplierBankAccounts.map((account: string) => ({id: account, title: account}))\n                    : []\n                }\n                error={errors?.bank_account?.message}\n                isRequired\n              />\n            )}\n          />\n          <Controller\n            name=\"date_of_payment\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM VALUTE:\"\n                onChange={onChange}\n                error={errors?.date_of_payment?.message}\n                isRequired\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Input {...register('description')} label=\"OPIS:\" textarea placeholder=\"Unesite opis\" />\n        </Row>\n\n        {isManual && (\n          <div style={{width: 350, marginTop: 20}}>\n            <Controller\n              name=\"passed_to_accounting\"\n              control={control}\n              render={({field: {onChange, name, value}}) => (\n                <StyledSwitch\n                  name={name}\n                  checked={value as any}\n                  onChange={onChange}\n                  content={\n                    <Typography\n                      variant=\"bodyMedium\"\n                      content=\"PROSLIJEDITE U MATERIJALNO KNJIGOVODSTVO:\"\n                      style={{marginLeft: 10}}\n                    />\n                  }\n                  disabled={passedToInventory === true}\n                  theme={Theme}\n                />\n              )}\n            />\n          </div>\n        )}\n        {type?.id === true && isManual && (\n          <div style={{width: 350, marginBlock: 20}}>\n            <Controller\n              name=\"passed_to_inventory\"\n              control={control}\n              render={({field: {onChange, name, value}}) => {\n                return (\n                  <StyledSwitch\n                    name={name}\n                    checked={value as any}\n                    onChange={onChange}\n                    content={\n                      <Typography\n                        variant=\"bodyMedium\"\n                        content=\"PROSLIJEDITE U OSNOVNA SREDSTVA:\"\n                        style={{marginLeft: 10}}\n                      />\n                    }\n                    disabled={passedToAccounting === true}\n                    theme={Theme}\n                  />\n                );\n              }}\n            />\n          </div>\n        )}\n        {isManual && (\n          <PlusButtonWrapper>\n            <PlusButton onClick={handleSubmit(handleAddRow)} />\n          </PlusButtonWrapper>\n        )}\n\n        <Table\n          tableHeads={invoiceTableHeads}\n          data={fields}\n          tableActions={[\n            {\n              name: 'Ukloni',\n              icon: <XIcon stroke={Theme?.palette?.gray800} width=\"10px\" />,\n              onClick: row => {\n                removeRow(row?.id);\n              },\n              tooltip: () => 'Uklonite artikal',\n              shouldRender: () => isManual,\n            },\n          ]}\n        />\n        {/* For now we do not need this */}\n        {/* {fields.length > 0 && (\n          <>\n            <FlexColumn style={{marginTop: '1rem'}}>\n              <Amount>\n                <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"NETO IZNOS:\" />\n                <Typography variant=\"bodySmall\" content={`${totalNet?.toFixed(2)}Є`} />\n              </Amount>\n              <Amount>\n                <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"PDV:\" />\n                <Typography variant=\"bodySmall\" content={`${totalVat?.toFixed(2)}Є`} />\n              </Amount>\n              <Amount>\n                <Typography style={{fontWeight: 600}} variant=\"bodySmall\" content=\"UKUPAN IZNOS:\" />\n                <Typography variant=\"bodySmall\" content={`${(totalNet + totalVat)?.toFixed(2)}Є`} />\n              </Amount>\n              <InvoiceAmount>\n                <Typography variant=\"bodySmall\" content=\"IZNOS FAKTURA PO RAČUNU\" />\n              </InvoiceAmount>\n            </FlexColumn>\n            <Table tableHeads={invoiceAmountTableHeads} data={fields} />\n          </>\n        )} */}\n      </>\n      <Footer>\n        <Button\n          content=\"Odustani\"\n          variant=\"secondary\"\n          style={{width: 130}}\n          onClick={() => navigate('/finance/liabilities-receivables/liabilities/invoices')}\n        />\n        <Button content=\"Sačuvaj\" variant=\"primary\" onClick={handleSubmit(onSubmit)} />\n      </Footer>\n    </InvoiceEntryForm>\n  );\n};\n\nexport default InvoiceEntry;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoiceEntry/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoiceEntry/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoiceEntry/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoices.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoicesOverview/invoicesOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5409,5412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5409,5412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5506,5509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5506,5509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {Dropdown, FileIcon, Input, Pagination, SearchIcon, Table, Theme, TrashIcon} from 'client-library';\nimport {ChangeEvent, useMemo, useState} from 'react';\nimport FileModalView from '../../../../components/fileModalView/fileModalView.tsx';\nimport {PAGE_SIZE} from '../../../../constants.ts';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport useDeleteInvoice from '../../../../services/graphQL/invoice/useDeleteInvoice.ts';\nimport useGetInvoice from '../../../../services/graphQL/invoice/useGetInvoice.ts';\nimport useGetSuppliers from '../../../../services/graphQL/suppliers/useGetSuppliers.ts';\nimport {DeleteModal} from '../../../../shared/deleteModal/deleteModal.tsx';\nimport {DropdownData} from '../../../../types/dropdownData.ts';\nimport {FileItem} from '../../../../types/fileUploadType.ts';\nimport {InvoiceItem} from '../../../../types/graphQL/invoice.ts';\nimport {Supplier} from '../../../../types/graphQL/suppliers.ts';\nimport {getYearOptions} from '../../../../utils/getYearOptions.ts';\nimport {useDebounce} from '../../../../utils/useDebounce.ts';\nimport {StatusOptions, invoicesOverviewTableHeads} from '../constants.tsx';\nimport {Row} from './styles.ts';\n\nexport interface InvoiceOverviewFilters {\n  year?: DropdownData<string> | null;\n  supplier_id?: DropdownData<number> | null;\n  status?: DropdownData<string> | null;\n  search?: string;\n}\n\nconst initialInvoiceFilterValues = {\n  year: null,\n  supplier_id: null,\n  status: null,\n  search: '',\n};\n\nconst InvoicesOverview = () => {\n  const {\n    alert,\n    navigation: {navigate},\n    contextMain,\n  } = useAppContext();\n  const [fileToView, setFileToView] = useState<FileItem>();\n  const [showDeleteModalInvoiceId, setShowDeleteModalInvoiceId] = useState<number | undefined>(undefined);\n  const [page, setPage] = useState(1);\n  const [filterValues, setFilterValues] = useState<InvoiceOverviewFilters>(initialInvoiceFilterValues);\n  const [search, setSearch] = useState('');\n  const debouncedSearch = useDebounce(search, 500);\n\n  const {invoice, total, fetch} = useGetInvoice({\n    page: page,\n    size: PAGE_SIZE,\n    type: 'invoice',\n    status: filterValues.status ? filterValues.status.id : '',\n    supplier_id: filterValues.supplier_id ? filterValues.supplier_id.id : null,\n    year: filterValues.year ? filterValues.year.id : null,\n    search: debouncedSearch,\n    organization_unit_id: contextMain?.organization_unit?.id,\n  });\n\n  const {deleteInvoice} = useDeleteInvoice();\n  const {suppliers} = useGetSuppliers({});\n\n  const onDelete = (invoice: InvoiceItem) => {\n    setShowDeleteModalInvoiceId(invoice.id);\n  };\n\n  const handleCloseDeleteModal = () => {\n    setShowDeleteModalInvoiceId(undefined);\n  };\n\n  const handleDelete = async () => {\n    if (!showDeleteModalInvoiceId) return;\n\n    await deleteInvoice(\n      showDeleteModalInvoiceId,\n      () => {\n        alert.success('Uspješno ste obrisali račun.');\n        fetch();\n      },\n      () => {\n        alert.error('Došlo je do greške prilikom brisanja računa.');\n      },\n    );\n    setShowDeleteModalInvoiceId(undefined);\n  };\n\n  const onFilter = (value: DropdownData<string> | ChangeEvent<HTMLInputElement>, name: string) => {\n    if ('target' in value) {\n      setFilterValues({...filterValues, [name]: value.target.value});\n    } else {\n      setFilterValues({...filterValues, [name]: value});\n    }\n  };\n\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const onPageChange = (page: number) => {\n    setPage(page + 1);\n  };\n\n  const suppliersOptions = useMemo(() => {\n    const options = suppliers.map((supplier: Supplier) => ({\n      id: supplier.id,\n      title: supplier.title,\n    }));\n    options.unshift({id: null, title: 'Svi dobavljači'});\n    return options;\n  }, [suppliers]);\n\n  return (\n    <>\n      <Row>\n        <Dropdown\n          name=\"supplier_id\"\n          label=\"DOBAVLJAČ:\"\n          placeholder=\"Odaberi dobavljača\"\n          options={suppliersOptions}\n          value={filterValues.supplier_id}\n          onChange={value => onFilter(value as DropdownData<string>, 'supplier_id')}\n        />\n        <Dropdown\n          label=\"GODINA:\"\n          options={getYearOptions(10, true, 1)}\n          value={filterValues.year}\n          name=\"year\"\n          onChange={value => onFilter(value as DropdownData<string>, 'year')}\n          placeholder=\"Odaberite godinu\"\n        />\n        <Dropdown\n          name=\"status\"\n          label=\"STATUS:\"\n          placeholder=\"Odaberi status\"\n          options={StatusOptions}\n          value={filterValues.status}\n          onChange={value => onFilter(value as DropdownData<string>, 'status')}\n        />\n        <Input\n          name=\"search\"\n          label=\"PRETRAGA:\"\n          placeholder=\"Unesi pojam\"\n          onChange={onSearch}\n          value={search}\n          rightContent={<SearchIcon style={{marginLeft: 10, marginRight: 10}} stroke={Theme.palette.gray500} />}\n        />\n      </Row>\n      <Table\n        tableHeads={invoicesOverviewTableHeads}\n        data={invoice}\n        style={{marginBottom: 22}}\n        emptyMessage=\"Još nema računa\"\n        onRowClick={(row: InvoiceItem) => navigate(`/finance/liabilities-receivables/liabilities/invoices/${row.id}`)}\n        tableActions={[\n          {\n            name: 'showFile',\n            icon: <FileIcon stroke={Theme.palette.gray600} />,\n            onClick: (row: any) => {\n              setFileToView(row?.file);\n            },\n            shouldRender: (row: any) => row?.file?.id,\n          },\n          {\n            name: 'Izbriši',\n            onClick: onDelete,\n            icon: <TrashIcon stroke={Theme?.palette?.gray800} />,\n            shouldRender: row => row.status !== 'Obradi',\n          },\n        ]}\n      />\n      {fileToView && <FileModalView file={fileToView} onClose={() => setFileToView(undefined)} />}\n\n      <DeleteModal\n        open={!!showDeleteModalInvoiceId}\n        onClose={() => {\n          handleCloseDeleteModal();\n        }}\n        handleDelete={handleDelete}\n      />\n\n      <Pagination\n        pageCount={total ? Math.ceil(total / PAGE_SIZE) : 0}\n        onChange={onPageChange}\n        variant=\"filled\"\n        itemsPerPage={PAGE_SIZE}\n        pageRangeDisplayed={3}\n        style={{marginTop: '20px'}}\n      />\n    </>\n  );\n};\n\nexport default InvoicesOverview;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/invoices/invoicesOverview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salaries.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salariesEntry/salariesEntry.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[658,661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[658,661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {SalariesFormContainer, Row, FileUploadStepTitle} from './styles.ts';\nimport Footer from '../../../../shared/footer.ts';\nimport {Dropdown, Datepicker, Input, Button, FileUpload, Typography} from 'client-library';\nimport {FileUploadWrapper} from '../../../../shared/FileUploadWrapper.ts';\nimport {mockDropdownOptions} from '../../../../constants.ts';\nimport {Controller, useForm} from 'react-hook-form';\n\nconst initialValues = {\n  aktivnost: null,\n  mjesec: null,\n  datum_obracuna: null,\n  opis: '',\n};\nconst SalariesEntry = () => {\n  const {control, register, handleSubmit, reset} = useForm({defaultValues: initialValues});\n\n  const onSubmit = (data: any) => {\n    // TODO add sumbit api call\n    console.log(data);\n  };\n\n  return (\n    <SalariesFormContainer>\n      <>\n        <Row>\n          <Controller\n            name=\"aktivnost\"\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"AKTIVNOST\"\n                placeholder={'Odaberite aktivnost'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Controller\n            name={'mjesec'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Dropdown\n                name={name}\n                value={value}\n                onChange={onChange}\n                label=\"MJESEC:\"\n                placeholder={'Odaberite mjesec'}\n                options={mockDropdownOptions}\n              />\n            )}\n          />\n          <Controller\n            name={'datum_obracuna'}\n            control={control}\n            render={({field: {name, value, onChange}}) => (\n              <Datepicker\n                name={name}\n                selected={value ? new Date(value) : ''}\n                label=\"DATUM OBRAČUNA:\"\n                onChange={onChange}\n              />\n            )}\n          />\n        </Row>\n        <Row>\n          <Input {...register('opis')} label=\"OPIS:\" textarea placeholder=\"Unesite opis\" />\n        </Row>\n        <Row>\n          <FileUploadStepTitle variant=\"bodyMedium\" content=\"STEP 1: UVEZI REKAPITULACIJU MJESEČNE ZARADE\" />\n        </Row>\n        <FileUploadWrapper>\n          <FileUpload\n            icon={<></>}\n            variant=\"secondary\"\n            onUpload={e => console.log(e)}\n            note={<Typography variant=\"bodySmall\" content=\"UVEZI REKAPITULACIJU MJESEČNE ZARADE\" />}\n            buttonText=\"UČITAJ FAJL\"\n          />\n        </FileUploadWrapper>\n        <Row>\n          <FileUploadStepTitle variant=\"bodyMedium\" content=\"STEP 2: UVEZI REKAPITULACIJU REKAPITULACIJU ZARADA\" />\n        </Row>\n        <FileUploadWrapper>\n          <FileUpload\n            icon={<></>}\n            variant=\"secondary\"\n            onUpload={e => console.log(e)}\n            note={<Typography variant=\"bodySmall\" content=\"UVEZI REKAPITULACIJU OBUSTAVA ZARADA\" />}\n            buttonText=\"UČITAJ FAJL\"\n          />\n        </FileUploadWrapper>\n        <Footer>\n          <Button content=\"Obriši\" variant=\"secondary\" onClick={() => reset()} />\n          <Button content=\"Nastavi\" variant=\"primary\" onClick={handleSubmit(onSubmit)} />\n        </Footer>\n      </>\n    </SalariesFormContainer>\n  );\n};\n\nexport default SalariesEntry;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salariesEntry/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salariesOverview/salariesOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/screens/liabilitesAndReceivables/salaries/salariesOverview/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/get-environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/getEnvironment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/budgetContoUpdate/updateContoVersion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/budgetContoUpdate/useUpdateControVersion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/counts/getCountOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/counts/useGetCountOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/deleteBudget/deleteBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/deleteBudget/useDeleteBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/deleteFee.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/deleteFeesPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/getFeesPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/insertFeesPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/useDeleteFeesPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/useGetFeesPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/feesPayments/useInsertFeesPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/getFees.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/insertFee.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/useDeleteFee.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/useGetFees.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fees/useInsertFee.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/deleteFine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/deleteFinePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/getFinePayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/insertFinePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/useDeleteFinePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/useGetFinePayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finePayments/useInsertFinePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/finesOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/insertFine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/useDeleteFine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/useGetFines.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fines/useInsertFine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/deleteDepositDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/deleteFixedDeposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/deleteFixedDepositItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/getFixedDeposits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/insertDepositDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/insertFixedDeposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/insertFixedDepositItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useDeleteDepositDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useDeleteFixedDeposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useDeleteFixedDepositItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useGetFixedDeposits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useInsertDepositDispatch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useInsertDepositItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/fixedDeposits/useInsertFixedDeposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/deleteFlatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRateOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/deleteFlatRatePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/getFlatRatePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/insertFlatRatePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/useDeleteFlatRatePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/useGetFlatRatePayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/flatRatePayments/useInsertFlatRatePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/insertFlatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/useDeleteFlatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/useGetFlatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/flatRate/useInsertFlatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getBudgetDetails/getBudgetDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getBudgetDetails/useGetBudgetDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getBudgets/getBudgets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getBudgets/useGetBudgets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getFinancial/getFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/getFinancial/useGetFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4152,4155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4152,4155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4166,4169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4166,4169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {getEnvironment} from '../get-environment';\nimport getCountOverview from './counts/getCountOverview.ts';\nimport deleteBudget from './deleteBudget/deleteBudget';\nimport finesOverview from './fines/finesOverview.ts';\nimport insertFine from './fines/insertFine.ts';\nimport deleteFinePayment from './fines/finePayments/deleteFinePayment.ts';\nimport getFinePayments from './fines/finePayments/getFinePayments.ts';\nimport insertFinePayment from './fines/finePayments/insertFinePayment.ts';\nimport deleteFine from './fines/deleteFine.ts';\nimport getFeesOverview from './fees/getFees.ts';\nimport insertFee from './fees/insertFee.ts';\nimport deleteFee from './fees/deleteFee.ts';\nimport deleteFeesPayment from './fees/feesPayments/deleteFeesPayment.ts';\nimport insertFeesPayment from './fees/feesPayments/insertFeesPayment.ts';\nimport getFeesPayments from './fees/feesPayments/getFeesPayments.ts';\nimport deleteDepositDispatch from './fixedDeposits/deleteDepositDispatch.ts';\nimport deleteFixedDeposit from './fixedDeposits/deleteFixedDeposit.ts';\nimport deleteFixedDepositItem from './fixedDeposits/deleteFixedDepositItem.ts';\nimport getFixedDeposits from './fixedDeposits/getFixedDeposits.ts';\nimport insertDepositDispatch from './fixedDeposits/insertDepositDispatch.ts';\nimport insertFixedDeposit from './fixedDeposits/insertFixedDeposit.ts';\nimport insertFixedDepositItem from './fixedDeposits/insertFixedDepositItem.ts';\nimport getBudgetDetails from './getBudgetDetails/getBudgetDetails.ts';\nimport getBudgets from './getBudgets/getBudgets';\nimport insertBudget from './insertBudget/insertBudget.ts';\nimport goalsInsert from './insertNonFinancial/goals/insertGoals.ts';\nimport insertNonFinancial from './insertNonFinancial/insertNonFinancial.ts';\nimport deleteInvoice from './invoice/deleteInvoice.ts';\nimport getInvoice from './invoice/getInvoice.ts';\nimport insertInvoice from './invoice/insertInvoice.ts';\nimport getJudges from './judges/getJudges.ts';\nimport sendBudget from './sendBudget/sendBudget.ts';\nimport proceduralCostsOverview from './proceduralCosts/proceduralCostsOverview.ts';\nimport insertProceduralCost from './proceduralCosts/insertProceduralCost.ts';\nimport deleteProceduralCost from './proceduralCosts/deleteProceduralCost.ts';\nimport getProceduralCostPayment from './proceduralCosts/proceduralCostsPayments/getProceduralCostPayment.ts';\nimport insertProceduralCostPayment from './proceduralCosts/proceduralCostsPayments/insertProceduralCostPayment.ts';\nimport deleteProceduralCostPayment from './proceduralCosts/proceduralCostsPayments/deleteProceduralCostPayment.ts';\nimport insertPropertyBenefitsConfiscation from './propertyBenefitsConfiscation/insertPropertyBenefitsConfiscation.ts';\nimport deletePropertyBenefitsConfiscationPayment from './propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/deletePropertyBenefitsConfiscationPayment.ts';\nimport propertyBenefitsConfiscationOverview from './propertyBenefitsConfiscation/propertyBenefitsConfiscationOverview.ts';\nimport deletePropertyBenefitsConfiscation from './propertyBenefitsConfiscation/deletePropertyBenefitsConfiscation.ts';\nimport insertPropertyBenefitsConfiscationPayment from './propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/insertPropertyBenefitsConfiscationPayment.ts';\nimport getPropertyBenefitsConfiscationPayment from './propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/getPropertyBenefitsConfiscationPayment.ts';\nimport insertFlatRate from './flatRate/insertFlatRate.ts';\nimport deleteFlatRate from './flatRate/deleteFlatRate.ts';\nimport getFlatRatePayment from './flatRate/flatRatePayments/getFlatRatePayment.ts';\nimport insertFlatRatePayment from './flatRate/flatRatePayments/insertFlatRatePayment.ts';\nimport deleteFlatRatePayment from './flatRate/flatRatePayments/deleteFlatRatePayment.ts';\nimport flatRateOverview from './flatRate/flatRateOverview.ts';\n\nexport const BFF_URL = {\n  local: 'http://localhost:8080',\n  development: 'https://sss-erp-bff.oykos.me',\n  staging: 'http://localhost:8080',\n  production: 'http://localhost:8080',\n};\n\nexport const GraphQL = {\n  fetch: (query: string, variables?: any): Promise<any> => {\n    return fetch(BFF_URL[getEnvironment()], {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({query, variables}),\n    })\n      .then(response => response.json())\n      .catch(error => console.error(error));\n  },\n  getBudgets: getBudgets,\n  insertBudget: insertBudget,\n  deleteBudget: deleteBudget,\n  sendBudget: sendBudget,\n  getCountOverview: getCountOverview,\n  getBudgetDetails: getBudgetDetails,\n  insertNonFinancial: insertNonFinancial,\n  goalsInsert: goalsInsert,\n  finesOverview: finesOverview,\n  insertFine: insertFine,\n  deleteFine: deleteFine,\n  insertFinePayment: insertFinePayment,\n  deleteFinePayment: deleteFinePayment,\n  getFinePayments: getFinePayments,\n  getFeesOverview: getFeesOverview,\n  insertFee: insertFee,\n  deleteFee: deleteFee,\n  insertFeePayment: insertFeesPayment,\n  deleteFeePayment: deleteFeesPayment,\n  getFeePayments: getFeesPayments,\n  getInvoice: getInvoice,\n  insertInvoice: insertInvoice,\n  deleteInvoice: deleteInvoice,\n  getFixedDeposits: getFixedDeposits,\n  getJudges: getJudges,\n  proceduralCostsOverview: proceduralCostsOverview,\n  insertProceduralCost: insertProceduralCost,\n  deleteProceduralCost: deleteProceduralCost,\n  getProceduralCostPayments: getProceduralCostPayment,\n  insertProceduralCostPayment: insertProceduralCostPayment,\n  deleteProceduralCostPayment: deleteProceduralCostPayment,\n  propertyBenefitsConfiscationOverview: propertyBenefitsConfiscationOverview,\n  insertPropertyBenefitsConfiscation: insertPropertyBenefitsConfiscation,\n  deletePropertyBenefitsConfiscation: deletePropertyBenefitsConfiscation,\n  getPropertyBenefitsConfiscationPayment: getPropertyBenefitsConfiscationPayment,\n  insertPropertyBenefitsConfiscationPayment: insertPropertyBenefitsConfiscationPayment,\n  deletePropertyBenefitsConfiscationPayment: deletePropertyBenefitsConfiscationPayment,\n  flatRateOverview: flatRateOverview,\n  insertFlatRate: insertFlatRate,\n  deleteFlatRate: deleteFlatRate,\n  getFlatRatePayments: getFlatRatePayment,\n  insertFlatRatePayment: insertFlatRatePayment,\n  deleteFlatRatePayment: deleteFlatRatePayment,\n  insertFixedDeposit: insertFixedDeposit,\n  deleteFixedDeposit: deleteFixedDeposit,\n  insertFixedDepositItem: insertFixedDepositItem,\n  deleteFixedDepositItem: deleteFixedDepositItem,\n  insertDepositDispatch: insertDepositDispatch,\n  deleteDepositDispatch: deleteDepositDispatch,\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertBudget/insertBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertBudget/useInsertBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertNonFinancial/goals/insertGoals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertNonFinancial/goals/useInsertGoals.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[290,293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[290,293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState} from 'react';\nimport useAppContext from '../../../../context/useAppContext.ts';\nimport {GraphQL} from '../../index.ts';\n\nconst useInsertGoals = () => {\n  const [loading, setLoading] = useState(false);\n  const {fetch} = useAppContext();\n\n  const insertGoals = async (data: any, onSuccess?: () => void, onError?: () => void) => {\n    setLoading(true);\n    const response = await fetch(GraphQL.goalsInsert, {data});\n    if (response.goalsNotFinancially_Insert.status === 'success') {\n      onSuccess && onSuccess();\n    } else {\n      onError && onError();\n    }\n  };\n\n  return {loading, insertGoals};\n};\n\nexport default useInsertGoals;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertNonFinancial/insertNonFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/insertNonFinancial/useInsertNonFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/deleteInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/getInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/insertInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/useDeleteInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/useGetInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/invoice/useInsertInvoice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/judges/getJudges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/judges/useGetJudges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/orders/getOrders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/orders/useGetOrders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/organizationUnits/useGetOrganizationUnits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/deleteProceduralCost.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/insertProceduralCost.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/deleteProceduralCostPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/getProceduralCostPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/insertProceduralCostPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/useDeleteProceduralCostPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/useGetProceduralCostPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/proceduralCostsPayments/useInsertProceduralCostPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/useDeleteProceduralCost.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/useGetProceduralCosts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/proceduralCosts/useInsertProceduralCost.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/deletePropertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/insertPropertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/deletePropertyBenefitsConfiscationPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/getPropertyBenefitsConfiscationPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/insertPropertyBenefitsConfiscationPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useDeletePropertyBenefitsConfiscationPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useGetPropertyBenefitsConfiscationPayments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/propertyBenefitsConfiscationPayments/useInsertPropertyBenefitsConfiscationPayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/useDeletePropertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/useGetPropertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/propertyBenefitsConfiscation/useInsertPropertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/sendBudget/sendBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/sendBudget/useSendBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/services/graphQL/suppliers/useGetSuppliers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/FileUploadWrapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/budgetTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/components/budgetTableRow.tsx","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 12.","line":243,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":243,"endColumn":13,"fix":{"range":[8263,8275],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 10.","line":244,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":244,"endColumn":11,"fix":{"range":[8342,8352],"text":"        "}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import {\n  Typography,\n  ChevronRightIcon,\n  Theme,\n  Dropdown,\n  ChevronDownIcon,\n  EditIconTwo,\n  Input,\n  Checkbox,\n} from 'client-library';\nimport {ReactNode, useState, useMemo} from 'react';\nimport {Count} from '../../../types/graphQL/counts';\nimport {months, sourceOptions} from '../constants';\nimport {BudgetText, CountTableCell, FlexContainer} from '../styles';\nimport {BudgetTableStep} from '../types';\nimport BudgetingForm from './budgetingForm';\nimport {useFormContext, Controller} from 'react-hook-form';\n\ntype BudgetTableRowProps = {\n  step: BudgetTableStep | `${BudgetTableStep}`;\n  count: Count;\n  level: number;\n  fieldPath: string[];\n  children: ReactNode;\n  updateParentValues: (fieldPath: string) => void;\n};\n\nconst BudgetTableRow = ({step, count, level, fieldPath, children, updateParentValues}: BudgetTableRowProps) => {\n  const {control} = useFormContext();\n\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const onCollapse = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  const content = useMemo(() => {\n    switch (step) {\n      case BudgetTableStep.CREATING:\n      case BudgetTableStep.AWAITING_APPROVAL:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <Typography content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.BUDGETING:\n      case BudgetTableStep.BUDGETING_ACTUAL:\n        return (\n          <BudgetingForm\n            updateParentValues={updateParentValues}\n            level={level}\n            lastLevel={!count.children?.length}\n            fieldPath={fieldPath}\n            actual={step === BudgetTableStep.BUDGETING_ACTUAL}\n          />\n        );\n      case BudgetTableStep.VIEW_ANNUAL:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.VIEW_MONTHLY:\n        return (\n          <>\n            {months.map((value, index) => (\n              <CountTableCell level={level} key={`${value}-${index}`}>\n                <div style={{width: 50}}>\n                  <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n                </div>\n              </CountTableCell>\n            ))}\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.REBALANCING:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level} rebalanceCol>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level} rebalanceCol>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.CURRENT_BUDGET:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <BudgetText content=\"\" variant=\"bodySmall\" />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.VIEW_MONTHLY_WITH_EDIT:\n        return (\n          <>\n            {months.map((value, index) => (\n              <CountTableCell level={level} key={`${value}-${index}`}>\n                <div style={{width: 100}}>\n                  <Input />\n                  <BudgetText content=\"0.00\" variant=\"bodySmall\" style={{color: 'red'}} />\n                </div>\n              </CountTableCell>\n            ))}\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <div style={{display: 'flex', justifyContent: 'center'}}>\n                {/*TO DO add logic for Edit, for now we do not have BE ready */}\n                <EditIconTwo />\n              </div>\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.INTERNAL_REALLOCATION:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <Input />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <Input />\n            </CountTableCell>\n          </>\n        );\n      case BudgetTableStep.REQUEST_FUND_RELEASE:\n        return (\n          <>\n            <CountTableCell level={level}>\n              <BudgetText content=\"0.00\" variant=\"bodySmall\" />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <Input />\n            </CountTableCell>\n            <CountTableCell level={level}>\n              <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n                {/* TO DO add logic for check, for now we do not have BE */}\n                <Checkbox name={''} onChange={undefined} checked={false} style={{marginLeft: '20px'}} />\n              </div>\n            </CountTableCell>\n          </>\n        );\n      default:\n        <></>;\n    }\n  }, [step, count, level]);\n\n  const sourceCellContent = useMemo(() => {\n    const lastLevel = !count.children?.length;\n\n    if (lastLevel) {\n      return step === BudgetTableStep.BUDGETING ? (\n        <Controller\n          control={control}\n          name={`${fieldPath.join('.')}-source`}\n          render={({field: {onChange, name, value}}) => (\n            <Dropdown\n              options={sourceOptions}\n              value={value}\n              name={name}\n              onChange={onChange}\n              placeholder=\"Izaberite izvor\"\n            />\n          )}\n        />\n      ) : (\n        <Typography content=\"\" variant=\"bodySmall\" />\n      );\n    }\n\n    return null;\n  }, [count, step, level]);\n\n  const generateChevronIcon = () => {\n    return isCollapsed ? (\n      <ChevronDownIcon stroke={Theme.palette.gray900} style={{marginRight: 10}} />\n    ) : (\n      <ChevronRightIcon stroke={Theme.palette.gray900} style={{marginRight: 10}} />\n    );\n  };\n\n  return (\n    <>\n      <tr>\n        <CountTableCell level={level} onClick={level === 1 ? onCollapse : undefined} first>\n          <FlexContainer>\n            {level === 1 && generateChevronIcon()}\n            <Typography\n              content={`${count.serial_number} - ${count.title}`}\n              variant=\"bodySmall\"\n              style={{\n                marginLeft: level !== 1 ? 26 : 0,\n                fontWeight: level < 4 ? 600 : 400,\n                padding: `12px ${(level - 1) * 7}`,\n              }}\n            />\n          </FlexContainer>\n        </CountTableCell>\n\n        {/* TO DO  When all the templates are finished, check which ones require this and write the condition more nicely */}\n        {step !== BudgetTableStep.VIEW_MONTHLY &&\n          step !== BudgetTableStep.VIEW_MONTHLY_WITH_EDIT &&\n          step !== BudgetTableStep.INTERNAL_REALLOCATION &&\n          step !== BudgetTableStep.REQUEST_FUND_RELEASE && (\n            <CountTableCell level={level}>{sourceCellContent}</CountTableCell>\n          )}\n\n        {content}\n      </tr>\n\n      {isCollapsed && children}\n    </>\n  );\n};\n\nexport default BudgetTableRow;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/components/budgetingForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/constants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/budgetTable/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/confirmationModal/confirmationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/confirmationModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/confirmationModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[68,71],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[68,71],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[105,108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[105,108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[137,140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[137,140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ModalProps {\n  open: boolean;\n  onClose: (action?: any) => void;\n  onConfirm: (action?: any) => void;\n  customContent?: any;\n  subTitle?: string;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/deleteModal/deleteModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/deleteModal/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/deleteModal/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74,77],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74,77],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[114,117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[114,117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[146,149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[146,149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface DeleteModalProps {\n  open: boolean;\n  onClose: (action?: any) => void;\n  handleDelete: (action?: any) => void;\n  customContent?: any;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/flex.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/footer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/plusButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/screenWrapper/screenWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1092,1095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1092,1095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {FC, ReactElement, ReactNode} from 'react';\nimport {Breadcrumbs} from 'client-library';\nimport styled from 'styled-components';\nimport useAppContext from '../../context/useAppContext';\n\nconst Container = styled.div`\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: #f8f8f8;\n  padding: 28px 40px;\n  height: calc(100vh - 157px);\n  overflow-y: auto;\n  box-sizing: border-box;\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n  margin: 0;\n`;\n\nconst ScreenWrapper: FC<{children: ReactNode; showBreadcrumbs?: boolean}> = ({children, showBreadcrumbs = true}) => {\n  const {\n    breadcrumbs,\n    navigation: {navigate},\n  } = useAppContext();\n\n  const breadcrumbItems = breadcrumbs?.get();\n\n  const handleNavigation = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | undefined,\n    item?: {\n      name: string;\n      to: string;\n      icon?: ReactElement;\n    },\n  ) => {\n    e?.preventDefault();\n    const newBreacrumbs = [...breadcrumbItems];\n    const index = newBreacrumbs.findIndex((breadcrumb: any) => breadcrumb.name === item?.name);\n    newBreacrumbs.splice(index + 1, newBreacrumbs.length - index);\n    breadcrumbs.set(newBreacrumbs);\n    navigate(item?.to);\n  };\n\n  return (\n    <Container>\n      {showBreadcrumbs ? <StyledBreadcrumbs items={breadcrumbItems} onClick={handleNavigation} /> : null}\n      {children}\n    </Container>\n  );\n};\n\nexport default ScreenWrapper;\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/screenWrapper/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/sectionBox.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/statusTableCell/statusTableCell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/statusTableCell/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/styledTabsWithTitle/styledTabsWithTitle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/styledTabsWithTitle/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/shared/tableTitle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/deposits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/dropdownData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/fileUploadType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/budget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/budgetDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/budgetFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/budgetInsert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/budgetOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/counts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/feePaymentForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/fees.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[189,192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[189,192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[243,246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[243,246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {GetResponse, InsertResponse, SimpleResponse} from './response';\n\nexport type FeesResponse = {\n  get: {\n    //Todo: replce any with corresponding types\n    fee_Overview: GetResponse<any>;\n  };\n  insert: {\n    fee_Insert: InsertResponse<any>;\n  };\n  delete: {\n    fee_Delete: SimpleResponse;\n  };\n};\n\nexport type FeeInsertParams = {\n  fee_type: number;\n  fee_subcategory: number;\n  decision_number: string;\n  decision_date: string;\n  subject: string;\n  jmbg: string;\n  residence: string;\n  amount: number;\n  payment_reference_number: string;\n  debit_reference_number: string;\n  execution_date: string;\n  payment_deadline_date: string;\n  description: string;\n  court_account: number;\n  file: number[];\n  id: number;\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/fineForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/finePaymentForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/finesOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/fixedDeposits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/flatRate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/invoice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[86,89],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[86,89],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2094,2097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2094,2097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {DropdownData} from '../dropdownData';\n\nexport interface ArticlesType {\n  id?: any;\n  title?: string;\n  net_price?: number;\n  vat_price?: number;\n  description?: string;\n  vat_percentage?: number;\n  amount?: number;\n  account: {\n    id?: number;\n    title?: string;\n  };\n}\nexport interface InvoiceItem {\n  id: number;\n  status: string;\n  type: string;\n  type_of_contract: DropdownData<string>;\n  type_of_subject: DropdownData<string>;\n  source_of_funding: DropdownData<string>;\n  pro_forma_invoice_number: string;\n  invoice_number: string;\n  supplier_title: string;\n  supplier: {\n    id: number;\n    title: string;\n  };\n  order_id: number;\n  order: {\n    id: number;\n    title: string;\n  };\n  organization_unit: DropdownData<string>;\n  date_of_invoice: string;\n  pro_forma_invoice_date: string;\n  receipt_date: string;\n  sss_invoice_receipt_date: Date;\n  date_of_payment: string;\n  date_of_start: string;\n  file: {\n    id: number;\n    name: string;\n    type: string;\n  };\n  pro_forma_invoice_file: {\n    id: number;\n    name: string;\n    type: string;\n  };\n  bank_account: string;\n  description: string;\n  articles: ArticlesType[];\n  is_invoice: boolean;\n  passed_to_accounting: boolean;\n  passed_to_inventory: boolean;\n}\n\nexport interface GetInvoiceParams {\n  page: number;\n  size: number;\n  type: string;\n  id?: number;\n  status?: string | null;\n  year?: string | null;\n  supplier_id?: number | null;\n  search?: string;\n  organization_unit_id?: number;\n}\n\nexport interface InsertInvoiceParams {\n  is_invoice: {\n    id: boolean;\n    title: string;\n  };\n  invoice_number?: string;\n  supplier_id?: number | null;\n  order_id?: number | null;\n  organization_unit_id?: number | null;\n  date_of_invoice: string | null | Date;\n  pro_forma_invoice_number: string;\n  pro_forma_invoice_date: string | null | Date;\n  receipt_date: string | null | Date;\n  date_of_payment: string | null | Date;\n  sss_invoice_receipt_date: string | null | Date;\n  bank_account: DropdownData<string> | null;\n  description: string;\n  file_id?: number | null;\n  pro_forma_invoice_file_id?: number | null;\n  articles?: any[];\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/judges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/nonFinancial.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/orders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/organizationUnits.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[357,360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[357,360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface GetResponse<T> {\n  status: string;\n  message: string;\n  total?: number;\n  items: T[];\n}\n\nexport interface OrganizationUnit {\n  id: number;\n  parent_id: number;\n  number_of_judges: number;\n  title: string;\n  abbreviation: string;\n  description?: string;\n  address?: string;\n  color: string;\n  folder_id: number;\n  icon: string;\n  children?: any;\n}\n\nexport type GetOrganizationUnitsParams = {\n  page?: number;\n  size?: number;\n  search?: string;\n};\n\nexport type GetOrganizationUnitsOptions = {\n  allOption?: boolean;\n};\n\nexport type OrganizationUnitsResponse = {\n  get: {\n    organizationUnits: GetResponse<OrganizationUnit>;\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/proceduralCosts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/propertyBenefitsConfiscation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/response.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1651,1654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1651,1654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3162,3165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3162,3165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3233,3236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3233,3236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3801,3804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3801,3804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3886,3889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3886,3889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4312,4315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4312,4315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4378,4381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4378,4381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {BudgetOverviewItem} from './budgetOverview';\nimport {BudgetOverviewInsert} from './budgetInsert';\nimport {BudgetDetailsItem} from './budgetDetails';\nimport {NonFinancialGoal} from './nonFinancial.ts';\nimport {FinesOverviewItem} from './finesOverview.ts';\nimport {InvoiceItem} from './invoice.ts';\nimport {PaymentDetails as FinePaymentDetails} from '../../screens/finesAndTaxes/fines/paymentDetails/types.ts';\nimport {PaymentDetails as FeePaymentDetails} from '../../screens/finesAndTaxes/taxes/paymentDetails/types.ts';\nimport {ProceduralCostOverviewItem} from './proceduralCosts.ts';\nimport {PropertyBenefitsConfiscationOverviewItem} from './propertyBenefitsConfiscation.ts';\nimport {FlatRateOverviewItem} from './flatRate.ts';\n\nexport type PageParams = {\n  page?: number;\n  size?: number;\n};\n\nexport interface GetResponse<T> {\n  status: string;\n  message: string;\n  total?: number;\n  items: T[];\n}\n\nexport interface InsertResponse<T> {\n  status: string;\n  message: string;\n  item: T;\n}\n\nexport type SimpleResponse = {\n  status: string;\n  message: string;\n};\n\nexport type DetailsResponse<T> = {\n  status: string;\n  message: string;\n  item: T | null;\n};\n\nexport type BudgetResponse = {\n  get: {\n    budget_Overview: GetResponse<BudgetOverviewItem>;\n  };\n  insert: {\n    budget_Insert: InsertResponse<BudgetOverviewInsert>;\n  };\n  delete: {\n    budget_Delete: SimpleResponse;\n  };\n  send: {\n    budget_Send: SimpleResponse;\n  };\n  details: {\n    budget_Details: GetResponse<BudgetDetailsItem>;\n  };\n};\n\nexport type NonFinancialResponse = {\n  // get: {};\n  insert: {\n    // TODO add correct type\n    requestNotFinancially_Insert: InsertResponse<any>;\n  };\n  // delete: {};\n};\n\nexport type GoalsResponse = {\n  // get: {};\n  insert: {\n    // TODO add correct type\n    goalsNotFinancially_Insert: InsertResponse<NonFinancialGoal>;\n  };\n  // delete: {};\n};\n\nexport type FinesResponse = {\n  get: {\n    fine_Overview: GetResponse<FinesOverviewItem>;\n  };\n  insert: {\n    fine_Insert: InsertResponse<FinesOverviewItem>;\n  };\n  delete: {\n    fine_Delete: SimpleResponse;\n  };\n};\n\nexport type FinesPaymentsResponse = {\n  get: {\n    finePayment_Overview: GetResponse<FinePaymentDetails>;\n  };\n  insert: {\n    finePayment_Insert: InsertResponse<FinePaymentDetails>;\n  };\n  delete: {\n    finePayment_Delete: SimpleResponse;\n  };\n};\n\nexport type InvoiceResponse = {\n  get: {\n    invoice_Overview: GetResponse<InvoiceItem>;\n  };\n  insert: {\n    invoice_Insert: InsertResponse<InvoiceItem>;\n  };\n  delete: {\n    invoice_Delete: SimpleResponse;\n  };\n};\n\nexport type FeesPaymentsResponse = {\n  get: {\n    feePayment_Overview: GetResponse<FeePaymentDetails>;\n  };\n  insert: {\n    feePayment_Insert: InsertResponse<FeePaymentDetails>;\n  };\n  delete: {\n    feePayment_Delete: SimpleResponse;\n  };\n};\n\nexport type ProceduralCostResponse = {\n  get: {\n    procedureCost_Overview: GetResponse<ProceduralCostOverviewItem>;\n  };\n  insert: {\n    procedureCost_Insert: InsertResponse<ProceduralCostOverviewItem>;\n  };\n  delete: {\n    procedureCost_Delete: SimpleResponse;\n  };\n};\n\nexport type ProceduralCostPaymentsResponse = {\n  get: {\n    procedureCostPayment_Overview: GetResponse<any>;\n  };\n  insert: {\n    procedureCostPayment_Insert: InsertResponse<any>;\n  };\n  delete: {\n    procedureCostPayment_Delete: SimpleResponse;\n  };\n};\n\nexport type PropertyBenefitsConfiscationResponse = {\n  get: {\n    propertyBenefitConfiscation_Overview: GetResponse<PropertyBenefitsConfiscationOverviewItem>;\n  };\n  insert: {\n    propertyBenefitConfiscation_Insert: InsertResponse<PropertyBenefitsConfiscationOverviewItem>;\n  };\n  delete: {\n    propertyBenefitConfiscation_Delete: SimpleResponse;\n  };\n};\n\nexport type PropertyBenefitsConfiscationPaymentsResponse = {\n  get: {\n    propertyBenefitConfiscationPayment_Overview: GetResponse<any>;\n  };\n  insert: {\n    propertyBenefitConfiscationPayment_Insert: InsertResponse<any>;\n  };\n  delete: {\n    propertyBenefitConfiscationPayment_Delete: SimpleResponse;\n  };\n};\n\nexport type FlatRateResponse = {\n  get: {\n    flatRate_Overview: GetResponse<FlatRateOverviewItem>;\n  };\n  insert: {\n    flatRate_Insert: InsertResponse<FlatRateOverviewItem>;\n  };\n  delete: {\n    flatRate_Delete: SimpleResponse;\n  };\n};\n\nexport type FlatRatePaymentsResponse = {\n  get: {\n    flatRatePayment_Overview: GetResponse<any>;\n  };\n  insert: {\n    flatRatePayment_Insert: InsertResponse<any>;\n  };\n  delete: {\n    flatRatePayment_Delete: SimpleResponse;\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/graphQL/suppliers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/micro-service-props.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[54,57],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[54,57],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface MicroserviceProps {\n  [key: string]: any;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/nonFinance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/types/response.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/createOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/formSchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/getCurrentTab.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/getMonthOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/getRouteName.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/getYearFromPath.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/getYearOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/roundCurrency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/usePrependedDropdownOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/utils/useTitle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]},{"filePath":"/builds/erp/finance-fe/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]}]}]